

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed May 10 00:11:38 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 1.42
    52                           ; Generated 13/04/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F25K22 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	nvBANK0
    87  0000B7                     __pnvBANK0:
    88                           	opt stack 0
    89  0000B7                     _adr:
    90                           	opt stack 0
    91  0000B7                     	ds	1
    92  0000                     _ANSELCbits	set	3898
    93  0000                     _ANSELAbits	set	3896
    94  0000                     _PIR2bits	set	4001
    95  0000                     _EECON2	set	4007
    96  0000                     _EECON1bits	set	4006
    97  0000                     _EEDATA	set	4008
    98  0000                     _EEADR	set	4009
    99  0000                     _LATA	set	3977
   100  0000                     _PIR3bits	set	4004
   101  0000                     _PIR1bits	set	3998
   102  0000                     _PIE3bits	set	4003
   103  0000                     _PIE1bits	set	3997
   104  0000                     _SPBRG2	set	3957
   105  0000                     _SPBRGH2	set	3958
   106  0000                     _BAUDCON2bits	set	3952
   107  0000                     _SPBRG1	set	4015
   108  0000                     _SPBRGH1	set	4016
   109  0000                     _BAUDCON1bits	set	4024
   110  0000                     _IPR3bits	set	4005
   111  0000                     _RCSTA2bits	set	3953
   112  0000                     _TXSTA2bits	set	3954
   113  0000                     _IPR1bits	set	3999
   114  0000                     _RCSTA1bits	set	4011
   115  0000                     _TXSTA1bits	set	4012
   116  0000                     _TRISCbits	set	3988
   117  0000                     _TRISBbits	set	3987
   118  0000                     _TRISAbits	set	3986
   119  0000                     _INTCONbits	set	4082
   120  0000                     _RCONbits	set	4048
   121  0000                     _PIE5	set	3965
   122  0000                     _PIE4	set	3962
   123  0000                     _PIE3	set	4003
   124  0000                     _PIE2	set	4000
   125  0000                     _PIE1	set	3997
   126  0000                     _INTCON3	set	4080
   127  0000                     _INTCON	set	4082
   128  0000                     _OSCCON2bits	set	4050
   129  0000                     _OSCTUNEbits	set	3995
   130  0000                     _OSCCONbits	set	4051
   131  0000                     _TXSTA2	set	3954
   132  0000                     _RCSTA2	set	3953
   133  0000                     _TXSTA1	set	4012
   134  0000                     _RCSTA1	set	4011
   135  0000                     _RCREG2	set	3956
   136  0000                     _TXREG2	set	3955
   137  0000                     _RCREG1	set	4014
   138  0000                     _TXREG1	set	4013
   139  0000                     _LATB	set	3978
   140                           
   141                           ; #config settings
   142  0000                     
   143                           	psect	cinit
   144  0012B0                     __pcinit:
   145                           	opt stack 0
   146  0012B0                     start_initialization:
   147                           	opt stack 0
   148  0012B0                     __initialization:
   149                           	opt stack 0
   150                           
   151                           ; Clear objects allocated to BANK4 (132 bytes)
   152  0012B0  EE04  F000         	lfsr	0,__pbssBANK4
   153  0012B4  0E84               	movlw	132
   154  0012B6                     clear_0:
   155  0012B6  6AEE               	clrf	postinc0,c
   156  0012B8  06E8               	decf	wreg,f,c
   157  0012BA  E1FD               	bnz	clear_0
   158                           
   159                           ; Clear objects allocated to BANK3 (132 bytes)
   160  0012BC  EE03  F000         	lfsr	0,__pbssBANK3
   161  0012C0  0E84               	movlw	132
   162  0012C2                     clear_1:
   163  0012C2  6AEE               	clrf	postinc0,c
   164  0012C4  06E8               	decf	wreg,f,c
   165  0012C6  E1FD               	bnz	clear_1
   166                           
   167                           ; Clear objects allocated to BANK2 (238 bytes)
   168  0012C8  EE02  F000         	lfsr	0,__pbssBANK2
   169  0012CC  0EEE               	movlw	238
   170  0012CE                     clear_2:
   171  0012CE  6AEE               	clrf	postinc0,c
   172  0012D0  06E8               	decf	wreg,f,c
   173  0012D2  E1FD               	bnz	clear_2
   174                           
   175                           ; Clear objects allocated to BANK1 (238 bytes)
   176  0012D4  EE01  F000         	lfsr	0,__pbssBANK1
   177  0012D8  0EEE               	movlw	238
   178  0012DA                     clear_3:
   179  0012DA  6AEE               	clrf	postinc0,c
   180  0012DC  06E8               	decf	wreg,f,c
   181  0012DE  E1FD               	bnz	clear_3
   182                           
   183                           ; Clear objects allocated to BANK0 (31 bytes)
   184  0012E0  EE00  F098         	lfsr	0,__pbssBANK0
   185  0012E4  0E1F               	movlw	31
   186  0012E6                     clear_4:
   187  0012E6  6AEE               	clrf	postinc0,c
   188  0012E8  06E8               	decf	wreg,f,c
   189  0012EA  E1FD               	bnz	clear_4
   190                           
   191                           ; Clear objects allocated to COMRAM (19 bytes)
   192  0012EC  EE00  F027         	lfsr	0,__pbssCOMRAM
   193  0012F0  0E13               	movlw	19
   194  0012F2                     clear_5:
   195  0012F2  6AEE               	clrf	postinc0,c
   196  0012F4  06E8               	decf	wreg,f,c
   197  0012F6  E1FD               	bnz	clear_5
   198  0012F8                     end_of_initialization:
   199                           	opt stack 0
   200  0012F8                     __end_of__initialization:
   201                           	opt stack 0
   202  0012F8  903A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   203  0012FA  923A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   204  0012FC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   205  0012FE  6EF8               	movwf	tblptru,c
   206  001300  0100               	movlb	0
   207  001302  EF49  F000         	goto	_main	;jump to C main() function
   208                           tblptru	equ	0xFF8
   209                           postinc0	equ	0xFEE
   210                           wreg	equ	0xFE8
   211                           
   212                           	psect	bssCOMRAM
   213  000027                     __pbssCOMRAM:
   214                           	opt stack 0
   215  000027                     _packetSendLen:
   216                           	opt stack 0
   217  000027                     	ds	1
   218  000028                     _ledTx:
   219                           	opt stack 0
   220  000028                     	ds	9
   221  000031                     _ledRx:
   222                           	opt stack 0
   223  000031                     	ds	9
   224                           tblptru	equ	0xFF8
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           
   228                           	psect	bssBANK0
   229  000098                     __pbssBANK0:
   230                           	opt stack 0
   231  000098                     _packetRecvLen:
   232                           	opt stack 0
   233  000098                     	ds	1
   234  000099                     _packetAddress:
   235                           	opt stack 0
   236  000099                     	ds	1
   237  00009A                     _packetCtrl:
   238                           	opt stack 0
   239  00009A                     	ds	1
   240  00009B                     _dataAvailable:
   241                           	opt stack 0
   242  00009B                     	ds	1
   243  00009C                     _packetReady:
   244                           	opt stack 0
   245  00009C                     	ds	1
   246  00009D                     _mode:
   247                           	opt stack 0
   248  00009D                     	ds	1
   249  00009E                     _uart:
   250                           	opt stack 0
   251  00009E                     	ds	25
   252                           tblptru	equ	0xFF8
   253                           postinc0	equ	0xFEE
   254                           wreg	equ	0xFE8
   255                           
   256                           	psect	bssBANK1
   257  000100                     __pbssBANK1:
   258                           	opt stack 0
   259  000100                     _spiRecvBuffer:
   260                           	opt stack 0
   261  000100                     	ds	106
   262  00016A                     _packetRecvBuffer:
   263                           	opt stack 0
   264  00016A                     	ds	132
   265                           tblptru	equ	0xFF8
   266                           postinc0	equ	0xFEE
   267                           wreg	equ	0xFE8
   268                           
   269                           	psect	bssBANK2
   270  000200                     __pbssBANK2:
   271                           	opt stack 0
   272  000200                     _spiSendBuffer:
   273                           	opt stack 0
   274  000200                     	ds	106
   275  00026A                     _uartSendBuffer:
   276                           	opt stack 0
   277  00026A                     	ds	132
   278                           tblptru	equ	0xFF8
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           
   282                           	psect	bssBANK3
   283  000300                     __pbssBANK3:
   284                           	opt stack 0
   285  000300                     _uartRecvBuffer:
   286                           	opt stack 0
   287  000300                     	ds	132
   288                           tblptru	equ	0xFF8
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           
   292                           	psect	bssBANK4
   293  000400                     __pbssBANK4:
   294                           	opt stack 0
   295  000400                     _packetSendBuffer:
   296                           	opt stack 0
   297  000400                     	ds	132
   298                           tblptru	equ	0xFF8
   299                           postinc0	equ	0xFEE
   300                           wreg	equ	0xFE8
   301                           
   302                           	psect	cstackBANK0
   303  000060                     __pcstackBANK0:
   304                           	opt stack 0
   305  000060                     ??_SetupInternalOscillator:
   306  000060                     EERead@adresse:
   307                           	opt stack 0
   308  000060                     fifoInit@fifo:
   309                           	opt stack 0
   310  000060                     fifoPut@fifo:
   311                           	opt stack 0
   312  000060                     fifoGet@fifo:
   313                           	opt stack 0
   314  000060                     uartInitHalfDuplex@uart:
   315                           	opt stack 0
   316  000060                     uartEnableSend@uart:
   317                           	opt stack 0
   318  000060                     uartEnableRecv@uart:
   319                           	opt stack 0
   320  000060                     ledInit@led:
   321                           	opt stack 0
   322  000060                     ledOn@led:
   323                           	opt stack 0
   324  000060                     ledOff@led:
   325                           	opt stack 0
   326  000060                     ledFlash@led:
   327                           	opt stack 0
   328  000060                     ledTact@led:
   329                           	opt stack 0
   330  000060                     myDelay@per:
   331                           	opt stack 0
   332  000060                     GetBaudRateConfig@rate:
   333                           	opt stack 0
   334                           
   335                           ; 4 bytes @ 0x0
   336  000060                     	ds	1
   337  000061                     SetupInternalOscillator@setBits:
   338                           	opt stack 0
   339  000061                     EERead@orgGIE:
   340                           	opt stack 0
   341                           
   342                           ; 1 bytes @ 0x1
   343  000061                     	ds	1
   344  000062                     fifoPut@put:
   345                           	opt stack 0
   346  000062                     uartEnableSend@onoff:
   347                           	opt stack 0
   348  000062                     uartEnableRecv@onoff:
   349                           	opt stack 0
   350  000062                     fifoInit@buf:
   351                           	opt stack 0
   352  000062                     fifoGet@get:
   353                           	opt stack 0
   354  000062                     uartInitHalfDuplex@port:
   355                           	opt stack 0
   356  000062                     ledInit@on:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x2
   360  000062                     	ds	1
   361  000063                     ??_fifoPut:
   362                           
   363                           ; 1 bytes @ 0x3
   364  000063                     	ds	1
   365  000064                     ??_fifoGet:
   366  000064                     fifoInit@size:
   367                           	opt stack 0
   368  000064                     uartInitHalfDuplex@bt:
   369                           	opt stack 0
   370  000064                     myDelay@i:
   371                           	opt stack 0
   372  000064                     ledInit@off:
   373                           	opt stack 0
   374  000064                     GetBaudRateConfig@osc:
   375                           	opt stack 0
   376                           
   377                           ; 4 bytes @ 0x4
   378  000064                     	ds	1
   379  000065                     ??_uartInitHalfDuplex:
   380                           
   381                           ; 1 bytes @ 0x5
   382  000065                     	ds	1
   383  000066                     ledInit@bm:
   384                           	opt stack 0
   385  000066                     fifoPutBuf@fifo:
   386                           	opt stack 0
   387  000066                     uartSendByte@uart:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x6
   391  000066                     	ds	1
   392  000067                     uartRecvByte@uart:
   393                           	opt stack 0
   394                           
   395                           ; 2 bytes @ 0x7
   396  000067                     	ds	1
   397  000068                     uartSendByte@snd:
   398                           	opt stack 0
   399  000068                     fifoPutBuf@buf:
   400                           	opt stack 0
   401  000068                     GetBaudRateConfig@setBRG16:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x8
   405  000068                     	ds	1
   406  000069                     uartSendByte@res:
   407                           	opt stack 0
   408  000069                     uartRecvByte@data:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x9
   412  000069                     	ds	1
   413  00006A                     fifoPutBuf@size:
   414                           	opt stack 0
   415  00006A                     GetBaudRateConfig@brgh:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0xA
   419  00006A                     	ds	1
   420  00006B                     uartSendBuf@uart:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0xB
   424  00006B                     	ds	1
   425  00006C                     GetBaudRateConfig@brgl:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0xC
   429  00006C                     	ds	1
   430  00006D                     uartSendBuf@str:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0xD
   434  00006D                     	ds	1
   435  00006E                     ??_GetBaudRateConfig:
   436                           
   437                           ; 1 bytes @ 0xE
   438  00006E                     	ds	1
   439  00006F                     uartSendBuf@size:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0xF
   443  00006F                     	ds	1
   444  000070                     uartSendBuf@res:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x10
   448  000070                     	ds	2
   449  000072                     GetBaudRateConfig@brg:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0x12
   453  000072                     	ds	2
   454  000074                     SetBaudRate@uart:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x14
   458  000074                     	ds	2
   459  000076                     SetBaudRate@rate:
   460                           	opt stack 0
   461                           
   462                           ; 4 bytes @ 0x16
   463  000076                     	ds	4
   464  00007A                     SetBaudRate@osc:
   465                           	opt stack 0
   466                           
   467                           ; 4 bytes @ 0x1A
   468  00007A                     	ds	4
   469  00007E                     SetBaudRate@o:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x1E
   473  00007E                     	ds	1
   474  00007F                     SetBaudRate@h:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x1F
   478  00007F                     	ds	1
   479  000080                     SetBaudRate@l:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x20
   483  000080                     	ds	1
   484  000081                     SetBaudRate@brg16:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x21
   488  000081                     	ds	1
   489  000082                     uartInit@uart:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x22
   493  000082                     	ds	2
   494  000084                     uartInit@num:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x24
   498  000084                     	ds	1
   499  000085                     uartInit@baud:
   500                           	opt stack 0
   501                           
   502                           ; 4 bytes @ 0x25
   503  000085                     	ds	4
   504  000089                     uartInit@osc:
   505                           	opt stack 0
   506                           
   507                           ; 4 bytes @ 0x29
   508  000089                     	ds	4
   509  00008D                     uartInit@sendbuf:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x2D
   513  00008D                     	ds	2
   514  00008F                     uartInit@sendSize:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x2F
   518  00008F                     	ds	1
   519  000090                     uartInit@recvbuf:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0x30
   523  000090                     	ds	2
   524  000092                     uartInit@recvSize:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x32
   528  000092                     	ds	1
   529  000093                     ??_main:
   530                           
   531                           ; 1 bytes @ 0x33
   532  000093                     	ds	2
   533  000095                     main@pckRecvPtr:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x35
   537  000095                     	ds	1
   538  000096                     main@nullByte:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x36
   542  000096                     	ds	1
   543  000097                     main@b:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x37
   547  000097                     	ds	1
   548                           tblptru	equ	0xFF8
   549                           postinc0	equ	0xFEE
   550                           wreg	equ	0xFE8
   551                           
   552                           	psect	cstackCOMRAM
   553  000001                     __pcstackCOMRAM:
   554                           	opt stack 0
   555  000001                     i2fifoPut@fifo:
   556                           	opt stack 0
   557  000001                     i2fifoGet@fifo:
   558                           	opt stack 0
   559  000001                     i2uartEnableSend@uart:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x0
   563  000001                     	ds	2
   564  000003                     i2fifoPut@put:
   565                           	opt stack 0
   566  000003                     i2uartEnableSend@onoff:
   567                           	opt stack 0
   568  000003                     i2fifoGet@get:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x2
   572  000003                     	ds	1
   573  000004                     ??i2_fifoPut:
   574  000004                     ??i2_uartEnableSend:
   575                           
   576                           ; 1 bytes @ 0x3
   577  000004                     	ds	1
   578  000005                     ??i2_fifoGet:
   579                           
   580                           ; 1 bytes @ 0x4
   581  000005                     	ds	3
   582  000008                     uartInterruptHandler@uart:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x7
   586  000008                     	ds	2
   587  00000A                     ??_uartInterruptHandler:
   588                           
   589                           ; 1 bytes @ 0x9
   590  00000A                     	ds	3
   591  00000D                     uartInterruptHandler@iTxEnable:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0xC
   595  00000D                     	ds	1
   596  00000E                     uartInterruptHandler@txsta:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0xD
   600  00000E                     	ds	2
   601  000010                     uartInterruptHandler@iTxFlag:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0xF
   605  000010                     	ds	1
   606  000011                     uartInterruptHandler@iRxEnable:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x10
   610  000011                     	ds	1
   611  000012                     uartInterruptHandler@fErr:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x11
   615  000012                     	ds	1
   616  000013                     uartInterruptHandler@oErr:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x12
   620  000013                     	ds	1
   621  000014                     uartInterruptHandler@iRxFlag:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x13
   625  000014                     	ds	1
   626  000015                     uartInterruptHandler@rcsta:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0x14
   630  000015                     	ds	2
   631  000017                     uartInterruptHandler@data:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x16
   635  000017                     	ds	1
   636  000018                     ??_IntHighRoutine:
   637                           
   638                           ; 1 bytes @ 0x17
   639  000018                     	ds	14
   640  000026                     ??_uartEnableSend:
   641  000026                     ??_uartEnableRecv:
   642  000026                     SetupInternalOscillator@enpll:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x25
   646  000026                     	ds	1
   647  000027                     tblptru	equ	0xFF8
   648                           postinc0	equ	0xFEE
   649                           wreg	equ	0xFE8
   650                           
   651                           ; 1 bytes @ 0x26
   652 ;;
   653 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   654 ;;
   655 ;; *************** function _main *****************
   656 ;; Defined at:
   657 ;;		line 178 in file "main.c"
   658 ;; Parameters:    Size  Location     Type
   659 ;;		None
   660 ;; Auto vars:     Size  Location     Type
   661 ;;  b               1   55[BANK0 ] unsigned char 
   662 ;;  nullByte        1   54[BANK0 ] unsigned char 
   663 ;;  pckRecvPtr      1   53[BANK0 ] unsigned char 
   664 ;;  newByte         1    0        unsigned char 
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      void 
   667 ;; Registers used:
   668 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   674 ;;      Params:         0       0       0       0       0       0       0
   675 ;;      Locals:         0       3       0       0       0       0       0
   676 ;;      Temps:          0       2       0       0       0       0       0
   677 ;;      Totals:         0       5       0       0       0       0       0
   678 ;;Total ram usage:        5 bytes
   679 ;; Hardware stack levels required when called:    7
   680 ;; This function calls:
   681 ;;		_InitSystem
   682 ;;		_InitUart
   683 ;;		_crcOk
   684 ;;		_decodeRecvBuffer
   685 ;;		_ledFlash
   686 ;;		_ledOff
   687 ;;		_ledOn
   688 ;;		_ledTact
   689 ;;		_myDelay
   690 ;;		_uartRecvByte
   691 ;;		_uartSendBuf
   692 ;;		_uartSendByte
   693 ;; This function is called by:
   694 ;;		Startup code after reset
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698                           	psect	text0
   699  000092                     __ptext0:
   700                           	opt stack 0
   701  000092                     _main:
   702                           	opt stack 24
   703                           
   704                           ;main.c: 180: char b;
   705                           ;main.c: 181: char newByte;
   706                           ;main.c: 182: char nullByte=0;
   707                           
   708                           ;incstack = 0
   709  000092  0E00               	movlw	0
   710  000094  0100               	movlb	0	; () banked
   711  000096  6F96               	movwf	main@nullByte& (0+255),b
   712                           
   713                           ;main.c: 183: char pckRecvPtr=0;
   714  000098  0E00               	movlw	0
   715  00009A  0100               	movlb	0	; () banked
   716  00009C  6F95               	movwf	main@pckRecvPtr& (0+255),b
   717                           
   718                           ; BSR set to: 0
   719                           ;main.c: 184: adr=-1;
   720  00009E  0100               	movlb	0	; () banked
   721  0000A0  69B7               	setf	_adr& (0+255),b
   722                           
   723                           ; BSR set to: 0
   724                           ;main.c: 186: InitSystem();
   725  0000A2  EC06  F008         	call	_InitSystem	;wreg free
   726                           
   727                           ;main.c: 188: ledOn(&ledRx);
   728  0000A6  0E31               	movlw	low _ledRx
   729  0000A8  0100               	movlb	0	; () banked
   730  0000AA  6F60               	movwf	ledOn@led& (0+255),b
   731  0000AC  0E00               	movlw	high _ledRx
   732  0000AE  0100               	movlb	0	; () banked
   733  0000B0  6F61               	movwf	(ledOn@led+1)& (0+255),b
   734  0000B2  EC98  F00A         	call	_ledOn	;wreg free
   735                           
   736                           ;main.c: 189: ledOn(&ledTx);
   737  0000B6  0E28               	movlw	low _ledTx
   738  0000B8  0100               	movlb	0	; () banked
   739  0000BA  6F60               	movwf	ledOn@led& (0+255),b
   740  0000BC  0E00               	movlw	high _ledTx
   741  0000BE  0100               	movlb	0	; () banked
   742  0000C0  6F61               	movwf	(ledOn@led+1)& (0+255),b
   743  0000C2  EC98  F00A         	call	_ledOn	;wreg free
   744                           
   745                           ;main.c: 191: InitUart();
   746  0000C6  ECAF  F007         	call	_InitUart	;wreg free
   747                           
   748                           ;main.c: 192: myDelay(500);
   749  0000CA  0EF4               	movlw	244
   750  0000CC  0100               	movlb	0	; () banked
   751  0000CE  6F60               	movwf	myDelay@per& (0+255),b
   752  0000D0  0E01               	movlw	1
   753  0000D2  6F61               	movwf	(myDelay@per+1)& (0+255),b
   754  0000D4  0E00               	movlw	0
   755  0000D6  6F62               	movwf	(myDelay@per+2)& (0+255),b
   756  0000D8  0E00               	movlw	0
   757  0000DA  6F63               	movwf	(myDelay@per+3)& (0+255),b
   758  0000DC  EC83  F009         	call	_myDelay	;wreg free
   759                           
   760                           ;main.c: 194: ledOff(&ledRx);
   761  0000E0  0E31               	movlw	low _ledRx
   762  0000E2  0100               	movlb	0	; () banked
   763  0000E4  6F60               	movwf	ledOff@led& (0+255),b
   764  0000E6  0E00               	movlw	high _ledRx
   765  0000E8  0100               	movlb	0	; () banked
   766  0000EA  6F61               	movwf	(ledOff@led+1)& (0+255),b
   767  0000EC  EC7B  F00A         	call	_ledOff	;wreg free
   768                           
   769                           ;main.c: 195: ledOff(&ledTx);
   770  0000F0  0E28               	movlw	low _ledTx
   771  0000F2  0100               	movlb	0	; () banked
   772  0000F4  6F60               	movwf	ledOff@led& (0+255),b
   773  0000F6  0E00               	movlw	high _ledTx
   774  0000F8  0100               	movlb	0	; () banked
   775  0000FA  6F61               	movwf	(ledOff@led+1)& (0+255),b
   776  0000FC  EC7B  F00A         	call	_ledOff	;wreg free
   777                           
   778                           ;main.c: 197: mode=(2);
   779  000100  0E02               	movlw	2
   780  000102  D05A               	goto	L1
   781  000104                     l4040:
   782                           
   783                           ; BSR set to: 0
   784                           ;main.c: 198: packetAddress=-1;
   785  000104  0100               	movlb	0	; () banked
   786  000106  6999               	setf	_packetAddress& (0+255),b
   787  000108  D05A               	goto	l4076
   788  00010A                     l4044:
   789                           
   790                           ;main.c: 202: {
   791                           ;main.c: 203: if (mode==(1))
   792  00010A  0100               	movlb	0	; () banked
   793  00010C  059D               	decf	_mode& (0+255),w,b
   794  00010E  A4D8               	btfss	status,2,c
   795  000110  D010               	goto	l4052
   796                           
   797                           ; BSR set to: 0
   798                           ;main.c: 204: {
   799                           ;main.c: 205: if (uart.status & 2)
   800  000112  0100               	movlb	0	; () banked
   801  000114  A3B0               	btfss	(_uart+18)& (0+255),1,b
   802  000116  D004               	goto	l4050
   803                           
   804                           ; BSR set to: 0
   805                           ;main.c: 206: {
   806                           ;main.c: 207: mode=(2);
   807  000118  0E02               	movlw	2
   808  00011A  0100               	movlb	0	; () banked
   809  00011C  6F9D               	movwf	_mode& (0+255),b
   810                           
   811                           ;main.c: 208: }
   812  00011E  D009               	goto	l4052
   813  000120                     l4050:
   814                           
   815                           ; BSR set to: 0
   816                           ;main.c: 209: else
   817                           ;main.c: 210: {
   818                           ;main.c: 211: ledFlash(&ledTx);
   819  000120  0E28               	movlw	low _ledTx
   820  000122  0100               	movlb	0	; () banked
   821  000124  6F60               	movwf	ledFlash@led& (0+255),b
   822  000126  0E00               	movlw	high _ledTx
   823  000128  0100               	movlb	0	; () banked
   824  00012A  6F61               	movwf	(ledFlash@led+1)& (0+255),b
   825  00012C  ECC9  F00A         	call	_ledFlash	;wreg free
   826                           
   827                           ;main.c: 212: continue;
   828  000130  D7EC               	goto	l4044
   829  000132                     l4052:
   830                           
   831                           ;main.c: 213: }
   832                           ;main.c: 214: }
   833                           ;main.c: 216: if (mode==(2))
   834  000132  0E02               	movlw	2
   835  000134  0100               	movlb	0	; () banked
   836  000136  199D               	xorwf	_mode& (0+255),w,b
   837  000138  A4D8               	btfss	status,2,c
   838  00013A  D01C               	goto	l4062
   839                           
   840                           ; BSR set to: 0
   841                           ;main.c: 217: {
   842                           ;main.c: 218: if (packetReady)
   843  00013C  0100               	movlb	0	; () banked
   844  00013E  519C               	movf	_packetReady& (0+255),w,b
   845  000140  0100               	movlb	0	; () banked
   846  000142  B4D8               	btfsc	status,2,c
   847  000144  D017               	goto	l4062
   848                           
   849                           ; BSR set to: 0
   850                           ;main.c: 219: {
   851                           ;main.c: 220: uartSendBuf(&uart,packetRecvBuffer,packetReady);
   852  000146  0E9E               	movlw	low _uart
   853  000148  0100               	movlb	0	; () banked
   854  00014A  6F6B               	movwf	uartSendBuf@uart& (0+255),b
   855  00014C  0E00               	movlw	high _uart
   856  00014E  0100               	movlb	0	; () banked
   857  000150  6F6C               	movwf	(uartSendBuf@uart+1)& (0+255),b
   858  000152  0E6A               	movlw	low _packetRecvBuffer
   859  000154  0100               	movlb	0	; () banked
   860  000156  6F6D               	movwf	uartSendBuf@str& (0+255),b
   861  000158  0E01               	movlw	high _packetRecvBuffer
   862  00015A  0100               	movlb	0	; () banked
   863  00015C  6F6E               	movwf	(uartSendBuf@str+1)& (0+255),b
   864  00015E  C09C  F06F         	movff	_packetReady,uartSendBuf@size
   865  000162  EC1E  F00A         	call	_uartSendBuf	;wreg free
   866                           
   867                           ;main.c: 221: mode=(1);
   868  000166  0E01               	movlw	1
   869  000168  0100               	movlb	0	; () banked
   870  00016A  6F9D               	movwf	_mode& (0+255),b
   871                           
   872                           ; BSR set to: 0
   873                           ;main.c: 222: packetReady=0;
   874  00016C  0E00               	movlw	0
   875  00016E  0100               	movlb	0	; () banked
   876  000170  6F9C               	movwf	_packetReady& (0+255),b
   877                           
   878                           ;main.c: 223: continue;
   879  000172  D7CB               	goto	l4044
   880  000174                     l4062:
   881                           
   882                           ; BSR set to: 0
   883                           ;main.c: 224: }
   884                           ;main.c: 225: }
   885                           ;main.c: 227: if (!uartRecvByte(&uart,b))
   886  000174  0E9E               	movlw	low _uart
   887  000176  0100               	movlb	0	; () banked
   888  000178  6F67               	movwf	uartRecvByte@uart& (0+255),b
   889  00017A  0E00               	movlw	high _uart
   890  00017C  0100               	movlb	0	; () banked
   891  00017E  6F68               	movwf	(uartRecvByte@uart+1)& (0+255),b
   892  000180  0100               	movlb	0	; () banked
   893  000182  5197               	movf	main@b& (0+255),w,b
   894  000184  0100               	movlb	0	; () banked
   895  000186  6F93               	movwf	??_main& (0+255),b
   896  000188  6B94               	clrf	(??_main+1)& (0+255),b
   897  00018A  C093  F069         	movff	??_main,uartRecvByte@data
   898  00018E  C094  F06A         	movff	??_main+1,uartRecvByte@data+1
   899  000192  ECDB  F00A         	call	_uartRecvByte	;wreg free
   900  000196  0900               	iorlw	0
   901  000198  B4D8               	btfsc	status,2,c
   902  00019A  D7B7               	goto	l4044
   903                           
   904                           ;main.c: 230: ledFlash(&ledRx);
   905                           
   906                           ;main.c: 228: continue;
   907  00019C  0E31               	movlw	low _ledRx
   908  00019E  0100               	movlb	0	; () banked
   909  0001A0  6F60               	movwf	ledFlash@led& (0+255),b
   910  0001A2  0E00               	movlw	high _ledRx
   911  0001A4  0100               	movlb	0	; () banked
   912  0001A6  6F61               	movwf	(ledFlash@led+1)& (0+255),b
   913  0001A8  ECC9  F00A         	call	_ledFlash	;wreg free
   914                           
   915                           ;main.c: 232: if (b & 128)
   916  0001AC  0100               	movlb	0	; () banked
   917  0001AE  AF97               	btfss	main@b& (0+255),7,b
   918  0001B0  D009               	goto	l4078
   919                           
   920                           ; BSR set to: 0
   921                           ;main.c: 233: {
   922                           ;main.c: 235: packetCtrl=b;
   923  0001B2  C097  F09A         	movff	main@b,_packetCtrl
   924                           
   925                           ; BSR set to: 0
   926                           ;main.c: 236: mode=(3);
   927  0001B6  0E03               	movlw	3
   928  0001B8                     L1:
   929  0001B8  0100               	movlb	0	; () banked
   930  0001BA  6F9D               	movwf	_mode& (0+255),b
   931  0001BC  D7A3               	goto	l4040
   932  0001BE                     l4076:
   933                           
   934                           ; BSR set to: 0
   935                           ;main.c: 238: packetRecvLen=-1;
   936  0001BE  0100               	movlb	0	; () banked
   937  0001C0  6998               	setf	_packetRecvLen& (0+255),b
   938                           
   939                           ;main.c: 239: continue;
   940  0001C2  D7A3               	goto	l4044
   941  0001C4                     l4078:
   942                           
   943                           ; BSR set to: 0
   944                           ;main.c: 240: }
   945                           ;main.c: 242: if (mode==(3))
   946  0001C4  0E03               	movlw	3
   947  0001C6  0100               	movlb	0	; () banked
   948  0001C8  199D               	xorwf	_mode& (0+255),w,b
   949  0001CA  A4D8               	btfss	status,2,c
   950  0001CC  D003               	goto	l4082
   951                           
   952                           ; BSR set to: 0
   953                           ;main.c: 243: {
   954                           ;main.c: 244: packetAddress=b;
   955  0001CE  C097  F099         	movff	main@b,_packetAddress
   956                           
   957                           ;main.c: 246: continue;
   958  0001D2  D79B               	goto	l4044
   959  0001D4                     l4082:
   960                           
   961                           ; BSR set to: 0
   962                           ;main.c: 247: }
   963                           ;main.c: 248: if (mode==(4))
   964  0001D4  0E04               	movlw	4
   965  0001D6  0100               	movlb	0	; () banked
   966  0001D8  199D               	xorwf	_mode& (0+255),w,b
   967  0001DA  A4D8               	btfss	status,2,c
   968  0001DC  D004               	goto	l4088
   969                           
   970                           ; BSR set to: 0
   971                           ;main.c: 249: {
   972                           ;main.c: 250: packetRecvLen=b;
   973  0001DE  C097  F098         	movff	main@b,_packetRecvLen
   974                           
   975                           ; BSR set to: 0
   976                           ;main.c: 251: mode=(5);
   977  0001E2  0E05               	movlw	5
   978  0001E4  D10E               	goto	L6
   979  0001E6                     l4088:
   980                           
   981                           ; BSR set to: 0
   982                           ;main.c: 253: }
   983                           ;main.c: 254: if (mode==(5))
   984  0001E6  0E05               	movlw	5
   985  0001E8  0100               	movlb	0	; () banked
   986  0001EA  199D               	xorwf	_mode& (0+255),w,b
   987  0001EC  A4D8               	btfss	status,2,c
   988  0001EE  D0A1               	goto	l4122
   989                           
   990                           ; BSR set to: 0
   991                           ;main.c: 255: {
   992                           ;main.c: 256: if (packetCtrl==(0x82))
   993  0001F0  0E82               	movlw	130
   994  0001F2  0100               	movlb	0	; () banked
   995  0001F4  199A               	xorwf	_packetCtrl& (0+255),w,b
   996  0001F6  A4D8               	btfss	status,2,c
   997  0001F8  D02D               	goto	l4104
   998                           
   999                           ; BSR set to: 0
  1000                           ;main.c: 257: {
  1001                           ;main.c: 258: adr=packetAddress+1;
  1002  0001FA  0100               	movlb	0	; () banked
  1003  0001FC  2999               	incf	_packetAddress& (0+255),w,b
  1004  0001FE  0100               	movlb	0	; () banked
  1005  000200  6FB7               	movwf	_adr& (0+255),b
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;main.c: 259: uartSendByte(&uart,packetCtrl);
  1009  000202  0E9E               	movlw	low _uart
  1010  000204  0100               	movlb	0	; () banked
  1011  000206  6F66               	movwf	uartSendByte@uart& (0+255),b
  1012  000208  0E00               	movlw	high _uart
  1013  00020A  0100               	movlb	0	; () banked
  1014  00020C  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1015  00020E  C09A  F068         	movff	_packetCtrl,uartSendByte@snd
  1016  000212  EC5E  F00A         	call	_uartSendByte	;wreg free
  1017                           
  1018                           ;main.c: 260: uartSendByte(&uart,adr);
  1019  000216  0E9E               	movlw	low _uart
  1020  000218  0100               	movlb	0	; () banked
  1021  00021A  6F66               	movwf	uartSendByte@uart& (0+255),b
  1022  00021C  0E00               	movlw	high _uart
  1023  00021E  0100               	movlb	0	; () banked
  1024  000220  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1025  000222  C0B7  F068         	movff	_adr,uartSendByte@snd
  1026  000226  EC5E  F00A         	call	_uartSendByte	;wreg free
  1027                           
  1028                           ;main.c: 261: uartSendByte(&uart,nullByte);
  1029  00022A  0E9E               	movlw	low _uart
  1030  00022C  0100               	movlb	0	; () banked
  1031  00022E  6F66               	movwf	uartSendByte@uart& (0+255),b
  1032  000230  0E00               	movlw	high _uart
  1033  000232  0100               	movlb	0	; () banked
  1034  000234  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1035  000236  C096  F068         	movff	main@nullByte,uartSendByte@snd
  1036  00023A  EC5E  F00A         	call	_uartSendByte	;wreg free
  1037                           
  1038                           ;main.c: 262: uartSendByte(&uart,nullByte);
  1039  00023E  0E9E               	movlw	low _uart
  1040  000240  0100               	movlb	0	; () banked
  1041  000242  6F66               	movwf	uartSendByte@uart& (0+255),b
  1042  000244  0E00               	movlw	high _uart
  1043  000246  0100               	movlb	0	; () banked
  1044  000248  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1045  00024A  C096  F068         	movff	main@nullByte,uartSendByte@snd
  1046  00024E  EC5E  F00A         	call	_uartSendByte	;wreg free
  1047  000252  D0D6               	goto	l4148
  1048  000254                     l4104:
  1049                           
  1050                           ; BSR set to: 0
  1051                           ;main.c: 265: }
  1052                           ;main.c: 267: if (adr!=packetAddress)
  1053  000254  0100               	movlb	0	; () banked
  1054  000256  5199               	movf	_packetAddress& (0+255),w,b
  1055  000258  0100               	movlb	0	; () banked
  1056  00025A  19B7               	xorwf	_adr& (0+255),w,b
  1057  00025C  B4D8               	btfsc	status,2,c
  1058  00025E  D02A               	goto	l4110
  1059                           
  1060                           ; BSR set to: 0
  1061                           ;main.c: 268: {
  1062                           ;main.c: 269: uartSendByte(&uart,packetCtrl);
  1063  000260  0E9E               	movlw	low _uart
  1064  000262  0100               	movlb	0	; () banked
  1065  000264  6F66               	movwf	uartSendByte@uart& (0+255),b
  1066  000266  0E00               	movlw	high _uart
  1067  000268  0100               	movlb	0	; () banked
  1068  00026A  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1069  00026C  C09A  F068         	movff	_packetCtrl,uartSendByte@snd
  1070  000270  EC5E  F00A         	call	_uartSendByte	;wreg free
  1071                           
  1072                           ;main.c: 270: uartSendByte(&uart,packetAddress);
  1073  000274  0E9E               	movlw	low _uart
  1074  000276  0100               	movlb	0	; () banked
  1075  000278  6F66               	movwf	uartSendByte@uart& (0+255),b
  1076  00027A  0E00               	movlw	high _uart
  1077  00027C  0100               	movlb	0	; () banked
  1078  00027E  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1079  000280  C099  F068         	movff	_packetAddress,uartSendByte@snd
  1080  000284  EC5E  F00A         	call	_uartSendByte	;wreg free
  1081                           
  1082                           ;main.c: 271: uartSendByte(&uart,packetRecvLen);
  1083  000288  0E9E               	movlw	low _uart
  1084  00028A  0100               	movlb	0	; () banked
  1085  00028C  6F66               	movwf	uartSendByte@uart& (0+255),b
  1086  00028E  0E00               	movlw	high _uart
  1087  000290  0100               	movlb	0	; () banked
  1088  000292  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1089  000294  C098  F068         	movff	_packetRecvLen,uartSendByte@snd
  1090  000298  EC5E  F00A         	call	_uartSendByte	;wreg free
  1091                           
  1092                           ;main.c: 272: uartSendByte(&uart,b);
  1093  00029C  0E9E               	movlw	low _uart
  1094  00029E  0100               	movlb	0	; () banked
  1095  0002A0  6F66               	movwf	uartSendByte@uart& (0+255),b
  1096  0002A2  0E00               	movlw	high _uart
  1097  0002A4  0100               	movlb	0	; () banked
  1098  0002A6  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1099  0002A8  C097  F068         	movff	main@b,uartSendByte@snd
  1100  0002AC  EC5E  F00A         	call	_uartSendByte	;wreg free
  1101                           
  1102                           ;main.c: 273: mode=(6);
  1103  0002B0  0E06               	movlw	6
  1104  0002B2  D0A7               	goto	L6
  1105  0002B4                     l4110:
  1106                           
  1107                           ; BSR set to: 0
  1108                           ;main.c: 275: }
  1109                           ;main.c: 277: if (packetCtrl==(0x83))
  1110  0002B4  0E83               	movlw	131
  1111  0002B6  0100               	movlb	0	; () banked
  1112  0002B8  199A               	xorwf	_packetCtrl& (0+255),w,b
  1113  0002BA  A4D8               	btfss	status,2,c
  1114  0002BC  D029               	goto	l4116
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;main.c: 278: {
  1118                           ;main.c: 279: uartSendByte(&uart,packetCtrl);
  1119  0002BE  0E9E               	movlw	low _uart
  1120  0002C0  0100               	movlb	0	; () banked
  1121  0002C2  6F66               	movwf	uartSendByte@uart& (0+255),b
  1122  0002C4  0E00               	movlw	high _uart
  1123  0002C6  0100               	movlb	0	; () banked
  1124  0002C8  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1125  0002CA  C09A  F068         	movff	_packetCtrl,uartSendByte@snd
  1126  0002CE  EC5E  F00A         	call	_uartSendByte	;wreg free
  1127                           
  1128                           ;main.c: 280: uartSendByte(&uart,adr);
  1129  0002D2  0E9E               	movlw	low _uart
  1130  0002D4  0100               	movlb	0	; () banked
  1131  0002D6  6F66               	movwf	uartSendByte@uart& (0+255),b
  1132  0002D8  0E00               	movlw	high _uart
  1133  0002DA  0100               	movlb	0	; () banked
  1134  0002DC  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1135  0002DE  C0B7  F068         	movff	_adr,uartSendByte@snd
  1136  0002E2  EC5E  F00A         	call	_uartSendByte	;wreg free
  1137                           
  1138                           ;main.c: 281: uartSendByte(&uart,nullByte);
  1139  0002E6  0E9E               	movlw	low _uart
  1140  0002E8  0100               	movlb	0	; () banked
  1141  0002EA  6F66               	movwf	uartSendByte@uart& (0+255),b
  1142  0002EC  0E00               	movlw	high _uart
  1143  0002EE  0100               	movlb	0	; () banked
  1144  0002F0  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1145  0002F2  C096  F068         	movff	main@nullByte,uartSendByte@snd
  1146  0002F6  EC5E  F00A         	call	_uartSendByte	;wreg free
  1147                           
  1148                           ;main.c: 282: uartSendByte(&uart,nullByte);
  1149  0002FA  0E9E               	movlw	low _uart
  1150  0002FC  0100               	movlb	0	; () banked
  1151  0002FE  6F66               	movwf	uartSendByte@uart& (0+255),b
  1152  000300  0E00               	movlw	high _uart
  1153  000302  0100               	movlb	0	; () banked
  1154  000304  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1155  000306  C096  F068         	movff	main@nullByte,uartSendByte@snd
  1156  00030A  EC5E  F00A         	call	_uartSendByte	;wreg free
  1157  00030E  D078               	goto	l4148
  1158  000310                     l4116:
  1159                           
  1160                           ; BSR set to: 0
  1161                           ;main.c: 285: }
  1162                           ;main.c: 286: if (packetCtrl==(0x80) || packetCtrl==(0x81))
  1163  000310  0E80               	movlw	128
  1164  000312  0100               	movlb	0	; () banked
  1165  000314  199A               	xorwf	_packetCtrl& (0+255),w,b
  1166  000316  B4D8               	btfsc	status,2,c
  1167  000318  D005               	goto	l4120
  1168                           
  1169                           ; BSR set to: 0
  1170  00031A  0E81               	movlw	129
  1171  00031C  0100               	movlb	0	; () banked
  1172  00031E  199A               	xorwf	_packetCtrl& (0+255),w,b
  1173  000320  A4D8               	btfss	status,2,c
  1174  000322  D007               	goto	l4122
  1175  000324                     l4120:
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;main.c: 287: {
  1179                           ;main.c: 288: mode=(7);
  1180  000324  0E07               	movlw	7
  1181  000326  0100               	movlb	0	; () banked
  1182  000328  6F9D               	movwf	_mode& (0+255),b
  1183                           
  1184                           ;main.c: 289: pckRecvPtr=0;
  1185  00032A  0E00               	movlw	0
  1186  00032C  0100               	movlb	0	; () banked
  1187  00032E  6F95               	movwf	main@pckRecvPtr& (0+255),b
  1188                           
  1189                           ;main.c: 290: continue;
  1190  000330  D6EC               	goto	l4044
  1191  000332                     l4122:
  1192                           
  1193                           ; BSR set to: 0
  1194                           ;main.c: 291: }
  1195                           ;main.c: 292: }
  1196                           ;main.c: 294: if (mode==(6))
  1197  000332  0E06               	movlw	6
  1198  000334  0100               	movlb	0	; () banked
  1199  000336  199D               	xorwf	_mode& (0+255),w,b
  1200  000338  A4D8               	btfss	status,2,c
  1201  00033A  D00A               	goto	l4126
  1202                           
  1203                           ; BSR set to: 0
  1204                           ;main.c: 295: {
  1205                           ;main.c: 296: uartSendByte(&uart,b);
  1206  00033C  0E9E               	movlw	low _uart
  1207  00033E  0100               	movlb	0	; () banked
  1208  000340  6F66               	movwf	uartSendByte@uart& (0+255),b
  1209  000342  0E00               	movlw	high _uart
  1210  000344  0100               	movlb	0	; () banked
  1211  000346  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1212  000348  C097  F068         	movff	main@b,uartSendByte@snd
  1213  00034C  EC5E  F00A         	call	_uartSendByte	;wreg free
  1214  000350                     l4126:
  1215                           
  1216                           ;main.c: 297: }
  1217                           ;main.c: 298: if (mode==(7))
  1218  000350  0E07               	movlw	7
  1219  000352  0100               	movlb	0	; () banked
  1220  000354  199D               	xorwf	_mode& (0+255),w,b
  1221  000356  A4D8               	btfss	status,2,c
  1222  000358  D015               	goto	l4136
  1223                           
  1224                           ; BSR set to: 0
  1225                           ;main.c: 299: {
  1226                           ;main.c: 300: packetRecvBuffer[pckRecvPtr++]=b;
  1227  00035A  0100               	movlb	0	; () banked
  1228  00035C  5195               	movf	main@pckRecvPtr& (0+255),w,b
  1229  00035E  0D01               	mullw	1
  1230  000360  0E6A               	movlw	low _packetRecvBuffer
  1231  000362  24F3               	addwf	prodl,w,c
  1232  000364  6ED9               	movwf	fsr2l,c
  1233  000366  0E01               	movlw	high _packetRecvBuffer
  1234  000368  20F4               	addwfc	prodh,w,c
  1235  00036A  6EDA               	movwf	fsr2h,c
  1236  00036C  C097  FFDF         	movff	main@b,indf2
  1237                           
  1238                           ; BSR set to: 0
  1239  000370  0100               	movlb	0	; () banked
  1240  000372  2B95               	incf	main@pckRecvPtr& (0+255),f,b
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;main.c: 301: if (pckRecvPtr==packetRecvLen)
  1244  000374  0100               	movlb	0	; () banked
  1245  000376  5198               	movf	_packetRecvLen& (0+255),w,b
  1246  000378  0100               	movlb	0	; () banked
  1247  00037A  1995               	xorwf	main@pckRecvPtr& (0+255),w,b
  1248  00037C  A4D8               	btfss	status,2,c
  1249  00037E  D6C5               	goto	l4044
  1250                           
  1251                           ; BSR set to: 0
  1252                           ;main.c: 302: mode=(8);
  1253  000380  0E08               	movlw	8
  1254  000382  D03F               	goto	L6
  1255  000384                     l4136:
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;main.c: 304: }
  1259                           ;main.c: 305: if (mode==(8))
  1260  000384  0E08               	movlw	8
  1261  000386  0100               	movlb	0	; () banked
  1262  000388  199D               	xorwf	_mode& (0+255),w,b
  1263  00038A  A4D8               	btfss	status,2,c
  1264  00038C  D03D               	goto	l4150
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;main.c: 306: {
  1268                           ;main.c: 307: if(crcOk(b))
  1269  00038E  0100               	movlb	0	; () banked
  1270  000390  5197               	movf	main@b& (0+255),w,b
  1271  000392  ECF2  F00A         	call	_crcOk
  1272  000396  0900               	iorlw	0
  1273  000398  B4D8               	btfsc	status,2,c
  1274  00039A  D032               	goto	l4148
  1275                           
  1276                           ;main.c: 308: {
  1277                           ;main.c: 309: if (packetCtrl==(0x81))
  1278  00039C  0E81               	movlw	129
  1279  00039E  0100               	movlb	0	; () banked
  1280  0003A0  199A               	xorwf	_packetCtrl& (0+255),w,b
  1281  0003A2  A4D8               	btfss	status,2,c
  1282  0003A4  D028               	goto	l4144
  1283                           
  1284                           ; BSR set to: 0
  1285                           ;main.c: 310: {
  1286                           ;main.c: 311: uartSendByte(&uart,packetCtrl);
  1287  0003A6  0E9E               	movlw	low _uart
  1288  0003A8  0100               	movlb	0	; () banked
  1289  0003AA  6F66               	movwf	uartSendByte@uart& (0+255),b
  1290  0003AC  0E00               	movlw	high _uart
  1291  0003AE  0100               	movlb	0	; () banked
  1292  0003B0  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1293  0003B2  C09A  F068         	movff	_packetCtrl,uartSendByte@snd
  1294  0003B6  EC5E  F00A         	call	_uartSendByte	;wreg free
  1295                           
  1296                           ;main.c: 312: uartSendByte(&uart,adr);
  1297  0003BA  0E9E               	movlw	low _uart
  1298  0003BC  0100               	movlb	0	; () banked
  1299  0003BE  6F66               	movwf	uartSendByte@uart& (0+255),b
  1300  0003C0  0E00               	movlw	high _uart
  1301  0003C2  0100               	movlb	0	; () banked
  1302  0003C4  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1303  0003C6  C0B7  F068         	movff	_adr,uartSendByte@snd
  1304  0003CA  EC5E  F00A         	call	_uartSendByte	;wreg free
  1305                           
  1306                           ;main.c: 313: uartSendByte(&uart,nullByte);
  1307  0003CE  0E9E               	movlw	low _uart
  1308  0003D0  0100               	movlb	0	; () banked
  1309  0003D2  6F66               	movwf	uartSendByte@uart& (0+255),b
  1310  0003D4  0E00               	movlw	high _uart
  1311  0003D6  0100               	movlb	0	; () banked
  1312  0003D8  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1313  0003DA  C096  F068         	movff	main@nullByte,uartSendByte@snd
  1314  0003DE  EC5E  F00A         	call	_uartSendByte	;wreg free
  1315                           
  1316                           ;main.c: 314: uartSendByte(&uart,nullByte);
  1317  0003E2  0E9E               	movlw	low _uart
  1318  0003E4  0100               	movlb	0	; () banked
  1319  0003E6  6F66               	movwf	uartSendByte@uart& (0+255),b
  1320  0003E8  0E00               	movlw	high _uart
  1321  0003EA  0100               	movlb	0	; () banked
  1322  0003EC  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1323  0003EE  C096  F068         	movff	main@nullByte,uartSendByte@snd
  1324  0003F2  EC5E  F00A         	call	_uartSendByte	;wreg free
  1325  0003F6                     l4144:
  1326                           
  1327                           ;main.c: 315: }
  1328                           ;main.c: 316: decodeRecvBuffer();
  1329  0003F6  ECF4  F00A         	call	_decodeRecvBuffer	;wreg free
  1330                           
  1331                           ;main.c: 317: dataAvailable=1;
  1332  0003FA  0E01               	movlw	1
  1333  0003FC  0100               	movlb	0	; () banked
  1334  0003FE  6F9B               	movwf	_dataAvailable& (0+255),b
  1335  000400                     l4148:
  1336                           
  1337                           ;main.c: 318: }
  1338                           ;main.c: 319: mode=(2);
  1339  000400  0E02               	movlw	2
  1340  000402                     L6:
  1341  000402  0100               	movlb	0	; () banked
  1342  000404  6F9D               	movwf	_mode& (0+255),b
  1343                           
  1344                           ;main.c: 320: continue;
  1345  000406  D681               	goto	l4044
  1346  000408                     l4150:
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;main.c: 321: }
  1350                           ;main.c: 323: ledTact(&ledRx);
  1351  000408  0E31               	movlw	low _ledRx
  1352  00040A  0100               	movlb	0	; () banked
  1353  00040C  6F60               	movwf	ledTact@led& (0+255),b
  1354  00040E  0E00               	movlw	high _ledRx
  1355  000410  0100               	movlb	0	; () banked
  1356  000412  6F61               	movwf	(ledTact@led+1)& (0+255),b
  1357  000414  ECF1  F004         	call	_ledTact	;wreg free
  1358                           
  1359                           ;main.c: 324: ledTact(&ledTx);
  1360  000418  0E28               	movlw	low _ledTx
  1361  00041A  0100               	movlb	0	; () banked
  1362  00041C  6F60               	movwf	ledTact@led& (0+255),b
  1363  00041E  0E00               	movlw	high _ledTx
  1364  000420  0100               	movlb	0	; () banked
  1365  000422  6F61               	movwf	(ledTact@led+1)& (0+255),b
  1366  000424  ECF1  F004         	call	_ledTact	;wreg free
  1367  000428  D670               	goto	l4044
  1368  00042A                     __end_of_main:
  1369                           	opt stack 0
  1370                           tblptru	equ	0xFF8
  1371                           prodh	equ	0xFF4
  1372                           prodl	equ	0xFF3
  1373                           postinc0	equ	0xFEE
  1374                           wreg	equ	0xFE8
  1375                           indf2	equ	0xFDF
  1376                           fsr2h	equ	0xFDA
  1377                           fsr2l	equ	0xFD9
  1378                           status	equ	0xFD8
  1379                           
  1380 ;; *************** function _uartSendByte *****************
  1381 ;; Defined at:
  1382 ;;		line 160 in file "uart.c"
  1383 ;; Parameters:    Size  Location     Type
  1384 ;;  uart            2    6[BANK0 ] PTR struct .
  1385 ;;		 -> uart(25), 
  1386 ;;  snd             1    8[BANK0 ] unsigned char 
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;  res             1    9[BANK0 ] unsigned char 
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  1    wreg      unsigned char 
  1391 ;; Registers used:
  1392 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1398 ;;      Params:         0       3       0       0       0       0       0
  1399 ;;      Locals:         0       1       0       0       0       0       0
  1400 ;;      Temps:          0       0       0       0       0       0       0
  1401 ;;      Totals:         0       4       0       0       0       0       0
  1402 ;;Total ram usage:        4 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; Hardware stack levels required when called:    4
  1405 ;; This function calls:
  1406 ;;		_fifoPut
  1407 ;;		_uartEnableSend
  1408 ;; This function is called by:
  1409 ;;		_main
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413                           	psect	text1
  1414  0014BC                     __ptext1:
  1415                           	opt stack 0
  1416  0014BC                     _uartSendByte:
  1417                           	opt stack 26
  1418                           
  1419                           ;uart.c: 162: unsigned char res;
  1420                           ;uart.c: 163: uartEnableSend(uart,0);
  1421                           
  1422                           ;incstack = 0
  1423  0014BC  C066  F060         	movff	uartSendByte@uart,uartEnableSend@uart
  1424  0014C0  C067  F061         	movff	uartSendByte@uart+1,uartEnableSend@uart+1
  1425  0014C4  0E00               	movlw	0
  1426  0014C6  0100               	movlb	0	; () banked
  1427  0014C8  6F62               	movwf	uartEnableSend@onoff& (0+255),b
  1428  0014CA  ECD3  F009         	call	_uartEnableSend	;wreg free
  1429                           
  1430                           ;uart.c: 164: res=fifoPut(&uart->sendFifo,snd);
  1431  0014CE  C066  F060         	movff	uartSendByte@uart,fifoPut@fifo
  1432  0014D2  C067  F061         	movff	uartSendByte@uart+1,fifoPut@fifo+1
  1433  0014D6  C068  F062         	movff	uartSendByte@snd,fifoPut@put
  1434  0014DA  EC03  F006         	call	_fifoPut	;wreg free
  1435  0014DE  0100               	movlb	0	; () banked
  1436  0014E0  6F69               	movwf	uartSendByte@res& (0+255),b
  1437                           
  1438                           ; BSR set to: 0
  1439                           ;uart.c: 165: uartEnableSend(uart,1);
  1440  0014E2  C066  F060         	movff	uartSendByte@uart,uartEnableSend@uart
  1441  0014E6  C067  F061         	movff	uartSendByte@uart+1,uartEnableSend@uart+1
  1442  0014EA  0E01               	movlw	1
  1443  0014EC  0100               	movlb	0	; () banked
  1444  0014EE  6F62               	movwf	uartEnableSend@onoff& (0+255),b
  1445  0014F0  ECD3  F009         	call	_uartEnableSend	;wreg free
  1446  0014F4  0012               	return	
  1447  0014F6                     __end_of_uartSendByte:
  1448                           	opt stack 0
  1449                           tblptru	equ	0xFF8
  1450                           prodh	equ	0xFF4
  1451                           prodl	equ	0xFF3
  1452                           postinc0	equ	0xFEE
  1453                           wreg	equ	0xFE8
  1454                           indf2	equ	0xFDF
  1455                           fsr2h	equ	0xFDA
  1456                           fsr2l	equ	0xFD9
  1457                           status	equ	0xFD8
  1458                           
  1459 ;; *************** function _uartSendBuf *****************
  1460 ;; Defined at:
  1461 ;;		line 185 in file "uart.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;  uart            2   11[BANK0 ] PTR struct .
  1464 ;;		 -> uart(25), 
  1465 ;;  str             2   13[BANK0 ] PTR unsigned char 
  1466 ;;		 -> packetRecvBuffer(132), 
  1467 ;;  size            1   15[BANK0 ] unsigned char 
  1468 ;; Auto vars:     Size  Location     Type
  1469 ;;  res             1   16[BANK0 ] unsigned char 
  1470 ;; Return value:  Size  Location     Type
  1471 ;;                  1    wreg      unsigned char 
  1472 ;; Registers used:
  1473 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1474 ;; Tracked objects:
  1475 ;;		On entry : 0/0
  1476 ;;		On exit  : 0/0
  1477 ;;		Unchanged: 0/0
  1478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1479 ;;      Params:         0       5       0       0       0       0       0
  1480 ;;      Locals:         0       1       0       0       0       0       0
  1481 ;;      Temps:          0       0       0       0       0       0       0
  1482 ;;      Totals:         0       6       0       0       0       0       0
  1483 ;;Total ram usage:        6 bytes
  1484 ;; Hardware stack levels used:    1
  1485 ;; Hardware stack levels required when called:    5
  1486 ;; This function calls:
  1487 ;;		_fifoPutBuf
  1488 ;;		_uartEnableSend
  1489 ;; This function is called by:
  1490 ;;		_main
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text2
  1495  00143C                     __ptext2:
  1496                           	opt stack 0
  1497  00143C                     _uartSendBuf:
  1498                           	opt stack 25
  1499                           
  1500                           ;uart.c: 187: unsigned char res;
  1501                           ;uart.c: 188: uartEnableSend(uart,0);
  1502                           
  1503                           ;incstack = 0
  1504  00143C  C06B  F060         	movff	uartSendBuf@uart,uartEnableSend@uart
  1505  001440  C06C  F061         	movff	uartSendBuf@uart+1,uartEnableSend@uart+1
  1506  001444  0E00               	movlw	0
  1507  001446  0100               	movlb	0	; () banked
  1508  001448  6F62               	movwf	uartEnableSend@onoff& (0+255),b
  1509  00144A  ECD3  F009         	call	_uartEnableSend	;wreg free
  1510                           
  1511                           ;uart.c: 189: res=fifoPutBuf(&uart->sendFifo,str,size);
  1512  00144E  C06B  F066         	movff	uartSendBuf@uart,fifoPutBuf@fifo
  1513  001452  C06C  F067         	movff	uartSendBuf@uart+1,fifoPutBuf@fifo+1
  1514  001456  C06D  F068         	movff	uartSendBuf@str,fifoPutBuf@buf
  1515  00145A  C06E  F069         	movff	uartSendBuf@str+1,fifoPutBuf@buf+1
  1516  00145E  C06F  F06A         	movff	uartSendBuf@size,fifoPutBuf@size
  1517  001462  EC3F  F00A         	call	_fifoPutBuf	;wreg free
  1518  001466  0100               	movlb	0	; () banked
  1519  001468  6F70               	movwf	uartSendBuf@res& (0+255),b
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;uart.c: 190: uartEnableSend(uart,1);
  1523  00146A  C06B  F060         	movff	uartSendBuf@uart,uartEnableSend@uart
  1524  00146E  C06C  F061         	movff	uartSendBuf@uart+1,uartEnableSend@uart+1
  1525  001472  0E01               	movlw	1
  1526  001474  0100               	movlb	0	; () banked
  1527  001476  6F62               	movwf	uartEnableSend@onoff& (0+255),b
  1528  001478  ECD3  F009         	call	_uartEnableSend	;wreg free
  1529  00147C  0012               	return	
  1530  00147E                     __end_of_uartSendBuf:
  1531                           	opt stack 0
  1532                           tblptru	equ	0xFF8
  1533                           prodh	equ	0xFF4
  1534                           prodl	equ	0xFF3
  1535                           postinc0	equ	0xFEE
  1536                           wreg	equ	0xFE8
  1537                           indf2	equ	0xFDF
  1538                           fsr2h	equ	0xFDA
  1539                           fsr2l	equ	0xFD9
  1540                           status	equ	0xFD8
  1541                           
  1542 ;; *************** function _fifoPutBuf *****************
  1543 ;; Defined at:
  1544 ;;		line 60 in file "fifo.c"
  1545 ;; Parameters:    Size  Location     Type
  1546 ;;  fifo            2    6[BANK0 ] PTR struct .
  1547 ;;		 -> uart(25), 
  1548 ;;  buf             2    8[BANK0 ] PTR unsigned char 
  1549 ;;		 -> packetRecvBuffer(132), 
  1550 ;;  size            1   10[BANK0 ] unsigned char 
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;		None
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  1    wreg      unsigned char 
  1555 ;; Registers used:
  1556 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1557 ;; Tracked objects:
  1558 ;;		On entry : 0/0
  1559 ;;		On exit  : 0/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1562 ;;      Params:         0       5       0       0       0       0       0
  1563 ;;      Locals:         0       0       0       0       0       0       0
  1564 ;;      Temps:          0       0       0       0       0       0       0
  1565 ;;      Totals:         0       5       0       0       0       0       0
  1566 ;;Total ram usage:        5 bytes
  1567 ;; Hardware stack levels used:    1
  1568 ;; Hardware stack levels required when called:    4
  1569 ;; This function calls:
  1570 ;;		_fifoPut
  1571 ;; This function is called by:
  1572 ;;		_uartSendBuf
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           	psect	text3
  1577  00147E                     __ptext3:
  1578                           	opt stack 0
  1579  00147E                     _fifoPutBuf:
  1580                           	opt stack 25
  1581                           
  1582                           ;fifo.c: 62: while (size)
  1583                           
  1584                           ;incstack = 0
  1585  00147E  D017               	goto	l3716
  1586  001480                     l3708:
  1587                           
  1588                           ;fifo.c: 63: {
  1589                           ;fifo.c: 64: if (fifoPut(fifo,*buf)==0)
  1590  001480  C066  F060         	movff	fifoPutBuf@fifo,fifoPut@fifo
  1591  001484  C067  F061         	movff	fifoPutBuf@fifo+1,fifoPut@fifo+1
  1592  001488  C068  FFD9         	movff	fifoPutBuf@buf,fsr2l
  1593  00148C  C069  FFDA         	movff	fifoPutBuf@buf+1,fsr2h
  1594  001490  50DF               	movf	indf2,w,c
  1595  001492  0100               	movlb	0	; () banked
  1596  001494  6F62               	movwf	fifoPut@put& (0+255),b
  1597  001496  EC03  F006         	call	_fifoPut	;wreg free
  1598  00149A  0900               	iorlw	0
  1599  00149C  A4D8               	btfss	status,2,c
  1600  00149E  D002               	goto	l3714
  1601                           
  1602                           ;fifo.c: 65: {
  1603                           ;fifo.c: 66: return 0;
  1604  0014A0  0E00               	movlw	0
  1605  0014A2  0012               	return	
  1606  0014A4                     l3714:
  1607                           
  1608                           ;fifo.c: 67: }
  1609                           ;fifo.c: 68: buf++;
  1610  0014A4  0100               	movlb	0	; () banked
  1611  0014A6  4B68               	infsnz	fifoPutBuf@buf& (0+255),f,b
  1612  0014A8  2B69               	incf	(fifoPutBuf@buf+1)& (0+255),f,b
  1613                           
  1614                           ;fifo.c: 69: size--;
  1615  0014AA  0100               	movlb	0	; () banked
  1616  0014AC  076A               	decf	fifoPutBuf@size& (0+255),f,b
  1617  0014AE                     l3716:
  1618  0014AE  0100               	movlb	0	; () banked
  1619  0014B0  516A               	movf	fifoPutBuf@size& (0+255),w,b
  1620  0014B2  0100               	movlb	0	; () banked
  1621  0014B4  A4D8               	btfss	status,2,c
  1622  0014B6  D7E4               	goto	l3708
  1623                           
  1624                           ; BSR set to: 0
  1625                           ;fifo.c: 70: }
  1626                           ;fifo.c: 71: return 0;
  1627                           
  1628                           ; BSR set to: 0
  1629  0014B8  0E00               	movlw	0
  1630  0014BA  0012               	return	
  1631  0014BC                     __end_of_fifoPutBuf:
  1632                           	opt stack 0
  1633                           tblptru	equ	0xFF8
  1634                           prodh	equ	0xFF4
  1635                           prodl	equ	0xFF3
  1636                           postinc0	equ	0xFEE
  1637                           wreg	equ	0xFE8
  1638                           indf2	equ	0xFDF
  1639                           fsr2h	equ	0xFDA
  1640                           fsr2l	equ	0xFD9
  1641                           status	equ	0xFD8
  1642                           
  1643 ;; *************** function _fifoPut *****************
  1644 ;; Defined at:
  1645 ;;		line 12 in file "fifo.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;  fifo            2    0[BANK0 ] PTR struct .
  1648 ;;		 -> uart(25), 
  1649 ;;  put             1    2[BANK0 ] unsigned char 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;		None
  1652 ;; Return value:  Size  Location     Type
  1653 ;;                  1    wreg      unsigned char 
  1654 ;; Registers used:
  1655 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1656 ;; Tracked objects:
  1657 ;;		On entry : 0/0
  1658 ;;		On exit  : 0/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1661 ;;      Params:         0       3       0       0       0       0       0
  1662 ;;      Locals:         0       0       0       0       0       0       0
  1663 ;;      Temps:          0       3       0       0       0       0       0
  1664 ;;      Totals:         0       6       0       0       0       0       0
  1665 ;;Total ram usage:        6 bytes
  1666 ;; Hardware stack levels used:    1
  1667 ;; Hardware stack levels required when called:    3
  1668 ;; This function calls:
  1669 ;;		Nothing
  1670 ;; This function is called by:
  1671 ;;		_fifoPutBuf
  1672 ;;		_uartSendByte
  1673 ;;		_fifoPutStr
  1674 ;;		_fifoPutStr0
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text4
  1679  000C06                     __ptext4:
  1680                           	opt stack 0
  1681  000C06                     _fifoPut:
  1682                           	opt stack 26
  1683                           
  1684                           ;fifo.c: 14: if ((fifo->status & 1)==1)
  1685                           
  1686                           ;incstack = 0
  1687  000C06  0100               	movlb	0	; () banked
  1688  000C08  EE20 F003          	lfsr	2,3
  1689  000C0C  5160               	movf	fifoPut@fifo& (0+255),w,b
  1690  000C0E  26D9               	addwf	fsr2l,f,c
  1691  000C10  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1692  000C12  22DA               	addwfc	fsr2h,f,c
  1693  000C14  0100               	movlb	0	; () banked
  1694  000C16  A0DF               	btfss	indf2,0,c
  1695  000C18  D002               	goto	l3668
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;fifo.c: 15: {
  1699                           ;fifo.c: 16: return 0;
  1700  000C1A  0E00               	movlw	0
  1701                           
  1702                           ; BSR set to: 0
  1703  000C1C  0012               	return	
  1704  000C1E                     l3668:
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;fifo.c: 17: }
  1708                           ;fifo.c: 19: fifo->buf[fifo->putPtr]=put;
  1709  000C1E  0100               	movlb	0	; () banked
  1710  000C20  EE20 F004          	lfsr	2,4
  1711  000C24  5160               	movf	fifoPut@fifo& (0+255),w,b
  1712  000C26  26D9               	addwf	fsr2l,f,c
  1713  000C28  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1714  000C2A  22DA               	addwfc	fsr2h,f,c
  1715  000C2C  50DF               	movf	indf2,w,c
  1716  000C2E  0100               	movlb	0	; () banked
  1717  000C30  6F63               	movwf	??_fifoPut& (0+255),b
  1718  000C32  0100               	movlb	0	; () banked
  1719  000C34  5163               	movf	??_fifoPut& (0+255),w,b
  1720  000C36  0D01               	mullw	1
  1721  000C38  C060  FFD9         	movff	fifoPut@fifo,fsr2l
  1722  000C3C  C061  FFDA         	movff	fifoPut@fifo+1,fsr2h
  1723  000C40  CFDE F064          	movff	postinc2,??_fifoPut+1
  1724  000C44  CFDD F065          	movff	postdec2,??_fifoPut+2
  1725  000C48  50F3               	movf	prodl,w,c
  1726  000C4A  0100               	movlb	0	; () banked
  1727  000C4C  2564               	addwf	(??_fifoPut+1)& (0+255),w,b
  1728  000C4E  6ED9               	movwf	fsr2l,c
  1729  000C50  50F4               	movf	prodh,w,c
  1730  000C52  0100               	movlb	0	; () banked
  1731  000C54  2165               	addwfc	(??_fifoPut+2)& (0+255),w,b
  1732  000C56  6EDA               	movwf	fsr2h,c
  1733  000C58  C062  FFDF         	movff	fifoPut@put,indf2
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;fifo.c: 20: fifo->status&=~2;
  1737  000C5C  0100               	movlb	0	; () banked
  1738  000C5E  EE20 F003          	lfsr	2,3
  1739  000C62  5160               	movf	fifoPut@fifo& (0+255),w,b
  1740  000C64  26D9               	addwf	fsr2l,f,c
  1741  000C66  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1742  000C68  22DA               	addwfc	fsr2h,f,c
  1743  000C6A  0EFD               	movlw	253
  1744  000C6C  16DF               	andwf	indf2,f,c
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;fifo.c: 22: fifo->putPtr--;
  1748  000C6E  0100               	movlb	0	; () banked
  1749  000C70  EE20 F004          	lfsr	2,4
  1750  000C74  5160               	movf	fifoPut@fifo& (0+255),w,b
  1751  000C76  26D9               	addwf	fsr2l,f,c
  1752  000C78  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1753  000C7A  22DA               	addwfc	fsr2h,f,c
  1754  000C7C  06DF               	decf	indf2,f,c
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;fifo.c: 23: if (fifo->putPtr > fifo->maxPtr)
  1758  000C7E  0100               	movlb	0	; () banked
  1759  000C80  EE20 F004          	lfsr	2,4
  1760  000C84  5160               	movf	fifoPut@fifo& (0+255),w,b
  1761  000C86  26D9               	addwf	fsr2l,f,c
  1762  000C88  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1763  000C8A  22DA               	addwfc	fsr2h,f,c
  1764  000C8C  0100               	movlb	0	; () banked
  1765  000C8E  EE10 F002          	lfsr	1,2
  1766  000C92  5160               	movf	fifoPut@fifo& (0+255),w,b
  1767  000C94  26E1               	addwf	fsr1l,f,c
  1768  000C96  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1769  000C98  22E2               	addwfc	fsr1h,f,c
  1770  000C9A  50DE               	movf	postinc2,w,c
  1771  000C9C  5CE6               	subwf	postinc1,w,c
  1772  000C9E  B0D8               	btfsc	status,0,c
  1773  000CA0  D010               	goto	l8
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;fifo.c: 24: {
  1777                           ;fifo.c: 25: fifo->putPtr=fifo->maxPtr;
  1778  000CA2  0100               	movlb	0	; () banked
  1779  000CA4  EE20 F002          	lfsr	2,2
  1780  000CA8  5160               	movf	fifoPut@fifo& (0+255),w,b
  1781  000CAA  26D9               	addwf	fsr2l,f,c
  1782  000CAC  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1783  000CAE  22DA               	addwfc	fsr2h,f,c
  1784  000CB0  0100               	movlb	0	; () banked
  1785  000CB2  EE10 F004          	lfsr	1,4
  1786  000CB6  5160               	movf	fifoPut@fifo& (0+255),w,b
  1787  000CB8  26E1               	addwf	fsr1l,f,c
  1788  000CBA  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1789  000CBC  22E2               	addwfc	fsr1h,f,c
  1790  000CBE  CFDF FFE7          	movff	indf2,indf1
  1791  000CC2                     l8:
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;fifo.c: 26: }
  1795                           ;fifo.c: 28: if (fifo->putPtr==fifo->getPtr)
  1796  000CC2  0100               	movlb	0	; () banked
  1797  000CC4  EE20 F005          	lfsr	2,5
  1798  000CC8  5160               	movf	fifoPut@fifo& (0+255),w,b
  1799  000CCA  26D9               	addwf	fsr2l,f,c
  1800  000CCC  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1801  000CCE  22DA               	addwfc	fsr2h,f,c
  1802  000CD0  0100               	movlb	0	; () banked
  1803  000CD2  EE10 F004          	lfsr	1,4
  1804  000CD6  5160               	movf	fifoPut@fifo& (0+255),w,b
  1805  000CD8  26E1               	addwf	fsr1l,f,c
  1806  000CDA  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1807  000CDC  22E2               	addwfc	fsr1h,f,c
  1808  000CDE  50DE               	movf	postinc2,w,c
  1809  000CE0  18E6               	xorwf	postinc1,w,c
  1810  000CE2  A4D8               	btfss	status,2,c
  1811  000CE4  D009               	goto	l3680
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;fifo.c: 29: {
  1815                           ;fifo.c: 30: fifo->status|=1;
  1816  000CE6  0100               	movlb	0	; () banked
  1817  000CE8  EE20 F003          	lfsr	2,3
  1818  000CEC  5160               	movf	fifoPut@fifo& (0+255),w,b
  1819  000CEE  26D9               	addwf	fsr2l,f,c
  1820  000CF0  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1821  000CF2  22DA               	addwfc	fsr2h,f,c
  1822  000CF4  0E00               	movlw	0
  1823  000CF6  80DB               	bsf	plusw2,0,c
  1824  000CF8                     l3680:
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;fifo.c: 31: }
  1828                           ;fifo.c: 32: return 1;
  1829  000CF8  0E01               	movlw	1
  1830  000CFA  0012               	return	
  1831  000CFC                     __end_of_fifoPut:
  1832                           	opt stack 0
  1833                           tblptru	equ	0xFF8
  1834                           prodh	equ	0xFF4
  1835                           prodl	equ	0xFF3
  1836                           postinc0	equ	0xFEE
  1837                           wreg	equ	0xFE8
  1838                           indf1	equ	0xFE7
  1839                           postinc1	equ	0xFE6
  1840                           fsr1h	equ	0xFE2
  1841                           fsr1l	equ	0xFE1
  1842                           indf2	equ	0xFDF
  1843                           postinc2	equ	0xFDE
  1844                           postdec2	equ	0xFDD
  1845                           plusw2	equ	0xFDB
  1846                           fsr2h	equ	0xFDA
  1847                           fsr2l	equ	0xFD9
  1848                           status	equ	0xFD8
  1849                           
  1850 ;; *************** function _uartRecvByte *****************
  1851 ;; Defined at:
  1852 ;;		line 194 in file "uart.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;  uart            2    7[BANK0 ] PTR struct .
  1855 ;;		 -> uart(25), 
  1856 ;;  data            2    9[BANK0 ] PTR unsigned char 
  1857 ;;		 -> RAM(1535), 
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;		None
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      unsigned char 
  1862 ;; Registers used:
  1863 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1869 ;;      Params:         0       4       0       0       0       0       0
  1870 ;;      Locals:         0       0       0       0       0       0       0
  1871 ;;      Temps:          0       0       0       0       0       0       0
  1872 ;;      Totals:         0       4       0       0       0       0       0
  1873 ;;Total ram usage:        4 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    4
  1876 ;; This function calls:
  1877 ;;		_fifoGet
  1878 ;; This function is called by:
  1879 ;;		_main
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           	psect	text5
  1884  0015B6                     __ptext5:
  1885                           	opt stack 0
  1886  0015B6                     _uartRecvByte:
  1887                           	opt stack 26
  1888                           
  1889                           ;uart.c: 196: return fifoGet(&uart->recvFifo,data);
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;incstack = 0
  1893  0015B6  0E06               	movlw	6
  1894  0015B8  0100               	movlb	0	; () banked
  1895  0015BA  2567               	addwf	uartRecvByte@uart& (0+255),w,b
  1896  0015BC  0100               	movlb	0	; () banked
  1897  0015BE  6F60               	movwf	fifoGet@fifo& (0+255),b
  1898  0015C0  0E00               	movlw	0
  1899  0015C2  0100               	movlb	0	; () banked
  1900  0015C4  2168               	addwfc	(uartRecvByte@uart+1)& (0+255),w,b
  1901  0015C6  0100               	movlb	0	; () banked
  1902  0015C8  6F61               	movwf	(fifoGet@fifo+1)& (0+255),b
  1903  0015CA  C069  F062         	movff	uartRecvByte@data,fifoGet@get
  1904  0015CE  C06A  F063         	movff	uartRecvByte@data+1,fifoGet@get+1
  1905  0015D2  EC84  F005         	call	_fifoGet	;wreg free
  1906  0015D6  0012               	return	
  1907  0015D8                     __end_of_uartRecvByte:
  1908                           	opt stack 0
  1909                           tblptru	equ	0xFF8
  1910                           prodh	equ	0xFF4
  1911                           prodl	equ	0xFF3
  1912                           postinc0	equ	0xFEE
  1913                           wreg	equ	0xFE8
  1914                           indf1	equ	0xFE7
  1915                           postinc1	equ	0xFE6
  1916                           fsr1h	equ	0xFE2
  1917                           fsr1l	equ	0xFE1
  1918                           indf2	equ	0xFDF
  1919                           postinc2	equ	0xFDE
  1920                           postdec2	equ	0xFDD
  1921                           plusw2	equ	0xFDB
  1922                           fsr2h	equ	0xFDA
  1923                           fsr2l	equ	0xFD9
  1924                           status	equ	0xFD8
  1925                           
  1926 ;; *************** function _fifoGet *****************
  1927 ;; Defined at:
  1928 ;;		line 74 in file "fifo.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;  fifo            2    0[BANK0 ] PTR struct .
  1931 ;;		 -> uart(25), 
  1932 ;;  get             2    2[BANK0 ] PTR unsigned char 
  1933 ;;		 -> uartTransmitAll@data(1), uartInterruptHandler@data(1), RAM(1535), fifoGetBuf@elem(1), 
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;		None
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  1    wreg      unsigned char 
  1938 ;; Registers used:
  1939 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1945 ;;      Params:         0       4       0       0       0       0       0
  1946 ;;      Locals:         0       0       0       0       0       0       0
  1947 ;;      Temps:          0       3       0       0       0       0       0
  1948 ;;      Totals:         0       7       0       0       0       0       0
  1949 ;;Total ram usage:        7 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    3
  1952 ;; This function calls:
  1953 ;;		Nothing
  1954 ;; This function is called by:
  1955 ;;		_uartRecvByte
  1956 ;;		_fifoGetBuf
  1957 ;;		_uartTransmitAll
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           	psect	text6
  1962  000B08                     __ptext6:
  1963                           	opt stack 0
  1964  000B08                     _fifoGet:
  1965                           	opt stack 26
  1966                           
  1967                           ;fifo.c: 76: if ((fifo->status & 2)==2)
  1968                           
  1969                           ;incstack = 0
  1970  000B08  0100               	movlb	0	; () banked
  1971  000B0A  EE20 F003          	lfsr	2,3
  1972  000B0E  5160               	movf	fifoGet@fifo& (0+255),w,b
  1973  000B10  26D9               	addwf	fsr2l,f,c
  1974  000B12  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  1975  000B14  22DA               	addwfc	fsr2h,f,c
  1976  000B16  0100               	movlb	0	; () banked
  1977  000B18  A2DF               	btfss	indf2,1,c
  1978  000B1A  D002               	goto	l3728
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;fifo.c: 77: {
  1982                           ;fifo.c: 78: return 0;
  1983  000B1C  0E00               	movlw	0
  1984                           
  1985                           ; BSR set to: 0
  1986  000B1E  0012               	return	
  1987  000B20                     l3728:
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;fifo.c: 79: }
  1991                           ;fifo.c: 80: *get=fifo->buf[fifo->getPtr];
  1992  000B20  0100               	movlb	0	; () banked
  1993  000B22  EE20 F005          	lfsr	2,5
  1994  000B26  5160               	movf	fifoGet@fifo& (0+255),w,b
  1995  000B28  26D9               	addwf	fsr2l,f,c
  1996  000B2A  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  1997  000B2C  22DA               	addwfc	fsr2h,f,c
  1998  000B2E  50DF               	movf	indf2,w,c
  1999  000B30  0100               	movlb	0	; () banked
  2000  000B32  6F64               	movwf	??_fifoGet& (0+255),b
  2001  000B34  0100               	movlb	0	; () banked
  2002  000B36  5164               	movf	??_fifoGet& (0+255),w,b
  2003  000B38  0D01               	mullw	1
  2004  000B3A  C060  FFD9         	movff	fifoGet@fifo,fsr2l
  2005  000B3E  C061  FFDA         	movff	fifoGet@fifo+1,fsr2h
  2006  000B42  CFDE F065          	movff	postinc2,??_fifoGet+1
  2007  000B46  CFDD F066          	movff	postdec2,??_fifoGet+2
  2008  000B4A  50F3               	movf	prodl,w,c
  2009  000B4C  0100               	movlb	0	; () banked
  2010  000B4E  2565               	addwf	(??_fifoGet+1)& (0+255),w,b
  2011  000B50  6ED9               	movwf	fsr2l,c
  2012  000B52  50F4               	movf	prodh,w,c
  2013  000B54  0100               	movlb	0	; () banked
  2014  000B56  2166               	addwfc	(??_fifoGet+2)& (0+255),w,b
  2015  000B58  6EDA               	movwf	fsr2h,c
  2016  000B5A  C062  FFE1         	movff	fifoGet@get,fsr1l
  2017  000B5E  C063  FFE2         	movff	fifoGet@get+1,fsr1h
  2018  000B62  CFDF FFE7          	movff	indf2,indf1
  2019                           
  2020                           ; BSR set to: 0
  2021                           ;fifo.c: 81: fifo->status&=~1;
  2022  000B66  0100               	movlb	0	; () banked
  2023  000B68  EE20 F003          	lfsr	2,3
  2024  000B6C  5160               	movf	fifoGet@fifo& (0+255),w,b
  2025  000B6E  26D9               	addwf	fsr2l,f,c
  2026  000B70  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2027  000B72  22DA               	addwfc	fsr2h,f,c
  2028  000B74  0EFE               	movlw	254
  2029  000B76  16DF               	andwf	indf2,f,c
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;fifo.c: 83: fifo->getPtr--;
  2033  000B78  0100               	movlb	0	; () banked
  2034  000B7A  EE20 F005          	lfsr	2,5
  2035  000B7E  5160               	movf	fifoGet@fifo& (0+255),w,b
  2036  000B80  26D9               	addwf	fsr2l,f,c
  2037  000B82  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2038  000B84  22DA               	addwfc	fsr2h,f,c
  2039  000B86  06DF               	decf	indf2,f,c
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;fifo.c: 84: if (fifo->getPtr > fifo->maxPtr)
  2043  000B88  0100               	movlb	0	; () banked
  2044  000B8A  EE20 F005          	lfsr	2,5
  2045  000B8E  5160               	movf	fifoGet@fifo& (0+255),w,b
  2046  000B90  26D9               	addwf	fsr2l,f,c
  2047  000B92  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2048  000B94  22DA               	addwfc	fsr2h,f,c
  2049  000B96  0100               	movlb	0	; () banked
  2050  000B98  EE10 F002          	lfsr	1,2
  2051  000B9C  5160               	movf	fifoGet@fifo& (0+255),w,b
  2052  000B9E  26E1               	addwf	fsr1l,f,c
  2053  000BA0  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2054  000BA2  22E2               	addwfc	fsr1h,f,c
  2055  000BA4  50DE               	movf	postinc2,w,c
  2056  000BA6  5CE6               	subwf	postinc1,w,c
  2057  000BA8  B0D8               	btfsc	status,0,c
  2058  000BAA  D010               	goto	l34
  2059                           
  2060                           ; BSR set to: 0
  2061                           ;fifo.c: 85: {
  2062                           ;fifo.c: 86: fifo->getPtr=fifo->maxPtr;
  2063  000BAC  0100               	movlb	0	; () banked
  2064  000BAE  EE20 F002          	lfsr	2,2
  2065  000BB2  5160               	movf	fifoGet@fifo& (0+255),w,b
  2066  000BB4  26D9               	addwf	fsr2l,f,c
  2067  000BB6  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2068  000BB8  22DA               	addwfc	fsr2h,f,c
  2069  000BBA  0100               	movlb	0	; () banked
  2070  000BBC  EE10 F005          	lfsr	1,5
  2071  000BC0  5160               	movf	fifoGet@fifo& (0+255),w,b
  2072  000BC2  26E1               	addwf	fsr1l,f,c
  2073  000BC4  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2074  000BC6  22E2               	addwfc	fsr1h,f,c
  2075  000BC8  CFDF FFE7          	movff	indf2,indf1
  2076  000BCC                     l34:
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;fifo.c: 87: }
  2080                           ;fifo.c: 89: if (fifo->getPtr==fifo->putPtr)
  2081  000BCC  0100               	movlb	0	; () banked
  2082  000BCE  EE20 F004          	lfsr	2,4
  2083  000BD2  5160               	movf	fifoGet@fifo& (0+255),w,b
  2084  000BD4  26D9               	addwf	fsr2l,f,c
  2085  000BD6  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2086  000BD8  22DA               	addwfc	fsr2h,f,c
  2087  000BDA  0100               	movlb	0	; () banked
  2088  000BDC  EE10 F005          	lfsr	1,5
  2089  000BE0  5160               	movf	fifoGet@fifo& (0+255),w,b
  2090  000BE2  26E1               	addwf	fsr1l,f,c
  2091  000BE4  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2092  000BE6  22E2               	addwfc	fsr1h,f,c
  2093  000BE8  50DE               	movf	postinc2,w,c
  2094  000BEA  18E6               	xorwf	postinc1,w,c
  2095  000BEC  A4D8               	btfss	status,2,c
  2096  000BEE  D009               	goto	l3740
  2097                           
  2098                           ; BSR set to: 0
  2099                           ;fifo.c: 90: {
  2100                           ;fifo.c: 91: fifo->status|=2;
  2101  000BF0  0100               	movlb	0	; () banked
  2102  000BF2  EE20 F003          	lfsr	2,3
  2103  000BF6  5160               	movf	fifoGet@fifo& (0+255),w,b
  2104  000BF8  26D9               	addwf	fsr2l,f,c
  2105  000BFA  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2106  000BFC  22DA               	addwfc	fsr2h,f,c
  2107  000BFE  0E00               	movlw	0
  2108  000C00  82DB               	bsf	plusw2,1,c
  2109  000C02                     l3740:
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;fifo.c: 92: }
  2113                           ;fifo.c: 93: return 1;
  2114  000C02  0E01               	movlw	1
  2115  000C04  0012               	return	
  2116  000C06                     __end_of_fifoGet:
  2117                           	opt stack 0
  2118                           tblptru	equ	0xFF8
  2119                           prodh	equ	0xFF4
  2120                           prodl	equ	0xFF3
  2121                           postinc0	equ	0xFEE
  2122                           wreg	equ	0xFE8
  2123                           indf1	equ	0xFE7
  2124                           postinc1	equ	0xFE6
  2125                           fsr1h	equ	0xFE2
  2126                           fsr1l	equ	0xFE1
  2127                           indf2	equ	0xFDF
  2128                           postinc2	equ	0xFDE
  2129                           postdec2	equ	0xFDD
  2130                           plusw2	equ	0xFDB
  2131                           fsr2h	equ	0xFDA
  2132                           fsr2l	equ	0xFD9
  2133                           status	equ	0xFD8
  2134                           
  2135 ;; *************** function _myDelay *****************
  2136 ;; Defined at:
  2137 ;;		line 158 in file "main.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  per             4    0[BANK0 ] long 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  i               2    4[BANK0 ] int 
  2142 ;; Return value:  Size  Location     Type
  2143 ;;                  1    wreg      void 
  2144 ;; Registers used:
  2145 ;;		wreg, status,2, status,0
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2151 ;;      Params:         0       4       0       0       0       0       0
  2152 ;;      Locals:         0       2       0       0       0       0       0
  2153 ;;      Temps:          0       0       0       0       0       0       0
  2154 ;;      Totals:         0       6       0       0       0       0       0
  2155 ;;Total ram usage:        6 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    3
  2158 ;; This function calls:
  2159 ;;		Nothing
  2160 ;; This function is called by:
  2161 ;;		_main
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text7
  2166  001306                     __ptext7:
  2167                           	opt stack 0
  2168  001306                     _myDelay:
  2169                           	opt stack 27
  2170                           
  2171                           ;main.c: 160: int i;
  2172                           ;main.c: 161: while (per--!=0)
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;incstack = 0
  2176  001306  D010               	goto	l3964
  2177  001308                     l3960:
  2178                           
  2179                           ;main.c: 162: {
  2180                           ;main.c: 163: i=16000000/4000;
  2181  001308  0E0F               	movlw	15
  2182  00130A  0100               	movlb	0	; () banked
  2183  00130C  6F65               	movwf	(myDelay@i+1)& (0+255),b
  2184  00130E  0EA0               	movlw	160
  2185  001310  6F64               	movwf	myDelay@i& (0+255),b
  2186  001312                     l3962:
  2187                           
  2188                           ; BSR set to: 0
  2189  001312  0100               	movlb	0	; () banked
  2190  001314  0764               	decf	myDelay@i& (0+255),f,b
  2191  001316  A0D8               	btfss	status,0,c
  2192  001318  0765               	decf	(myDelay@i+1)& (0+255),f,b
  2193  00131A  0100               	movlb	0	; () banked
  2194  00131C  2964               	incf	myDelay@i& (0+255),w,b
  2195  00131E  E1F9               	bnz	l3962
  2196  001320  0100               	movlb	0	; () banked
  2197  001322  2965               	incf	(myDelay@i+1)& (0+255),w,b
  2198  001324  A4D8               	btfss	status,2,c
  2199  001326  D7F5               	goto	l3962
  2200  001328                     l3964:
  2201  001328  0EFF               	movlw	255
  2202  00132A  0100               	movlb	0	; () banked
  2203  00132C  2760               	addwf	myDelay@per& (0+255),f,b
  2204  00132E  0EFF               	movlw	255
  2205  001330  2361               	addwfc	(myDelay@per+1)& (0+255),f,b
  2206  001332  0EFF               	movlw	255
  2207  001334  2362               	addwfc	(myDelay@per+2)& (0+255),f,b
  2208  001336  0EFF               	movlw	255
  2209  001338  2363               	addwfc	(myDelay@per+3)& (0+255),f,b
  2210  00133A  0100               	movlb	0	; () banked
  2211  00133C  2960               	incf	myDelay@per& (0+255),w,b
  2212  00133E  E1E4               	bnz	l3960
  2213  001340  0100               	movlb	0	; () banked
  2214  001342  2961               	incf	(myDelay@per+1)& (0+255),w,b
  2215  001344  E1E1               	bnz	l3960
  2216  001346  0100               	movlb	0	; () banked
  2217  001348  2962               	incf	(myDelay@per+2)& (0+255),w,b
  2218  00134A  E1DE               	bnz	l3960
  2219  00134C  0100               	movlb	0	; () banked
  2220  00134E  2963               	incf	(myDelay@per+3)& (0+255),w,b
  2221  001350  B4D8               	btfsc	status,2,c
  2222  001352  0012               	return	
  2223  001354  D7D9               	goto	l3960
  2224  001356                     __end_of_myDelay:
  2225                           	opt stack 0
  2226                           tblptru	equ	0xFF8
  2227                           prodh	equ	0xFF4
  2228                           prodl	equ	0xFF3
  2229                           postinc0	equ	0xFEE
  2230                           wreg	equ	0xFE8
  2231                           indf1	equ	0xFE7
  2232                           postinc1	equ	0xFE6
  2233                           fsr1h	equ	0xFE2
  2234                           fsr1l	equ	0xFE1
  2235                           indf2	equ	0xFDF
  2236                           postinc2	equ	0xFDE
  2237                           postdec2	equ	0xFDD
  2238                           plusw2	equ	0xFDB
  2239                           fsr2h	equ	0xFDA
  2240                           fsr2l	equ	0xFD9
  2241                           status	equ	0xFD8
  2242                           
  2243 ;; *************** function _ledTact *****************
  2244 ;; Defined at:
  2245 ;;		line 52 in file "blink.c"
  2246 ;; Parameters:    Size  Location     Type
  2247 ;;  led             2    0[BANK0 ] PTR struct .
  2248 ;;		 -> ledTx(9), ledRx(9), 
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;		None
  2251 ;; Return value:  Size  Location     Type
  2252 ;;                  1    wreg      void 
  2253 ;; Registers used:
  2254 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2260 ;;      Params:         0       2       0       0       0       0       0
  2261 ;;      Locals:         0       0       0       0       0       0       0
  2262 ;;      Temps:          0       2       0       0       0       0       0
  2263 ;;      Totals:         0       4       0       0       0       0       0
  2264 ;;Total ram usage:        4 bytes
  2265 ;; Hardware stack levels used:    1
  2266 ;; Hardware stack levels required when called:    3
  2267 ;; This function calls:
  2268 ;;		Nothing
  2269 ;; This function is called by:
  2270 ;;		_main
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274                           	psect	text8
  2275  0009E2                     __ptext8:
  2276                           	opt stack 0
  2277  0009E2                     _ledTact:
  2278                           	opt stack 27
  2279                           
  2280                           ;blink.c: 54: if (led->count>0) led->count--;
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;incstack = 0
  2284  0009E2  C060  FFD9         	movff	ledTact@led,fsr2l
  2285  0009E6  C061  FFDA         	movff	ledTact@led+1,fsr2h
  2286  0009EA  0E01               	movlw	1
  2287  0009EC  BEDB               	btfsc	plusw2,7,c
  2288  0009EE  D00D               	goto	l434
  2289  0009F0  0E01               	movlw	1
  2290  0009F2  50DB               	movf	plusw2,w,c
  2291  0009F4  E103               	bnz	u1740
  2292  0009F6  04DE               	decf	postinc2,w,c
  2293  0009F8  A0D8               	btfss	status,0,c
  2294  0009FA  D007               	goto	l434
  2295  0009FC                     u1740:
  2296  0009FC  C060  FFD9         	movff	ledTact@led,fsr2l
  2297  000A00  C061  FFDA         	movff	ledTact@led+1,fsr2h
  2298  000A04  06DE               	decf	postinc2,f,c
  2299  000A06  0E00               	movlw	0
  2300  000A08  5ADD               	subwfb	postdec2,f,c
  2301  000A0A                     l434:
  2302                           
  2303                           ;blink.c: 55: if (led->count==0)
  2304  000A0A  C060  FFD9         	movff	ledTact@led,fsr2l
  2305  000A0E  C061  FFDA         	movff	ledTact@led+1,fsr2h
  2306  000A12  50DE               	movf	postinc2,w,c
  2307  000A14  10DE               	iorwf	postinc2,w,c
  2308  000A16  A4D8               	btfss	status,2,c
  2309  000A18  0012               	return	
  2310                           
  2311                           ;blink.c: 56: {
  2312                           ;blink.c: 57: if (led->on)
  2313  000A1A  0100               	movlb	0	; () banked
  2314  000A1C  EE20 F002          	lfsr	2,2
  2315  000A20  5160               	movf	ledTact@led& (0+255),w,b
  2316  000A22  26D9               	addwf	fsr2l,f,c
  2317  000A24  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2318  000A26  22DA               	addwfc	fsr2h,f,c
  2319  000A28  50DF               	movf	indf2,w,c
  2320  000A2A  B4D8               	btfsc	status,2,c
  2321  000A2C  D023               	goto	l4006
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;blink.c: 58: {
  2325                           ;blink.c: 59: LATA&=~led->bitMask;
  2326  000A2E  0100               	movlb	0	; () banked
  2327  000A30  EE20 F007          	lfsr	2,7
  2328  000A34  5160               	movf	ledTact@led& (0+255),w,b
  2329  000A36  26D9               	addwf	fsr2l,f,c
  2330  000A38  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2331  000A3A  22DA               	addwfc	fsr2h,f,c
  2332  000A3C  50DF               	movf	indf2,w,c
  2333  000A3E  0AFF               	xorlw	255
  2334  000A40  1689               	andwf	3977,f,c	;volatile
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;blink.c: 60: led->count=led->offTime;
  2338  000A42  0100               	movlb	0	; () banked
  2339  000A44  EE20 F005          	lfsr	2,5
  2340  000A48  5160               	movf	ledTact@led& (0+255),w,b
  2341  000A4A  26D9               	addwf	fsr2l,f,c
  2342  000A4C  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2343  000A4E  22DA               	addwfc	fsr2h,f,c
  2344  000A50  C060  FFE1         	movff	ledTact@led,fsr1l
  2345  000A54  C061  FFE2         	movff	ledTact@led+1,fsr1h
  2346  000A58  CFDE FFE6          	movff	postinc2,postinc1
  2347  000A5C  CFDD FFE5          	movff	postdec2,postdec1
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;blink.c: 61: led->on=0;
  2351  000A60  0100               	movlb	0	; () banked
  2352  000A62  EE20 F002          	lfsr	2,2
  2353  000A66  5160               	movf	ledTact@led& (0+255),w,b
  2354  000A68  26D9               	addwf	fsr2l,f,c
  2355  000A6A  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2356  000A6C  22DA               	addwfc	fsr2h,f,c
  2357  000A6E  0E00               	movlw	0
  2358  000A70  6EDF               	movwf	indf2,c
  2359                           
  2360                           ;blink.c: 62: }
  2361  000A72  0012               	return	
  2362  000A74                     l4006:
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;blink.c: 63: else
  2366                           ;blink.c: 64: {
  2367                           ;blink.c: 65: if (led->mode==1 || led->mode==2) LATA|=led->bitMask;
  2368  000A74  0100               	movlb	0	; () banked
  2369  000A76  EE20 F008          	lfsr	2,8
  2370  000A7A  5160               	movf	ledTact@led& (0+255),w,b
  2371  000A7C  26D9               	addwf	fsr2l,f,c
  2372  000A7E  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2373  000A80  22DA               	addwfc	fsr2h,f,c
  2374  000A82  04DE               	decf	postinc2,w,c
  2375  000A84  B4D8               	btfsc	status,2,c
  2376  000A86  D00B               	goto	l4010
  2377                           
  2378                           ; BSR set to: 0
  2379  000A88  0100               	movlb	0	; () banked
  2380  000A8A  EE20 F008          	lfsr	2,8
  2381  000A8E  5160               	movf	ledTact@led& (0+255),w,b
  2382  000A90  26D9               	addwf	fsr2l,f,c
  2383  000A92  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2384  000A94  22DA               	addwfc	fsr2h,f,c
  2385  000A96  0E02               	movlw	2
  2386  000A98  18DE               	xorwf	postinc2,w,c
  2387  000A9A  A4D8               	btfss	status,2,c
  2388  000A9C  D009               	goto	l4012
  2389  000A9E                     l4010:
  2390                           
  2391                           ; BSR set to: 0
  2392  000A9E  0100               	movlb	0	; () banked
  2393  000AA0  EE20 F007          	lfsr	2,7
  2394  000AA4  5160               	movf	ledTact@led& (0+255),w,b
  2395  000AA6  26D9               	addwf	fsr2l,f,c
  2396  000AA8  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2397  000AAA  22DA               	addwfc	fsr2h,f,c
  2398  000AAC  50DF               	movf	indf2,w,c
  2399  000AAE  1289               	iorwf	3977,f,c	;volatile
  2400  000AB0                     l4012:
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;blink.c: 66: led->count=led->onTime;
  2404  000AB0  0100               	movlb	0	; () banked
  2405  000AB2  EE20 F003          	lfsr	2,3
  2406  000AB6  5160               	movf	ledTact@led& (0+255),w,b
  2407  000AB8  26D9               	addwf	fsr2l,f,c
  2408  000ABA  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2409  000ABC  22DA               	addwfc	fsr2h,f,c
  2410  000ABE  C060  FFE1         	movff	ledTact@led,fsr1l
  2411  000AC2  C061  FFE2         	movff	ledTact@led+1,fsr1h
  2412  000AC6  CFDE FFE6          	movff	postinc2,postinc1
  2413  000ACA  CFDD FFE5          	movff	postdec2,postdec1
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;blink.c: 67: led->on=1;
  2417  000ACE  0100               	movlb	0	; () banked
  2418  000AD0  EE20 F002          	lfsr	2,2
  2419  000AD4  5160               	movf	ledTact@led& (0+255),w,b
  2420  000AD6  26D9               	addwf	fsr2l,f,c
  2421  000AD8  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2422  000ADA  22DA               	addwfc	fsr2h,f,c
  2423  000ADC  0E01               	movlw	1
  2424  000ADE  6EDF               	movwf	indf2,c
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;blink.c: 68: if (led->mode==1) led->mode=0;
  2428  000AE0  0100               	movlb	0	; () banked
  2429  000AE2  EE20 F008          	lfsr	2,8
  2430  000AE6  5160               	movf	ledTact@led& (0+255),w,b
  2431  000AE8  26D9               	addwf	fsr2l,f,c
  2432  000AEA  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2433  000AEC  22DA               	addwfc	fsr2h,f,c
  2434  000AEE  04DE               	decf	postinc2,w,c
  2435  000AF0  A4D8               	btfss	status,2,c
  2436  000AF2  0012               	return	
  2437                           
  2438                           ; BSR set to: 0
  2439  000AF4  0100               	movlb	0	; () banked
  2440  000AF6  EE20 F008          	lfsr	2,8
  2441  000AFA  5160               	movf	ledTact@led& (0+255),w,b
  2442  000AFC  26D9               	addwf	fsr2l,f,c
  2443  000AFE  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2444  000B00  22DA               	addwfc	fsr2h,f,c
  2445  000B02  0E00               	movlw	0
  2446  000B04  6EDF               	movwf	indf2,c
  2447                           
  2448                           ; BSR set to: 0
  2449                           
  2450                           ; BSR set to: 0
  2451  000B06  0012               	return	
  2452  000B08                     __end_of_ledTact:
  2453                           	opt stack 0
  2454                           tblptru	equ	0xFF8
  2455                           prodh	equ	0xFF4
  2456                           prodl	equ	0xFF3
  2457                           postinc0	equ	0xFEE
  2458                           wreg	equ	0xFE8
  2459                           indf1	equ	0xFE7
  2460                           postinc1	equ	0xFE6
  2461                           postdec1	equ	0xFE5
  2462                           fsr1h	equ	0xFE2
  2463                           fsr1l	equ	0xFE1
  2464                           indf2	equ	0xFDF
  2465                           postinc2	equ	0xFDE
  2466                           postdec2	equ	0xFDD
  2467                           plusw2	equ	0xFDB
  2468                           fsr2h	equ	0xFDA
  2469                           fsr2l	equ	0xFD9
  2470                           status	equ	0xFD8
  2471                           
  2472 ;; *************** function _ledOn *****************
  2473 ;; Defined at:
  2474 ;;		line 21 in file "blink.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;  led             2    0[BANK0 ] PTR struct .
  2477 ;;		 -> ledTx(9), ledRx(9), 
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;		None
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  1    wreg      void 
  2482 ;; Registers used:
  2483 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2489 ;;      Params:         0       2       0       0       0       0       0
  2490 ;;      Locals:         0       0       0       0       0       0       0
  2491 ;;      Temps:          0       0       0       0       0       0       0
  2492 ;;      Totals:         0       2       0       0       0       0       0
  2493 ;;Total ram usage:        2 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; Hardware stack levels required when called:    3
  2496 ;; This function calls:
  2497 ;;		Nothing
  2498 ;; This function is called by:
  2499 ;;		_main
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           	psect	text9
  2504  001530                     __ptext9:
  2505                           	opt stack 0
  2506  001530                     _ledOn:
  2507                           	opt stack 27
  2508                           
  2509                           ;blink.c: 23: LATA|=led->bitMask;
  2510                           
  2511                           ;incstack = 0
  2512  001530  0100               	movlb	0	; () banked
  2513  001532  EE20 F007          	lfsr	2,7
  2514  001536  5160               	movf	ledOn@led& (0+255),w,b
  2515  001538  26D9               	addwf	fsr2l,f,c
  2516  00153A  5161               	movf	(ledOn@led+1)& (0+255),w,b
  2517  00153C  22DA               	addwfc	fsr2h,f,c
  2518  00153E  50DF               	movf	indf2,w,c
  2519  001540  1289               	iorwf	3977,f,c	;volatile
  2520                           
  2521                           ;blink.c: 24: led->on=1;
  2522  001542  0100               	movlb	0	; () banked
  2523  001544  EE20 F002          	lfsr	2,2
  2524  001548  5160               	movf	ledOn@led& (0+255),w,b
  2525  00154A  26D9               	addwf	fsr2l,f,c
  2526  00154C  5161               	movf	(ledOn@led+1)& (0+255),w,b
  2527  00154E  22DA               	addwfc	fsr2h,f,c
  2528  001550  0E01               	movlw	1
  2529  001552  6EDF               	movwf	indf2,c
  2530                           
  2531                           ;blink.c: 25: led->mode=0;
  2532  001554  0100               	movlb	0	; () banked
  2533  001556  EE20 F008          	lfsr	2,8
  2534  00155A  5160               	movf	ledOn@led& (0+255),w,b
  2535  00155C  26D9               	addwf	fsr2l,f,c
  2536  00155E  5161               	movf	(ledOn@led+1)& (0+255),w,b
  2537  001560  22DA               	addwfc	fsr2h,f,c
  2538  001562  0E00               	movlw	0
  2539  001564  6EDF               	movwf	indf2,c
  2540                           
  2541                           ; BSR set to: 0
  2542  001566  0012               	return		;funcret
  2543  001568                     __end_of_ledOn:
  2544                           	opt stack 0
  2545                           tblptru	equ	0xFF8
  2546                           prodh	equ	0xFF4
  2547                           prodl	equ	0xFF3
  2548                           postinc0	equ	0xFEE
  2549                           wreg	equ	0xFE8
  2550                           indf1	equ	0xFE7
  2551                           postinc1	equ	0xFE6
  2552                           postdec1	equ	0xFE5
  2553                           fsr1h	equ	0xFE2
  2554                           fsr1l	equ	0xFE1
  2555                           indf2	equ	0xFDF
  2556                           postinc2	equ	0xFDE
  2557                           postdec2	equ	0xFDD
  2558                           plusw2	equ	0xFDB
  2559                           fsr2h	equ	0xFDA
  2560                           fsr2l	equ	0xFD9
  2561                           status	equ	0xFD8
  2562                           
  2563 ;; *************** function _ledOff *****************
  2564 ;; Defined at:
  2565 ;;		line 28 in file "blink.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;  led             2    0[BANK0 ] PTR struct .
  2568 ;;		 -> ledTx(9), ledRx(9), 
  2569 ;; Auto vars:     Size  Location     Type
  2570 ;;		None
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  1    wreg      void 
  2573 ;; Registers used:
  2574 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 0/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2580 ;;      Params:         0       2       0       0       0       0       0
  2581 ;;      Locals:         0       0       0       0       0       0       0
  2582 ;;      Temps:          0       0       0       0       0       0       0
  2583 ;;      Totals:         0       2       0       0       0       0       0
  2584 ;;Total ram usage:        2 bytes
  2585 ;; Hardware stack levels used:    1
  2586 ;; Hardware stack levels required when called:    3
  2587 ;; This function calls:
  2588 ;;		Nothing
  2589 ;; This function is called by:
  2590 ;;		_main
  2591 ;; This function uses a non-reentrant model
  2592 ;;
  2593                           
  2594                           	psect	text10
  2595  0014F6                     __ptext10:
  2596                           	opt stack 0
  2597  0014F6                     _ledOff:
  2598                           	opt stack 27
  2599                           
  2600                           ;blink.c: 30: LATA&=~led->bitMask;
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;incstack = 0
  2604  0014F6  0100               	movlb	0	; () banked
  2605  0014F8  EE20 F007          	lfsr	2,7
  2606  0014FC  5160               	movf	ledOff@led& (0+255),w,b
  2607  0014FE  26D9               	addwf	fsr2l,f,c
  2608  001500  5161               	movf	(ledOff@led+1)& (0+255),w,b
  2609  001502  22DA               	addwfc	fsr2h,f,c
  2610  001504  50DF               	movf	indf2,w,c
  2611  001506  0AFF               	xorlw	255
  2612  001508  1689               	andwf	3977,f,c	;volatile
  2613                           
  2614                           ;blink.c: 31: led->on=0;
  2615  00150A  0100               	movlb	0	; () banked
  2616  00150C  EE20 F002          	lfsr	2,2
  2617  001510  5160               	movf	ledOff@led& (0+255),w,b
  2618  001512  26D9               	addwf	fsr2l,f,c
  2619  001514  5161               	movf	(ledOff@led+1)& (0+255),w,b
  2620  001516  22DA               	addwfc	fsr2h,f,c
  2621  001518  0E00               	movlw	0
  2622  00151A  6EDF               	movwf	indf2,c
  2623                           
  2624                           ;blink.c: 32: led->mode=0;
  2625  00151C  0100               	movlb	0	; () banked
  2626  00151E  EE20 F008          	lfsr	2,8
  2627  001522  5160               	movf	ledOff@led& (0+255),w,b
  2628  001524  26D9               	addwf	fsr2l,f,c
  2629  001526  5161               	movf	(ledOff@led+1)& (0+255),w,b
  2630  001528  22DA               	addwfc	fsr2h,f,c
  2631  00152A  0E00               	movlw	0
  2632  00152C  6EDF               	movwf	indf2,c
  2633                           
  2634                           ; BSR set to: 0
  2635  00152E  0012               	return		;funcret
  2636  001530                     __end_of_ledOff:
  2637                           	opt stack 0
  2638                           tblptru	equ	0xFF8
  2639                           prodh	equ	0xFF4
  2640                           prodl	equ	0xFF3
  2641                           postinc0	equ	0xFEE
  2642                           wreg	equ	0xFE8
  2643                           indf1	equ	0xFE7
  2644                           postinc1	equ	0xFE6
  2645                           postdec1	equ	0xFE5
  2646                           fsr1h	equ	0xFE2
  2647                           fsr1l	equ	0xFE1
  2648                           indf2	equ	0xFDF
  2649                           postinc2	equ	0xFDE
  2650                           postdec2	equ	0xFDD
  2651                           plusw2	equ	0xFDB
  2652                           fsr2h	equ	0xFDA
  2653                           fsr2l	equ	0xFD9
  2654                           status	equ	0xFD8
  2655                           
  2656 ;; *************** function _ledFlash *****************
  2657 ;; Defined at:
  2658 ;;		line 46 in file "blink.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;  led             2    0[BANK0 ] PTR struct .
  2661 ;;		 -> ledTx(9), ledRx(9), 
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;		None
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  1    wreg      void 
  2666 ;; Registers used:
  2667 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2673 ;;      Params:         0       2       0       0       0       0       0
  2674 ;;      Locals:         0       0       0       0       0       0       0
  2675 ;;      Temps:          0       0       0       0       0       0       0
  2676 ;;      Totals:         0       2       0       0       0       0       0
  2677 ;;Total ram usage:        2 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    3
  2680 ;; This function calls:
  2681 ;;		Nothing
  2682 ;; This function is called by:
  2683 ;;		_main
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           	psect	text11
  2688  001592                     __ptext11:
  2689                           	opt stack 0
  2690  001592                     _ledFlash:
  2691                           	opt stack 27
  2692                           
  2693                           ;blink.c: 48: led->mode=1;
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;incstack = 0
  2697  001592  0100               	movlb	0	; () banked
  2698  001594  EE20 F008          	lfsr	2,8
  2699  001598  5160               	movf	ledFlash@led& (0+255),w,b
  2700  00159A  26D9               	addwf	fsr2l,f,c
  2701  00159C  5161               	movf	(ledFlash@led+1)& (0+255),w,b
  2702  00159E  22DA               	addwfc	fsr2h,f,c
  2703  0015A0  0E01               	movlw	1
  2704  0015A2  6EDF               	movwf	indf2,c
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;blink.c: 49: led->count=0;
  2708  0015A4  C060  FFD9         	movff	ledFlash@led,fsr2l
  2709  0015A8  C061  FFDA         	movff	ledFlash@led+1,fsr2h
  2710  0015AC  0E00               	movlw	0
  2711  0015AE  6EDE               	movwf	postinc2,c
  2712  0015B0  0E00               	movlw	0
  2713  0015B2  6EDD               	movwf	postdec2,c
  2714                           
  2715                           ; BSR set to: 0
  2716  0015B4  0012               	return		;funcret
  2717  0015B6                     __end_of_ledFlash:
  2718                           	opt stack 0
  2719                           tblptru	equ	0xFF8
  2720                           prodh	equ	0xFF4
  2721                           prodl	equ	0xFF3
  2722                           postinc0	equ	0xFEE
  2723                           wreg	equ	0xFE8
  2724                           indf1	equ	0xFE7
  2725                           postinc1	equ	0xFE6
  2726                           postdec1	equ	0xFE5
  2727                           fsr1h	equ	0xFE2
  2728                           fsr1l	equ	0xFE1
  2729                           indf2	equ	0xFDF
  2730                           postinc2	equ	0xFDE
  2731                           postdec2	equ	0xFDD
  2732                           plusw2	equ	0xFDB
  2733                           fsr2h	equ	0xFDA
  2734                           fsr2l	equ	0xFD9
  2735                           status	equ	0xFD8
  2736                           
  2737 ;; *************** function _decodeRecvBuffer *****************
  2738 ;; Defined at:
  2739 ;;		line 173 in file "main.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;		None
  2742 ;; Auto vars:     Size  Location     Type
  2743 ;;		None
  2744 ;; Return value:  Size  Location     Type
  2745 ;;                  1    wreg      void 
  2746 ;; Registers used:
  2747 ;;		None
  2748 ;; Tracked objects:
  2749 ;;		On entry : 0/0
  2750 ;;		On exit  : 0/0
  2751 ;;		Unchanged: 0/0
  2752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2753 ;;      Params:         0       0       0       0       0       0       0
  2754 ;;      Locals:         0       0       0       0       0       0       0
  2755 ;;      Temps:          0       0       0       0       0       0       0
  2756 ;;      Totals:         0       0       0       0       0       0       0
  2757 ;;Total ram usage:        0 bytes
  2758 ;; Hardware stack levels used:    1
  2759 ;; Hardware stack levels required when called:    3
  2760 ;; This function calls:
  2761 ;;		Nothing
  2762 ;; This function is called by:
  2763 ;;		_main
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           	psect	text12
  2768  0015E8                     __ptext12:
  2769                           	opt stack 0
  2770  0015E8                     _decodeRecvBuffer:
  2771                           	opt stack 27
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;incstack = 0
  2775  0015E8  0012               	return		;funcret
  2776  0015EA                     __end_of_decodeRecvBuffer:
  2777                           	opt stack 0
  2778                           tblptru	equ	0xFF8
  2779                           prodh	equ	0xFF4
  2780                           prodl	equ	0xFF3
  2781                           postinc0	equ	0xFEE
  2782                           wreg	equ	0xFE8
  2783                           indf1	equ	0xFE7
  2784                           postinc1	equ	0xFE6
  2785                           postdec1	equ	0xFE5
  2786                           fsr1h	equ	0xFE2
  2787                           fsr1l	equ	0xFE1
  2788                           indf2	equ	0xFDF
  2789                           postinc2	equ	0xFDE
  2790                           postdec2	equ	0xFDD
  2791                           plusw2	equ	0xFDB
  2792                           fsr2h	equ	0xFDA
  2793                           fsr2l	equ	0xFD9
  2794                           status	equ	0xFD8
  2795                           
  2796 ;; *************** function _crcOk *****************
  2797 ;; Defined at:
  2798 ;;		line 168 in file "main.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;  crc             1    wreg     unsigned char 
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;  crc             1    0[COMRAM] unsigned char 
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      unsigned char 
  2805 ;; Registers used:
  2806 ;;		wreg
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2812 ;;      Params:         0       0       0       0       0       0       0
  2813 ;;      Locals:         0       0       0       0       0       0       0
  2814 ;;      Temps:          0       0       0       0       0       0       0
  2815 ;;      Totals:         0       0       0       0       0       0       0
  2816 ;;Total ram usage:        0 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    3
  2819 ;; This function calls:
  2820 ;;		Nothing
  2821 ;; This function is called by:
  2822 ;;		_main
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text13
  2827  0015E4                     __ptext13:
  2828                           	opt stack 0
  2829  0015E4                     _crcOk:
  2830                           	opt stack 27
  2831                           
  2832                           ;main.c: 170: return 1;
  2833                           
  2834                           ;incstack = 0
  2835  0015E4  0E01               	movlw	1
  2836  0015E6  0012               	return	
  2837  0015E8                     __end_of_crcOk:
  2838                           	opt stack 0
  2839                           tblptru	equ	0xFF8
  2840                           prodh	equ	0xFF4
  2841                           prodl	equ	0xFF3
  2842                           postinc0	equ	0xFEE
  2843                           wreg	equ	0xFE8
  2844                           indf1	equ	0xFE7
  2845                           postinc1	equ	0xFE6
  2846                           postdec1	equ	0xFE5
  2847                           fsr1h	equ	0xFE2
  2848                           fsr1l	equ	0xFE1
  2849                           indf2	equ	0xFDF
  2850                           postinc2	equ	0xFDE
  2851                           postdec2	equ	0xFDD
  2852                           plusw2	equ	0xFDB
  2853                           fsr2h	equ	0xFDA
  2854                           fsr2l	equ	0xFD9
  2855                           status	equ	0xFD8
  2856                           
  2857 ;; *************** function _InitUart *****************
  2858 ;; Defined at:
  2859 ;;		line 140 in file "main.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;		None
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;		None
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      void 
  2866 ;; Registers used:
  2867 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2873 ;;      Params:         0       0       0       0       0       0       0
  2874 ;;      Locals:         0       0       0       0       0       0       0
  2875 ;;      Temps:          0       0       0       0       0       0       0
  2876 ;;      Totals:         0       0       0       0       0       0       0
  2877 ;;Total ram usage:        0 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    6
  2880 ;; This function calls:
  2881 ;;		_uartEnableRecv
  2882 ;;		_uartEnableSend
  2883 ;;		_uartInit
  2884 ;;		_uartInitHalfDuplex
  2885 ;; This function is called by:
  2886 ;;		_main
  2887 ;; This function uses a non-reentrant model
  2888 ;;
  2889                           
  2890                           	psect	text14
  2891  000F5E                     __ptext14:
  2892                           	opt stack 0
  2893  000F5E                     _InitUart:
  2894                           	opt stack 24
  2895                           
  2896                           ;main.c: 142: uartInit(&(uart),1,9600,64000000,uartSendBuffer,160,uartRecvBuffer,160);
  2897                           
  2898                           ;incstack = 0
  2899  000F5E  0E9E               	movlw	low _uart
  2900  000F60  0100               	movlb	0	; () banked
  2901  000F62  6F82               	movwf	uartInit@uart& (0+255),b
  2902  000F64  0E00               	movlw	high _uart
  2903  000F66  0100               	movlb	0	; () banked
  2904  000F68  6F83               	movwf	(uartInit@uart+1)& (0+255),b
  2905  000F6A  0E01               	movlw	1
  2906  000F6C  0100               	movlb	0	; () banked
  2907  000F6E  6F84               	movwf	uartInit@num& (0+255),b
  2908  000F70  0E80               	movlw	128
  2909  000F72  0100               	movlb	0	; () banked
  2910  000F74  6F85               	movwf	uartInit@baud& (0+255),b
  2911  000F76  0E25               	movlw	37
  2912  000F78  6F86               	movwf	(uartInit@baud+1)& (0+255),b
  2913  000F7A  0E00               	movlw	0
  2914  000F7C  6F87               	movwf	(uartInit@baud+2)& (0+255),b
  2915  000F7E  0E00               	movlw	0
  2916  000F80  6F88               	movwf	(uartInit@baud+3)& (0+255),b
  2917  000F82  0E00               	movlw	0
  2918  000F84  0100               	movlb	0	; () banked
  2919  000F86  6F89               	movwf	uartInit@osc& (0+255),b
  2920  000F88  0E90               	movlw	144
  2921  000F8A  6F8A               	movwf	(uartInit@osc+1)& (0+255),b
  2922  000F8C  0ED0               	movlw	208
  2923  000F8E  6F8B               	movwf	(uartInit@osc+2)& (0+255),b
  2924  000F90  0E03               	movlw	3
  2925  000F92  6F8C               	movwf	(uartInit@osc+3)& (0+255),b
  2926  000F94  0E6A               	movlw	low _uartSendBuffer
  2927  000F96  0100               	movlb	0	; () banked
  2928  000F98  6F8D               	movwf	uartInit@sendbuf& (0+255),b
  2929  000F9A  0E02               	movlw	high _uartSendBuffer
  2930  000F9C  0100               	movlb	0	; () banked
  2931  000F9E  6F8E               	movwf	(uartInit@sendbuf+1)& (0+255),b
  2932  000FA0  0EA0               	movlw	160
  2933  000FA2  0100               	movlb	0	; () banked
  2934  000FA4  6F8F               	movwf	uartInit@sendSize& (0+255),b
  2935  000FA6  0E00               	movlw	low _uartRecvBuffer
  2936  000FA8  0100               	movlb	0	; () banked
  2937  000FAA  6F90               	movwf	uartInit@recvbuf& (0+255),b
  2938  000FAC  0E03               	movlw	high _uartRecvBuffer
  2939  000FAE  0100               	movlb	0	; () banked
  2940  000FB0  6F91               	movwf	(uartInit@recvbuf+1)& (0+255),b
  2941  000FB2  0EA0               	movlw	160
  2942  000FB4  0100               	movlb	0	; () banked
  2943  000FB6  6F92               	movwf	uartInit@recvSize& (0+255),b
  2944  000FB8  EC45  F004         	call	_uartInit	;wreg free
  2945                           
  2946                           ;main.c: 143: uartInitHalfDuplex(&(uart),&LATB,5);
  2947  000FBC  0E9E               	movlw	low _uart
  2948  000FBE  0100               	movlb	0	; () banked
  2949  000FC0  6F60               	movwf	uartInitHalfDuplex@uart& (0+255),b
  2950  000FC2  0E00               	movlw	high _uart
  2951  000FC4  0100               	movlb	0	; () banked
  2952  000FC6  6F61               	movwf	(uartInitHalfDuplex@uart+1)& (0+255),b
  2953  000FC8  0E8A               	movlw	138
  2954  000FCA  0100               	movlb	0	; () banked
  2955  000FCC  6F62               	movwf	uartInitHalfDuplex@port& (0+255),b
  2956  000FCE  0E0F               	movlw	15
  2957  000FD0  0100               	movlb	0	; () banked
  2958  000FD2  6F63               	movwf	(uartInitHalfDuplex@port+1)& (0+255),b
  2959  000FD4  0E05               	movlw	5
  2960  000FD6  0100               	movlb	0	; () banked
  2961  000FD8  6F64               	movwf	uartInitHalfDuplex@bt& (0+255),b
  2962  000FDA  EC55  F007         	call	_uartInitHalfDuplex	;wreg free
  2963                           
  2964                           ;main.c: 145: uartEnableSend(&(uart),1);
  2965  000FDE  0E9E               	movlw	low _uart
  2966  000FE0  0100               	movlb	0	; () banked
  2967  000FE2  6F60               	movwf	uartEnableSend@uart& (0+255),b
  2968  000FE4  0E00               	movlw	high _uart
  2969  000FE6  0100               	movlb	0	; () banked
  2970  000FE8  6F61               	movwf	(uartEnableSend@uart+1)& (0+255),b
  2971  000FEA  0E01               	movlw	1
  2972  000FEC  0100               	movlb	0	; () banked
  2973  000FEE  6F62               	movwf	uartEnableSend@onoff& (0+255),b
  2974  000FF0  ECD3  F009         	call	_uartEnableSend	;wreg free
  2975                           
  2976                           ;main.c: 146: uartEnableRecv(&(uart),1);
  2977  000FF4  0E9E               	movlw	low _uart
  2978  000FF6  0100               	movlb	0	; () banked
  2979  000FF8  6F60               	movwf	uartEnableRecv@uart& (0+255),b
  2980  000FFA  0E00               	movlw	high _uart
  2981  000FFC  0100               	movlb	0	; () banked
  2982  000FFE  6F61               	movwf	(uartEnableRecv@uart+1)& (0+255),b
  2983  001000  0E01               	movlw	1
  2984  001002  0100               	movlb	0	; () banked
  2985  001004  6F62               	movwf	uartEnableRecv@onoff& (0+255),b
  2986  001006  ECAB  F009         	call	_uartEnableRecv	;wreg free
  2987  00100A  0012               	return		;funcret
  2988  00100C                     __end_of_InitUart:
  2989                           	opt stack 0
  2990                           tblptru	equ	0xFF8
  2991                           prodh	equ	0xFF4
  2992                           prodl	equ	0xFF3
  2993                           postinc0	equ	0xFEE
  2994                           wreg	equ	0xFE8
  2995                           indf1	equ	0xFE7
  2996                           postinc1	equ	0xFE6
  2997                           postdec1	equ	0xFE5
  2998                           fsr1h	equ	0xFE2
  2999                           fsr1l	equ	0xFE1
  3000                           indf2	equ	0xFDF
  3001                           postinc2	equ	0xFDE
  3002                           postdec2	equ	0xFDD
  3003                           plusw2	equ	0xFDB
  3004                           fsr2h	equ	0xFDA
  3005                           fsr2l	equ	0xFD9
  3006                           status	equ	0xFD8
  3007                           
  3008 ;; *************** function _uartInitHalfDuplex *****************
  3009 ;; Defined at:
  3010 ;;		line 130 in file "uart.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;  uart            2    0[BANK0 ] PTR struct .
  3013 ;;		 -> uart(25), 
  3014 ;;  port            2    2[BANK0 ] PTR volatile unsigned ch
  3015 ;;		 -> LATB(1), 
  3016 ;;  bt              1    4[BANK0 ] unsigned char 
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;		None
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3028 ;;      Params:         0       5       0       0       0       0       0
  3029 ;;      Locals:         0       0       0       0       0       0       0
  3030 ;;      Temps:          0       3       0       0       0       0       0
  3031 ;;      Totals:         0       8       0       0       0       0       0
  3032 ;;Total ram usage:        8 bytes
  3033 ;; Hardware stack levels used:    1
  3034 ;; Hardware stack levels required when called:    3
  3035 ;; This function calls:
  3036 ;;		Nothing
  3037 ;; This function is called by:
  3038 ;;		_InitUart
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           	psect	text15
  3043  000EAA                     __ptext15:
  3044                           	opt stack 0
  3045  000EAA                     _uartInitHalfDuplex:
  3046                           	opt stack 26
  3047                           
  3048                           ;uart.c: 132: uart->hdPort=port;
  3049                           
  3050                           ;incstack = 0
  3051  000EAA  0100               	movlb	0	; () banked
  3052  000EAC  EE20 F015          	lfsr	2,21
  3053  000EB0  5160               	movf	uartInitHalfDuplex@uart& (0+255),w,b
  3054  000EB2  26D9               	addwf	fsr2l,f,c
  3055  000EB4  5161               	movf	(uartInitHalfDuplex@uart+1)& (0+255),w,b
  3056  000EB6  22DA               	addwfc	fsr2h,f,c
  3057  000EB8  C062  FFDE         	movff	uartInitHalfDuplex@port,postinc2
  3058  000EBC  C063  FFDD         	movff	uartInitHalfDuplex@port+1,postdec2
  3059                           
  3060                           ;uart.c: 133: uart->hdOnMask=1 << bt;
  3061  000EC0  0100               	movlb	0	; () banked
  3062  000EC2  EE20 F017          	lfsr	2,23
  3063  000EC6  5160               	movf	uartInitHalfDuplex@uart& (0+255),w,b
  3064  000EC8  26D9               	addwf	fsr2l,f,c
  3065  000ECA  5161               	movf	(uartInitHalfDuplex@uart+1)& (0+255),w,b
  3066  000ECC  22DA               	addwfc	fsr2h,f,c
  3067  000ECE  C064  F065         	movff	uartInitHalfDuplex@bt,??_uartInitHalfDuplex
  3068  000ED2  0E01               	movlw	1
  3069  000ED4  0100               	movlb	0	; () banked
  3070  000ED6  6F66               	movwf	(??_uartInitHalfDuplex+1)& (0+255),b
  3071  000ED8  0100               	movlb	0	; () banked
  3072  000EDA  2B65               	incf	??_uartInitHalfDuplex& (0+255),f,b
  3073  000EDC  D003               	goto	u1644
  3074  000EDE                     u1645:
  3075  000EDE  0100               	movlb	0	; () banked
  3076  000EE0  90D8               	bcf	status,0,c
  3077  000EE2  3766               	rlcf	(??_uartInitHalfDuplex+1)& (0+255),f,b
  3078  000EE4                     u1644:
  3079  000EE4  0100               	movlb	0	; () banked
  3080  000EE6  2F65               	decfsz	??_uartInitHalfDuplex& (0+255),f,b
  3081  000EE8  D7FA               	goto	u1645
  3082  000EEA  0100               	movlb	0	; () banked
  3083  000EEC  5166               	movf	(??_uartInitHalfDuplex+1)& (0+255),w,b
  3084  000EEE  6EDF               	movwf	indf2,c
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;uart.c: 134: uart->hdOffMask=~uart->hdOnMask;
  3088  000EF0  0100               	movlb	0	; () banked
  3089  000EF2  EE20 F018          	lfsr	2,24
  3090  000EF6  5160               	movf	uartInitHalfDuplex@uart& (0+255),w,b
  3091  000EF8  26D9               	addwf	fsr2l,f,c
  3092  000EFA  5161               	movf	(uartInitHalfDuplex@uart+1)& (0+255),w,b
  3093  000EFC  22DA               	addwfc	fsr2h,f,c
  3094  000EFE  0100               	movlb	0	; () banked
  3095  000F00  EE10 F017          	lfsr	1,23
  3096  000F04  5160               	movf	uartInitHalfDuplex@uart& (0+255),w,b
  3097  000F06  26E1               	addwf	fsr1l,f,c
  3098  000F08  5161               	movf	(uartInitHalfDuplex@uart+1)& (0+255),w,b
  3099  000F0A  22E2               	addwfc	fsr1h,f,c
  3100  000F0C  50E7               	movf	indf1,w,c
  3101  000F0E  0AFF               	xorlw	255
  3102  000F10  6EDF               	movwf	indf2,c
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;uart.c: 135: uart->hdFlag=1;
  3106  000F12  0100               	movlb	0	; () banked
  3107  000F14  EE20 F014          	lfsr	2,20
  3108  000F18  5160               	movf	uartInitHalfDuplex@uart& (0+255),w,b
  3109  000F1A  26D9               	addwf	fsr2l,f,c
  3110  000F1C  5161               	movf	(uartInitHalfDuplex@uart+1)& (0+255),w,b
  3111  000F1E  22DA               	addwfc	fsr2h,f,c
  3112  000F20  0E01               	movlw	1
  3113  000F22  6EDF               	movwf	indf2,c
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;uart.c: 136: *(uart->hdPort) &= uart->hdOffMask;
  3117  000F24  0100               	movlb	0	; () banked
  3118  000F26  EE20 F018          	lfsr	2,24
  3119  000F2A  5160               	movf	uartInitHalfDuplex@uart& (0+255),w,b
  3120  000F2C  26D9               	addwf	fsr2l,f,c
  3121  000F2E  5161               	movf	(uartInitHalfDuplex@uart+1)& (0+255),w,b
  3122  000F30  22DA               	addwfc	fsr2h,f,c
  3123  000F32  50DF               	movf	indf2,w,c
  3124  000F34  0100               	movlb	0	; () banked
  3125  000F36  6F65               	movwf	??_uartInitHalfDuplex& (0+255),b
  3126  000F38  0100               	movlb	0	; () banked
  3127  000F3A  EE20 F015          	lfsr	2,21
  3128  000F3E  5160               	movf	uartInitHalfDuplex@uart& (0+255),w,b
  3129  000F40  26D9               	addwf	fsr2l,f,c
  3130  000F42  5161               	movf	(uartInitHalfDuplex@uart+1)& (0+255),w,b
  3131  000F44  22DA               	addwfc	fsr2h,f,c
  3132  000F46  CFDE F066          	movff	postinc2,??_uartInitHalfDuplex+1
  3133  000F4A  CFDD F067          	movff	postdec2,??_uartInitHalfDuplex+2
  3134  000F4E  C066  FFD9         	movff	??_uartInitHalfDuplex+1,fsr2l
  3135  000F52  C067  FFDA         	movff	??_uartInitHalfDuplex+2,fsr2h
  3136  000F56  0100               	movlb	0	; () banked
  3137  000F58  5165               	movf	??_uartInitHalfDuplex& (0+255),w,b
  3138  000F5A  16DF               	andwf	indf2,f,c
  3139                           
  3140                           ; BSR set to: 0
  3141  000F5C  0012               	return		;funcret
  3142  000F5E                     __end_of_uartInitHalfDuplex:
  3143                           	opt stack 0
  3144                           tblptru	equ	0xFF8
  3145                           prodh	equ	0xFF4
  3146                           prodl	equ	0xFF3
  3147                           postinc0	equ	0xFEE
  3148                           wreg	equ	0xFE8
  3149                           indf1	equ	0xFE7
  3150                           postinc1	equ	0xFE6
  3151                           postdec1	equ	0xFE5
  3152                           fsr1h	equ	0xFE2
  3153                           fsr1l	equ	0xFE1
  3154                           indf2	equ	0xFDF
  3155                           postinc2	equ	0xFDE
  3156                           postdec2	equ	0xFDD
  3157                           plusw2	equ	0xFDB
  3158                           fsr2h	equ	0xFDA
  3159                           fsr2l	equ	0xFD9
  3160                           status	equ	0xFD8
  3161                           
  3162 ;; *************** function _uartInit *****************
  3163 ;; Defined at:
  3164 ;;		line 4 in file "uart.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  uart            2   34[BANK0 ] PTR struct .
  3167 ;;		 -> uart(25), 
  3168 ;;  num             1   36[BANK0 ] unsigned char 
  3169 ;;  baud            4   37[BANK0 ] long 
  3170 ;;  osc             4   41[BANK0 ] long 
  3171 ;;  sendbuf         2   45[BANK0 ] PTR unsigned char 
  3172 ;;		 -> uartSendBuffer(132), 
  3173 ;;  sendSize        1   47[BANK0 ] unsigned char 
  3174 ;;  recvbuf         2   48[BANK0 ] PTR unsigned char 
  3175 ;;		 -> uartRecvBuffer(132), 
  3176 ;;  recvSize        1   50[BANK0 ] unsigned char 
  3177 ;; Auto vars:     Size  Location     Type
  3178 ;;  b16             1    0        unsigned char 
  3179 ;;  h               1    0        unsigned char 
  3180 ;;  l               1    0        unsigned char 
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  1    wreg      void 
  3183 ;; Registers used:
  3184 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3190 ;;      Params:         0      17       0       0       0       0       0
  3191 ;;      Locals:         0       0       0       0       0       0       0
  3192 ;;      Temps:          0       0       0       0       0       0       0
  3193 ;;      Totals:         0      17       0       0       0       0       0
  3194 ;;Total ram usage:       17 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    5
  3197 ;; This function calls:
  3198 ;;		_SetBaudRate
  3199 ;;		_fifoInit
  3200 ;; This function is called by:
  3201 ;;		_InitUart
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           	psect	text16
  3206  00088A                     __ptext16:
  3207                           	opt stack 0
  3208  00088A                     _uartInit:
  3209                           	opt stack 24
  3210                           
  3211                           ;uart.c: 6: uart->number=num;
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;incstack = 0
  3215  00088A  0100               	movlb	0	; () banked
  3216  00088C  EE20 F013          	lfsr	2,19
  3217  000890  5182               	movf	uartInit@uart& (0+255),w,b
  3218  000892  26D9               	addwf	fsr2l,f,c
  3219  000894  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  3220  000896  22DA               	addwfc	fsr2h,f,c
  3221  000898  C084  FFDF         	movff	uartInit@num,indf2
  3222                           
  3223                           ;uart.c: 7: char l;
  3224                           ;uart.c: 8: char h;
  3225                           ;uart.c: 9: char b16;
  3226                           ;uart.c: 11: switch (num)
  3227  00089C  D072               	goto	l3816
  3228  00089E                     l3762:
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;uart.c: 15: uart->txReg=&TXREG1;
  3232  00089E  0100               	movlb	0	; () banked
  3233  0008A0  EE20 F00E          	lfsr	2,14
  3234  0008A4  5182               	movf	uartInit@uart& (0+255),w,b
  3235  0008A6  26D9               	addwf	fsr2l,f,c
  3236  0008A8  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  3237  0008AA  22DA               	addwfc	fsr2h,f,c
  3238  0008AC  0EAD               	movlw	173
  3239  0008AE  6EDE               	movwf	postinc2,c
  3240  0008B0  0E0F               	movlw	15
  3241  0008B2  6EDD               	movwf	postdec2,c
  3242                           
  3243                           ;uart.c: 16: uart->rxReg=&RCREG1;
  3244  0008B4  0100               	movlb	0	; () banked
  3245  0008B6  EE20 F010          	lfsr	2,16
  3246  0008BA  5182               	movf	uartInit@uart& (0+255),w,b
  3247  0008BC  26D9               	addwf	fsr2l,f,c
  3248  0008BE  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  3249  0008C0  22DA               	addwfc	fsr2h,f,c
  3250  0008C2  0EAE               	movlw	174
  3251  0008C4  6EDE               	movwf	postinc2,c
  3252  0008C6  0E0F               	movlw	15
  3253  0008C8  6EDD               	movwf	postdec2,c
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;uart.c: 18: ANSELCbits.ANSC6=0;
  3257  0008CA  010F               	movlb	15	; () banked
  3258  0008CC  9D3A               	bcf	58,6,b	;volatile
  3259                           
  3260                           ; BSR set to: 15
  3261                           ;uart.c: 19: ANSELCbits.ANSC7=0;
  3262  0008CE  010F               	movlb	15	; () banked
  3263  0008D0  9F3A               	bcf	58,7,b	;volatile
  3264                           
  3265                           ; BSR set to: 15
  3266                           ;uart.c: 20: TRISCbits.RC6=1;
  3267  0008D2  8C94               	bsf	3988,6,c	;volatile
  3268                           
  3269                           ; BSR set to: 15
  3270                           ;uart.c: 21: TRISCbits.RC7=1;
  3271  0008D4  8E94               	bsf	3988,7,c	;volatile
  3272                           
  3273                           ; BSR set to: 15
  3274                           ;uart.c: 24: TXSTA1bits.BRGH=0;
  3275  0008D6  94AC               	bcf	4012,2,c	;volatile
  3276                           
  3277                           ; BSR set to: 15
  3278                           ;uart.c: 25: TXSTA1bits.SYNC=0;
  3279  0008D8  98AC               	bcf	4012,4,c	;volatile
  3280                           
  3281                           ; BSR set to: 15
  3282                           ;uart.c: 26: TXSTA1bits.TX9=0;
  3283  0008DA  9CAC               	bcf	4012,6,c	;volatile
  3284                           
  3285                           ; BSR set to: 15
  3286                           ;uart.c: 27: TXSTA1bits.TXEN=1;
  3287  0008DC  8AAC               	bsf	4012,5,c	;volatile
  3288                           
  3289                           ; BSR set to: 15
  3290                           ;uart.c: 28: RCSTA1bits.SPEN=1;
  3291  0008DE  8EAB               	bsf	4011,7,c	;volatile
  3292                           
  3293                           ; BSR set to: 15
  3294                           ;uart.c: 29: RCSTA1bits.CREN=1;
  3295  0008E0  88AB               	bsf	4011,4,c	;volatile
  3296                           
  3297                           ; BSR set to: 15
  3298                           ;uart.c: 31: SetBaudRate(uart,baud,osc);
  3299  0008E2  C082  F074         	movff	uartInit@uart,SetBaudRate@uart
  3300  0008E6  C083  F075         	movff	uartInit@uart+1,SetBaudRate@uart+1
  3301  0008EA  C085  F076         	movff	uartInit@baud,SetBaudRate@rate
  3302  0008EE  C086  F077         	movff	uartInit@baud+1,SetBaudRate@rate+1
  3303  0008F2  C087  F078         	movff	uartInit@baud+2,SetBaudRate@rate+2
  3304  0008F6  C088  F079         	movff	uartInit@baud+3,SetBaudRate@rate+3
  3305  0008FA  C089  F07A         	movff	uartInit@osc,SetBaudRate@osc
  3306  0008FE  C08A  F07B         	movff	uartInit@osc+1,SetBaudRate@osc+1
  3307  000902  C08B  F07C         	movff	uartInit@osc+2,SetBaudRate@osc+2
  3308  000906  C08C  F07D         	movff	uartInit@osc+3,SetBaudRate@osc+3
  3309  00090A  EC5B  F008         	call	_SetBaudRate	;wreg free
  3310                           
  3311                           ;uart.c: 33: IPR1bits.TXIP=1;
  3312  00090E  889F               	bsf	3999,4,c	;volatile
  3313                           
  3314                           ;uart.c: 34: IPR1bits.RCIP=1;
  3315  000910  8A9F               	bsf	3999,5,c	;volatile
  3316                           
  3317                           ;uart.c: 35: break;
  3318  000912  D03F               	goto	l3818
  3319  000914                     l3790:
  3320                           
  3321                           ;uart.c: 38: uart->txReg=&TXREG2;
  3322  000914  0100               	movlb	0	; () banked
  3323  000916  EE20 F00E          	lfsr	2,14
  3324  00091A  5182               	movf	uartInit@uart& (0+255),w,b
  3325  00091C  26D9               	addwf	fsr2l,f,c
  3326  00091E  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  3327  000920  22DA               	addwfc	fsr2h,f,c
  3328  000922  0E73               	movlw	115
  3329  000924  6EDE               	movwf	postinc2,c
  3330  000926  0E0F               	movlw	15
  3331  000928  6EDD               	movwf	postdec2,c
  3332                           
  3333                           ;uart.c: 39: uart->rxReg=&RCREG2;
  3334  00092A  0100               	movlb	0	; () banked
  3335  00092C  EE20 F010          	lfsr	2,16
  3336  000930  5182               	movf	uartInit@uart& (0+255),w,b
  3337  000932  26D9               	addwf	fsr2l,f,c
  3338  000934  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  3339  000936  22DA               	addwfc	fsr2h,f,c
  3340  000938  0E74               	movlw	116
  3341  00093A  6EDE               	movwf	postinc2,c
  3342  00093C  0E0F               	movlw	15
  3343  00093E  6EDD               	movwf	postdec2,c
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;uart.c: 41: TRISBbits.RB6=1;
  3347  000940  8C93               	bsf	3987,6,c	;volatile
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;uart.c: 42: TRISBbits.RB7=1;
  3351  000942  8E93               	bsf	3987,7,c	;volatile
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;uart.c: 44: TXSTA2bits.BRGH=0;
  3355  000944  9472               	bcf	3954,2,c	;volatile
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;uart.c: 45: TXSTA2bits.SYNC=0;
  3359  000946  9872               	bcf	3954,4,c	;volatile
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;uart.c: 46: TXSTA2bits.TX9=0;
  3363  000948  9C72               	bcf	3954,6,c	;volatile
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;uart.c: 47: TXSTA2bits.TXEN=1;
  3367  00094A  8A72               	bsf	3954,5,c	;volatile
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;uart.c: 48: RCSTA2bits.SPEN=1;
  3371  00094C  8E71               	bsf	3953,7,c	;volatile
  3372                           
  3373                           ; BSR set to: 0
  3374                           ;uart.c: 49: RCSTA2bits.CREN=1;
  3375  00094E  8871               	bsf	3953,4,c	;volatile
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;uart.c: 51: SetBaudRate(uart,baud,osc);
  3379  000950  C082  F074         	movff	uartInit@uart,SetBaudRate@uart
  3380  000954  C083  F075         	movff	uartInit@uart+1,SetBaudRate@uart+1
  3381  000958  C085  F076         	movff	uartInit@baud,SetBaudRate@rate
  3382  00095C  C086  F077         	movff	uartInit@baud+1,SetBaudRate@rate+1
  3383  000960  C087  F078         	movff	uartInit@baud+2,SetBaudRate@rate+2
  3384  000964  C088  F079         	movff	uartInit@baud+3,SetBaudRate@rate+3
  3385  000968  C089  F07A         	movff	uartInit@osc,SetBaudRate@osc
  3386  00096C  C08A  F07B         	movff	uartInit@osc+1,SetBaudRate@osc+1
  3387  000970  C08B  F07C         	movff	uartInit@osc+2,SetBaudRate@osc+2
  3388  000974  C08C  F07D         	movff	uartInit@osc+3,SetBaudRate@osc+3
  3389  000978  EC5B  F008         	call	_SetBaudRate	;wreg free
  3390                           
  3391                           ;uart.c: 53: IPR3bits.TX2IP=1;
  3392  00097C  88A5               	bsf	4005,4,c	;volatile
  3393                           
  3394                           ;uart.c: 54: IPR3bits.RC2IP=1;
  3395  00097E  8AA5               	bsf	4005,5,c	;volatile
  3396                           
  3397                           ;uart.c: 56: }
  3398                           
  3399                           ;uart.c: 55: break;
  3400  000980  D008               	goto	l3818
  3401  000982                     l3816:
  3402  000982  0100               	movlb	0	; () banked
  3403  000984  5184               	movf	uartInit@num& (0+255),w,b
  3404                           
  3405                           ; Switch size 1, requested type "space"
  3406                           ; Number of cases is 2, Range of values is 1 to 2
  3407                           ; switch strategies available:
  3408                           ; Name         Instructions Cycles
  3409                           ; simple_byte            7     4 (average)
  3410                           ;	Chosen strategy is simple_byte
  3411  000986  0A01               	xorlw	1	; case 1
  3412  000988  B4D8               	btfsc	status,2,c
  3413  00098A  D789               	goto	l3762
  3414  00098C  0A03               	xorlw	3	; case 2
  3415  00098E  B4D8               	btfsc	status,2,c
  3416  000990  D7C1               	goto	l3790
  3417  000992                     l3818:
  3418                           
  3419                           ;uart.c: 58: uart->status=0;
  3420  000992  0100               	movlb	0	; () banked
  3421  000994  EE20 F012          	lfsr	2,18
  3422  000998  5182               	movf	uartInit@uart& (0+255),w,b
  3423  00099A  26D9               	addwf	fsr2l,f,c
  3424  00099C  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  3425  00099E  22DA               	addwfc	fsr2h,f,c
  3426  0009A0  0E00               	movlw	0
  3427  0009A2  6EDF               	movwf	indf2,c
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;uart.c: 60: fifoInit(&uart->sendFifo,sendbuf,sendSize);
  3431  0009A4  C082  F060         	movff	uartInit@uart,fifoInit@fifo
  3432  0009A8  C083  F061         	movff	uartInit@uart+1,fifoInit@fifo+1
  3433  0009AC  C08D  F062         	movff	uartInit@sendbuf,fifoInit@buf
  3434  0009B0  C08E  F063         	movff	uartInit@sendbuf+1,fifoInit@buf+1
  3435  0009B4  C08F  F064         	movff	uartInit@sendSize,fifoInit@size
  3436  0009B8  ECEB  F008         	call	_fifoInit	;wreg free
  3437                           
  3438                           ;uart.c: 61: fifoInit(&uart->recvFifo,recvbuf,recvSize);
  3439  0009BC  0E06               	movlw	6
  3440  0009BE  0100               	movlb	0	; () banked
  3441  0009C0  2582               	addwf	uartInit@uart& (0+255),w,b
  3442  0009C2  0100               	movlb	0	; () banked
  3443  0009C4  6F60               	movwf	fifoInit@fifo& (0+255),b
  3444  0009C6  0E00               	movlw	0
  3445  0009C8  0100               	movlb	0	; () banked
  3446  0009CA  2183               	addwfc	(uartInit@uart+1)& (0+255),w,b
  3447  0009CC  0100               	movlb	0	; () banked
  3448  0009CE  6F61               	movwf	(fifoInit@fifo+1)& (0+255),b
  3449  0009D0  C090  F062         	movff	uartInit@recvbuf,fifoInit@buf
  3450  0009D4  C091  F063         	movff	uartInit@recvbuf+1,fifoInit@buf+1
  3451  0009D8  C092  F064         	movff	uartInit@recvSize,fifoInit@size
  3452  0009DC  ECEB  F008         	call	_fifoInit	;wreg free
  3453  0009E0  0012               	return		;funcret
  3454  0009E2                     __end_of_uartInit:
  3455                           	opt stack 0
  3456                           tblptru	equ	0xFF8
  3457                           prodh	equ	0xFF4
  3458                           prodl	equ	0xFF3
  3459                           postinc0	equ	0xFEE
  3460                           wreg	equ	0xFE8
  3461                           indf1	equ	0xFE7
  3462                           postinc1	equ	0xFE6
  3463                           postdec1	equ	0xFE5
  3464                           fsr1h	equ	0xFE2
  3465                           fsr1l	equ	0xFE1
  3466                           indf2	equ	0xFDF
  3467                           postinc2	equ	0xFDE
  3468                           postdec2	equ	0xFDD
  3469                           plusw2	equ	0xFDB
  3470                           fsr2h	equ	0xFDA
  3471                           fsr2l	equ	0xFD9
  3472                           status	equ	0xFD8
  3473                           
  3474 ;; *************** function _fifoInit *****************
  3475 ;; Defined at:
  3476 ;;		line 3 in file "fifo.c"
  3477 ;; Parameters:    Size  Location     Type
  3478 ;;  fifo            2    0[BANK0 ] PTR struct .
  3479 ;;		 -> uart(25), 
  3480 ;;  buf             2    2[BANK0 ] PTR unsigned char 
  3481 ;;		 -> uartRecvBuffer(132), uartSendBuffer(132), 
  3482 ;;  size            1    4[BANK0 ] unsigned char 
  3483 ;; Auto vars:     Size  Location     Type
  3484 ;;		None
  3485 ;; Return value:  Size  Location     Type
  3486 ;;                  1    wreg      void 
  3487 ;; Registers used:
  3488 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3489 ;; Tracked objects:
  3490 ;;		On entry : 0/0
  3491 ;;		On exit  : 0/0
  3492 ;;		Unchanged: 0/0
  3493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3494 ;;      Params:         0       5       0       0       0       0       0
  3495 ;;      Locals:         0       0       0       0       0       0       0
  3496 ;;      Temps:          0       0       0       0       0       0       0
  3497 ;;      Totals:         0       5       0       0       0       0       0
  3498 ;;Total ram usage:        5 bytes
  3499 ;; Hardware stack levels used:    1
  3500 ;; Hardware stack levels required when called:    3
  3501 ;; This function calls:
  3502 ;;		Nothing
  3503 ;; This function is called by:
  3504 ;;		_uartInit
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508                           	psect	text17
  3509  0011D6                     __ptext17:
  3510                           	opt stack 0
  3511  0011D6                     _fifoInit:
  3512                           	opt stack 25
  3513                           
  3514                           ;fifo.c: 5: fifo->buf=buf;
  3515                           
  3516                           ;incstack = 0
  3517  0011D6  C060  FFD9         	movff	fifoInit@fifo,fsr2l
  3518  0011DA  C061  FFDA         	movff	fifoInit@fifo+1,fsr2h
  3519  0011DE  C062  FFDE         	movff	fifoInit@buf,postinc2
  3520  0011E2  C063  FFDD         	movff	fifoInit@buf+1,postdec2
  3521                           
  3522                           ;fifo.c: 6: fifo->maxPtr=size-1;
  3523  0011E6  0100               	movlb	0	; () banked
  3524  0011E8  EE20 F002          	lfsr	2,2
  3525  0011EC  5160               	movf	fifoInit@fifo& (0+255),w,b
  3526  0011EE  26D9               	addwf	fsr2l,f,c
  3527  0011F0  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  3528  0011F2  22DA               	addwfc	fsr2h,f,c
  3529  0011F4  0100               	movlb	0	; () banked
  3530  0011F6  0564               	decf	fifoInit@size& (0+255),w,b
  3531  0011F8  6EDF               	movwf	indf2,c
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;fifo.c: 7: fifo->status=2;
  3535  0011FA  0100               	movlb	0	; () banked
  3536  0011FC  EE20 F003          	lfsr	2,3
  3537  001200  5160               	movf	fifoInit@fifo& (0+255),w,b
  3538  001202  26D9               	addwf	fsr2l,f,c
  3539  001204  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  3540  001206  22DA               	addwfc	fsr2h,f,c
  3541  001208  0E02               	movlw	2
  3542  00120A  6EDF               	movwf	indf2,c
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;fifo.c: 8: fifo->getPtr=fifo->maxPtr;
  3546  00120C  0100               	movlb	0	; () banked
  3547  00120E  EE20 F002          	lfsr	2,2
  3548  001212  5160               	movf	fifoInit@fifo& (0+255),w,b
  3549  001214  26D9               	addwf	fsr2l,f,c
  3550  001216  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  3551  001218  22DA               	addwfc	fsr2h,f,c
  3552  00121A  0100               	movlb	0	; () banked
  3553  00121C  EE10 F005          	lfsr	1,5
  3554  001220  5160               	movf	fifoInit@fifo& (0+255),w,b
  3555  001222  26E1               	addwf	fsr1l,f,c
  3556  001224  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  3557  001226  22E2               	addwfc	fsr1h,f,c
  3558  001228  CFDF FFE7          	movff	indf2,indf1
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;fifo.c: 9: fifo->putPtr=fifo->maxPtr;
  3562  00122C  0100               	movlb	0	; () banked
  3563  00122E  EE20 F002          	lfsr	2,2
  3564  001232  5160               	movf	fifoInit@fifo& (0+255),w,b
  3565  001234  26D9               	addwf	fsr2l,f,c
  3566  001236  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  3567  001238  22DA               	addwfc	fsr2h,f,c
  3568  00123A  0100               	movlb	0	; () banked
  3569  00123C  EE10 F004          	lfsr	1,4
  3570  001240  5160               	movf	fifoInit@fifo& (0+255),w,b
  3571  001242  26E1               	addwf	fsr1l,f,c
  3572  001244  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  3573  001246  22E2               	addwfc	fsr1h,f,c
  3574  001248  CFDF FFE7          	movff	indf2,indf1
  3575                           
  3576                           ; BSR set to: 0
  3577  00124C  0012               	return		;funcret
  3578  00124E                     __end_of_fifoInit:
  3579                           	opt stack 0
  3580                           tblptru	equ	0xFF8
  3581                           prodh	equ	0xFF4
  3582                           prodl	equ	0xFF3
  3583                           postinc0	equ	0xFEE
  3584                           wreg	equ	0xFE8
  3585                           indf1	equ	0xFE7
  3586                           postinc1	equ	0xFE6
  3587                           postdec1	equ	0xFE5
  3588                           fsr1h	equ	0xFE2
  3589                           fsr1l	equ	0xFE1
  3590                           indf2	equ	0xFDF
  3591                           postinc2	equ	0xFDE
  3592                           postdec2	equ	0xFDD
  3593                           plusw2	equ	0xFDB
  3594                           fsr2h	equ	0xFDA
  3595                           fsr2l	equ	0xFD9
  3596                           status	equ	0xFD8
  3597                           
  3598 ;; *************** function _SetBaudRate *****************
  3599 ;; Defined at:
  3600 ;;		line 105 in file "uart.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;  uart            2   20[BANK0 ] PTR struct .
  3603 ;;		 -> uart(25), 
  3604 ;;  rate            4   22[BANK0 ] long 
  3605 ;;  osc             4   26[BANK0 ] long 
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;  brg16           1   33[BANK0 ] unsigned char 
  3608 ;;  l               1   32[BANK0 ] unsigned char 
  3609 ;;  h               1   31[BANK0 ] unsigned char 
  3610 ;;  o               1   30[BANK0 ] unsigned char 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      unsigned char 
  3613 ;; Registers used:
  3614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3620 ;;      Params:         0      10       0       0       0       0       0
  3621 ;;      Locals:         0       4       0       0       0       0       0
  3622 ;;      Temps:          0       0       0       0       0       0       0
  3623 ;;      Totals:         0      14       0       0       0       0       0
  3624 ;;Total ram usage:       14 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    4
  3627 ;; This function calls:
  3628 ;;		_GetBaudRateConfig
  3629 ;; This function is called by:
  3630 ;;		_uartInit
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text18
  3635  0010B6                     __ptext18:
  3636                           	opt stack 0
  3637  0010B6                     _SetBaudRate:
  3638                           	opt stack 24
  3639                           
  3640                           ;uart.c: 107: char brg16;
  3641                           ;uart.c: 108: char h;
  3642                           ;uart.c: 109: char l;
  3643                           ;uart.c: 110: char o;
  3644                           ;uart.c: 111: o=GetBaudRateConfig(rate,osc,&brg16,&h,&l);
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;incstack = 0
  3648  0010B6  C076  F060         	movff	SetBaudRate@rate,GetBaudRateConfig@rate
  3649  0010BA  C077  F061         	movff	SetBaudRate@rate+1,GetBaudRateConfig@rate+1
  3650  0010BE  C078  F062         	movff	SetBaudRate@rate+2,GetBaudRateConfig@rate+2
  3651  0010C2  C079  F063         	movff	SetBaudRate@rate+3,GetBaudRateConfig@rate+3
  3652  0010C6  C07A  F064         	movff	SetBaudRate@osc,GetBaudRateConfig@osc
  3653  0010CA  C07B  F065         	movff	SetBaudRate@osc+1,GetBaudRateConfig@osc+1
  3654  0010CE  C07C  F066         	movff	SetBaudRate@osc+2,GetBaudRateConfig@osc+2
  3655  0010D2  C07D  F067         	movff	SetBaudRate@osc+3,GetBaudRateConfig@osc+3
  3656  0010D6  0E81               	movlw	low SetBaudRate@brg16
  3657  0010D8  0100               	movlb	0	; () banked
  3658  0010DA  6F68               	movwf	GetBaudRateConfig@setBRG16& (0+255),b
  3659  0010DC  0E00               	movlw	high SetBaudRate@brg16
  3660  0010DE  0100               	movlb	0	; () banked
  3661  0010E0  6F69               	movwf	(GetBaudRateConfig@setBRG16+1)& (0+255),b
  3662  0010E2  0E7F               	movlw	low SetBaudRate@h
  3663  0010E4  0100               	movlb	0	; () banked
  3664  0010E6  6F6A               	movwf	GetBaudRateConfig@brgh& (0+255),b
  3665  0010E8  0E00               	movlw	high SetBaudRate@h
  3666  0010EA  0100               	movlb	0	; () banked
  3667  0010EC  6F6B               	movwf	(GetBaudRateConfig@brgh+1)& (0+255),b
  3668  0010EE  0E80               	movlw	low SetBaudRate@l
  3669  0010F0  0100               	movlb	0	; () banked
  3670  0010F2  6F6C               	movwf	GetBaudRateConfig@brgl& (0+255),b
  3671  0010F4  0E00               	movlw	high SetBaudRate@l
  3672  0010F6  0100               	movlb	0	; () banked
  3673  0010F8  6F6D               	movwf	(GetBaudRateConfig@brgl+1)& (0+255),b
  3674  0010FA  EC2E  F003         	call	_GetBaudRateConfig	;wreg free
  3675  0010FE  0100               	movlb	0	; () banked
  3676  001100  6F7E               	movwf	SetBaudRate@o& (0+255),b
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;uart.c: 112: if (o==0) return 0;
  3680  001102  0100               	movlb	0	; () banked
  3681  001104  517E               	movf	SetBaudRate@o& (0+255),w,b
  3682  001106  0100               	movlb	0	; () banked
  3683  001108  B4D8               	btfsc	status,2,c
  3684  00110A  0012               	return	
  3685  00110C  D016               	goto	l3704
  3686  00110E                     l319:
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;uart.c: 117: BAUDCON1bits.BRG16=brg16;
  3690  00110E  0100               	movlb	0	; () banked
  3691  001110  B181               	btfsc	SetBaudRate@brg16& (0+255),0,b
  3692  001112  D002               	bra	u1565
  3693  001114  96B8               	bcf	4024,3,c	;volatile
  3694  001116  D001               	bra	u1566
  3695  001118                     u1565:
  3696  001118  86B8               	bsf	4024,3,c	;volatile
  3697  00111A                     u1566:
  3698                           
  3699                           ;uart.c: 118: SPBRGH1=h;
  3700  00111A  C07F  FFB0         	movff	SetBaudRate@h,4016	;volatile
  3701                           
  3702                           ;uart.c: 119: SPBRG1=l;
  3703  00111E  C080  FFAF         	movff	SetBaudRate@l,4015	;volatile
  3704                           
  3705                           ;uart.c: 120: break;
  3706  001122  0012               	return	
  3707  001124                     l321:
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;uart.c: 122: BAUDCON2bits.BRG16=brg16;
  3711  001124  0100               	movlb	0	; () banked
  3712  001126  B181               	btfsc	SetBaudRate@brg16& (0+255),0,b
  3713  001128  D002               	bra	u1575
  3714  00112A  9670               	bcf	3952,3,c	;volatile
  3715  00112C  D001               	bra	u1576
  3716  00112E                     u1575:
  3717  00112E  8670               	bsf	3952,3,c	;volatile
  3718  001130                     u1576:
  3719                           
  3720                           ;uart.c: 123: SPBRGH2=h;
  3721  001130  C07F  FF76         	movff	SetBaudRate@h,3958	;volatile
  3722                           
  3723                           ;uart.c: 124: SPBRG2=l;
  3724  001134  C080  FF75         	movff	SetBaudRate@l,3957	;volatile
  3725                           
  3726                           ;uart.c: 126: }
  3727                           
  3728                           ;uart.c: 125: break;
  3729  001138  0012               	return	
  3730  00113A                     l3704:
  3731  00113A  0100               	movlb	0	; () banked
  3732  00113C  EE20 F013          	lfsr	2,19
  3733  001140  5174               	movf	SetBaudRate@uart& (0+255),w,b
  3734  001142  26D9               	addwf	fsr2l,f,c
  3735  001144  5175               	movf	(SetBaudRate@uart+1)& (0+255),w,b
  3736  001146  22DA               	addwfc	fsr2h,f,c
  3737  001148  50DF               	movf	indf2,w,c
  3738                           
  3739                           ; Switch size 1, requested type "space"
  3740                           ; Number of cases is 2, Range of values is 1 to 2
  3741                           ; switch strategies available:
  3742                           ; Name         Instructions Cycles
  3743                           ; simple_byte            7     4 (average)
  3744                           ;	Chosen strategy is simple_byte
  3745  00114A  0A01               	xorlw	1	; case 1
  3746  00114C  B4D8               	btfsc	status,2,c
  3747  00114E  D7DF               	goto	l319
  3748  001150  0A03               	xorlw	3	; case 2
  3749  001152  A4D8               	btfss	status,2,c
  3750  001154  0012               	return	
  3751  001156  D7E6               	goto	l321
  3752  001158                     __end_of_SetBaudRate:
  3753                           	opt stack 0
  3754                           tblptru	equ	0xFF8
  3755                           prodh	equ	0xFF4
  3756                           prodl	equ	0xFF3
  3757                           postinc0	equ	0xFEE
  3758                           wreg	equ	0xFE8
  3759                           indf1	equ	0xFE7
  3760                           postinc1	equ	0xFE6
  3761                           postdec1	equ	0xFE5
  3762                           fsr1h	equ	0xFE2
  3763                           fsr1l	equ	0xFE1
  3764                           indf2	equ	0xFDF
  3765                           postinc2	equ	0xFDE
  3766                           postdec2	equ	0xFDD
  3767                           plusw2	equ	0xFDB
  3768                           fsr2h	equ	0xFDA
  3769                           fsr2l	equ	0xFD9
  3770                           status	equ	0xFD8
  3771                           
  3772 ;; *************** function _GetBaudRateConfig *****************
  3773 ;; Defined at:
  3774 ;;		line 64 in file "uart.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  rate            4    0[BANK0 ] long 
  3777 ;;  osc             4    4[BANK0 ] long 
  3778 ;;  setBRG16        2    8[BANK0 ] PTR unsigned char 
  3779 ;;		 -> SetBaudRate@brg16(1), 
  3780 ;;  brgh            2   10[BANK0 ] PTR unsigned char 
  3781 ;;		 -> SetBaudRate@h(1), 
  3782 ;;  brgl            2   12[BANK0 ] PTR unsigned char 
  3783 ;;		 -> SetBaudRate@l(1), 
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;  brg             2   18[BANK0 ] int 
  3786 ;; Return value:  Size  Location     Type
  3787 ;;                  1    wreg      unsigned char 
  3788 ;; Registers used:
  3789 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3790 ;; Tracked objects:
  3791 ;;		On entry : 0/0
  3792 ;;		On exit  : 0/0
  3793 ;;		Unchanged: 0/0
  3794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3795 ;;      Params:         0      14       0       0       0       0       0
  3796 ;;      Locals:         0       2       0       0       0       0       0
  3797 ;;      Temps:          0       4       0       0       0       0       0
  3798 ;;      Totals:         0      20       0       0       0       0       0
  3799 ;;Total ram usage:       20 bytes
  3800 ;; Hardware stack levels used:    1
  3801 ;; Hardware stack levels required when called:    3
  3802 ;; This function calls:
  3803 ;;		Nothing
  3804 ;; This function is called by:
  3805 ;;		_SetBaudRate
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           	psect	text19
  3810  00065C                     __ptext19:
  3811                           	opt stack 0
  3812  00065C                     _GetBaudRateConfig:
  3813                           	opt stack 24
  3814                           
  3815                           ;uart.c: 66: int brg=0;
  3816                           
  3817                           ;incstack = 0
  3818  00065C  0E00               	movlw	0
  3819  00065E  0100               	movlb	0	; () banked
  3820  000660  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3821  000662  0E00               	movlw	0
  3822  000664  6F72               	movwf	GetBaudRateConfig@brg& (0+255),b
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;uart.c: 68: if (osc==64000000)
  3826  000666  0E90               	movlw	144
  3827  000668  0100               	movlb	0	; () banked
  3828  00066A  1965               	xorwf	(GetBaudRateConfig@osc+1)& (0+255),w,b
  3829  00066C  E10A               	bnz	u1491
  3830  00066E  0ED0               	movlw	208
  3831  000670  0100               	movlb	0	; () banked
  3832  000672  1966               	xorwf	(GetBaudRateConfig@osc+2)& (0+255),w,b
  3833  000674  E106               	bnz	u1491
  3834  000676  0E03               	movlw	3
  3835  000678  0100               	movlb	0	; () banked
  3836  00067A  1967               	xorwf	(GetBaudRateConfig@osc+3)& (0+255),w,b
  3837  00067C  0100               	movlb	0	; () banked
  3838  00067E  1164               	iorwf	GetBaudRateConfig@osc& (0+255),w,b
  3839  000680  A4D8               	btfss	status,2,c
  3840  000682                     u1491:
  3841  000682  D095               	goto	l3518
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;uart.c: 69: {
  3845                           ;uart.c: 70: *setBRG16=1;
  3846  000684  C068  FFD9         	movff	GetBaudRateConfig@setBRG16,fsr2l
  3847  000688  C069  FFDA         	movff	GetBaudRateConfig@setBRG16+1,fsr2h
  3848  00068C  0E01               	movlw	1
  3849  00068E  6EDF               	movwf	indf2,c
  3850                           
  3851                           ;uart.c: 71: switch (rate)
  3852  000690  D02A               	goto	l3516
  3853  000692                     l3494:
  3854                           
  3855                           ; BSR set to: 0
  3856  000692  0E34               	movlw	52
  3857  000694  0100               	movlb	0	; () banked
  3858  000696  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3859  000698  0E14               	movlw	20
  3860  00069A  D0AD               	goto	L17
  3861  00069C                     l3496:
  3862                           
  3863                           ; BSR set to: 0
  3864  00069C  0E0D               	movlw	13
  3865  00069E  0100               	movlb	0	; () banked
  3866  0006A0  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3867  0006A2  0E04               	movlw	4
  3868  0006A4  D0A8               	goto	L17
  3869  0006A6                     l3498:
  3870                           
  3871                           ; BSR set to: 0
  3872  0006A6  0E06               	movlw	6
  3873  0006A8  0100               	movlb	0	; () banked
  3874  0006AA  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3875  0006AC  0E82               	movlw	130
  3876  0006AE  D0A3               	goto	L17
  3877  0006B0                     l3500:
  3878                           
  3879                           ; BSR set to: 0
  3880  0006B0  0E01               	movlw	1
  3881  0006B2  0100               	movlb	0	; () banked
  3882  0006B4  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3883  0006B6  0EA0               	movlw	160
  3884  0006B8  D09E               	goto	L17
  3885  0006BA                     l3502:
  3886                           
  3887                           ; BSR set to: 0
  3888  0006BA  0E01               	movlw	1
  3889  0006BC  0100               	movlb	0	; () banked
  3890  0006BE  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3891  0006C0  0E7F               	movlw	127
  3892  0006C2  D099               	goto	L17
  3893  0006C4                     l3504:
  3894                           
  3895                           ; BSR set to: 0
  3896  0006C4  0E00               	movlw	0
  3897  0006C6  0100               	movlb	0	; () banked
  3898  0006C8  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3899  0006CA  0ECF               	movlw	207
  3900  0006CC  D094               	goto	L17
  3901  0006CE                     l3506:
  3902                           
  3903                           ; BSR set to: 0
  3904  0006CE  0E00               	movlw	0
  3905  0006D0  0100               	movlb	0	; () banked
  3906  0006D2  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3907  0006D4  0E44               	movlw	68
  3908  0006D6  D08F               	goto	L17
  3909  0006D8                     l3508:
  3910                           
  3911                           ; BSR set to: 0
  3912  0006D8  0E00               	movlw	0
  3913  0006DA  0100               	movlb	0	; () banked
  3914  0006DC  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3915  0006DE  0E22               	movlw	34
  3916  0006E0  D08A               	goto	L17
  3917  0006E2                     l3510:
  3918                           
  3919                           ; BSR set to: 0
  3920  0006E2  0E00               	movlw	0
  3921                           
  3922                           ; BSR set to: 0
  3923  0006E4  0012               	return	
  3924  0006E6                     l3516:
  3925                           
  3926                           ; BSR set to: 0
  3927  0006E6  C060  F06E         	movff	GetBaudRateConfig@rate,??_GetBaudRateConfig
  3928  0006EA  C061  F06F         	movff	GetBaudRateConfig@rate+1,??_GetBaudRateConfig+1
  3929  0006EE  C062  F070         	movff	GetBaudRateConfig@rate+2,??_GetBaudRateConfig+2
  3930  0006F2  C063  F071         	movff	GetBaudRateConfig@rate+3,??_GetBaudRateConfig+3
  3931                           
  3932                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  3933                           ; Switch size 1, requested type "space"
  3934                           ; Number of cases is 1, Range of values is 0 to 0
  3935                           ; switch strategies available:
  3936                           ; Name         Instructions Cycles
  3937                           ; simple_byte            4     3 (average)
  3938                           ;	Chosen strategy is simple_byte
  3939  0006F6  0100               	movlb	0	; () banked
  3940  0006F8  5171               	movf	(??_GetBaudRateConfig+3)& (0+255),w,b
  3941  0006FA  0A00               	xorlw	0	; case 0
  3942  0006FC  B4D8               	btfsc	status,2,c
  3943  0006FE  D04E               	goto	l4718
  3944  000700  D7F0               	goto	l3510
  3945  000702                     l4714:
  3946                           
  3947                           ; BSR set to: 0
  3948                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 7 sub-sw
      +                          itches
  3949                           ; Switch size 1, requested type "space"
  3950                           ; Number of cases is 7, Range of values is 1 to 225
  3951                           ; switch strategies available:
  3952                           ; Name         Instructions Cycles
  3953                           ; simple_byte           22    12 (average)
  3954                           ;	Chosen strategy is simple_byte
  3955  000702  0100               	movlb	0	; () banked
  3956  000704  516F               	movf	(??_GetBaudRateConfig+1)& (0+255),w,b
  3957  000706  0A01               	xorlw	1	; case 1
  3958  000708  B4D8               	btfsc	status,2,c
  3959  00070A  D013               	goto	l4720
  3960  00070C  0A05               	xorlw	5	; case 4
  3961  00070E  B4D8               	btfsc	status,2,c
  3962  000710  D016               	goto	l4722
  3963  000712  0A0D               	xorlw	13	; case 9
  3964  000714  B4D8               	btfsc	status,2,c
  3965  000716  D019               	goto	l4724
  3966  000718  0A2C               	xorlw	44	; case 37
  3967  00071A  B4D8               	btfsc	status,2,c
  3968  00071C  D01C               	goto	l4726
  3969  00071E  0A0D               	xorlw	13	; case 40
  3970  000720  B4D8               	btfsc	status,2,c
  3971  000722  D01F               	goto	l4728
  3972  000724  0A63               	xorlw	99	; case 75
  3973  000726  B4D8               	btfsc	status,2,c
  3974  000728  D022               	goto	l4730
  3975  00072A  0AAA               	xorlw	170	; case 225
  3976  00072C  B4D8               	btfsc	status,2,c
  3977  00072E  D025               	goto	l4732
  3978  000730  D7D8               	goto	l3510
  3979  000732                     l4720:
  3980                           
  3981                           ; BSR set to: 0
  3982                           ; Switch size 1, requested type "space"
  3983                           ; Number of cases is 1, Range of values is 44 to 44
  3984                           ; switch strategies available:
  3985                           ; Name         Instructions Cycles
  3986                           ; simple_byte            4     3 (average)
  3987                           ;	Chosen strategy is simple_byte
  3988  000732  0100               	movlb	0	; () banked
  3989  000734  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  3990  000736  0A2C               	xorlw	44	; case 44
  3991  000738  B4D8               	btfsc	status,2,c
  3992  00073A  D7AB               	goto	l3494
  3993  00073C  D7D2               	goto	l3510
  3994  00073E                     l4722:
  3995                           
  3996                           ; BSR set to: 0
  3997                           ; Switch size 1, requested type "space"
  3998                           ; Number of cases is 1, Range of values is 176 to 176
  3999                           ; switch strategies available:
  4000                           ; Name         Instructions Cycles
  4001                           ; simple_byte            4     3 (average)
  4002                           ;	Chosen strategy is simple_byte
  4003  00073E  0100               	movlb	0	; () banked
  4004  000740  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4005  000742  0AB0               	xorlw	176	; case 176
  4006  000744  B4D8               	btfsc	status,2,c
  4007  000746  D7AA               	goto	l3496
  4008  000748  D7CC               	goto	l3510
  4009  00074A                     l4724:
  4010                           
  4011                           ; BSR set to: 0
  4012                           ; Switch size 1, requested type "space"
  4013                           ; Number of cases is 1, Range of values is 96 to 96
  4014                           ; switch strategies available:
  4015                           ; Name         Instructions Cycles
  4016                           ; simple_byte            4     3 (average)
  4017                           ;	Chosen strategy is simple_byte
  4018  00074A  0100               	movlb	0	; () banked
  4019  00074C  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4020  00074E  0A60               	xorlw	96	; case 96
  4021  000750  B4D8               	btfsc	status,2,c
  4022  000752  D7A9               	goto	l3498
  4023  000754  D7C6               	goto	l3510
  4024  000756                     l4726:
  4025                           
  4026                           ; BSR set to: 0
  4027                           ; Switch size 1, requested type "space"
  4028                           ; Number of cases is 1, Range of values is 128 to 128
  4029                           ; switch strategies available:
  4030                           ; Name         Instructions Cycles
  4031                           ; simple_byte            4     3 (average)
  4032                           ;	Chosen strategy is simple_byte
  4033  000756  0100               	movlb	0	; () banked
  4034  000758  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4035  00075A  0A80               	xorlw	128	; case 128
  4036  00075C  B4D8               	btfsc	status,2,c
  4037  00075E  D7A8               	goto	l3500
  4038  000760  D7C0               	goto	l3510
  4039  000762                     l4728:
  4040                           
  4041                           ; BSR set to: 0
  4042                           ; Switch size 1, requested type "space"
  4043                           ; Number of cases is 1, Range of values is 177 to 177
  4044                           ; switch strategies available:
  4045                           ; Name         Instructions Cycles
  4046                           ; simple_byte            4     3 (average)
  4047                           ;	Chosen strategy is simple_byte
  4048  000762  0100               	movlb	0	; () banked
  4049  000764  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4050  000766  0AB1               	xorlw	177	; case 177
  4051  000768  B4D8               	btfsc	status,2,c
  4052  00076A  D7A7               	goto	l3502
  4053  00076C  D7BA               	goto	l3510
  4054  00076E                     l4730:
  4055                           
  4056                           ; BSR set to: 0
  4057                           ; Switch size 1, requested type "space"
  4058                           ; Number of cases is 1, Range of values is 0 to 0
  4059                           ; switch strategies available:
  4060                           ; Name         Instructions Cycles
  4061                           ; simple_byte            4     3 (average)
  4062                           ;	Chosen strategy is simple_byte
  4063  00076E  0100               	movlb	0	; () banked
  4064  000770  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4065  000772  0A00               	xorlw	0	; case 0
  4066  000774  B4D8               	btfsc	status,2,c
  4067  000776  D7A6               	goto	l3504
  4068  000778  D7B4               	goto	l3510
  4069  00077A                     l4732:
  4070                           
  4071                           ; BSR set to: 0
  4072                           ; Switch size 1, requested type "space"
  4073                           ; Number of cases is 1, Range of values is 0 to 0
  4074                           ; switch strategies available:
  4075                           ; Name         Instructions Cycles
  4076                           ; simple_byte            4     3 (average)
  4077                           ;	Chosen strategy is simple_byte
  4078  00077A  0100               	movlb	0	; () banked
  4079  00077C  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4080  00077E  0A00               	xorlw	0	; case 0
  4081  000780  B4D8               	btfsc	status,2,c
  4082  000782  D7A5               	goto	l3506
  4083  000784  D7AE               	goto	l3510
  4084  000786                     l4716:
  4085                           
  4086                           ; BSR set to: 0
  4087                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4088                           ; Switch size 1, requested type "space"
  4089                           ; Number of cases is 1, Range of values is 194 to 194
  4090                           ; switch strategies available:
  4091                           ; Name         Instructions Cycles
  4092                           ; simple_byte            4     3 (average)
  4093                           ;	Chosen strategy is simple_byte
  4094  000786  0100               	movlb	0	; () banked
  4095  000788  516F               	movf	(??_GetBaudRateConfig+1)& (0+255),w,b
  4096  00078A  0AC2               	xorlw	194	; case 194
  4097  00078C  A4D8               	btfss	status,2,c
  4098  00078E  D7A9               	goto	l3510
  4099                           
  4100                           ; BSR set to: 0
  4101                           ; Switch size 1, requested type "space"
  4102                           ; Number of cases is 1, Range of values is 0 to 0
  4103                           ; switch strategies available:
  4104                           ; Name         Instructions Cycles
  4105                           ; simple_byte            4     3 (average)
  4106                           ;	Chosen strategy is simple_byte
  4107  000790  0100               	movlb	0	; () banked
  4108  000792  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4109  000794  0A00               	xorlw	0	; case 0
  4110  000796  B4D8               	btfsc	status,2,c
  4111  000798  D79F               	goto	l3508
  4112  00079A  D7A3               	goto	l3510
  4113  00079C                     l4718:
  4114                           
  4115                           ; BSR set to: 0
  4116                           ; Switch size 1, requested type "space"
  4117                           ; Number of cases is 2, Range of values is 0 to 1
  4118                           ; switch strategies available:
  4119                           ; Name         Instructions Cycles
  4120                           ; simple_byte            7     4 (average)
  4121                           ;	Chosen strategy is simple_byte
  4122  00079C  0100               	movlb	0	; () banked
  4123  00079E  5170               	movf	(??_GetBaudRateConfig+2)& (0+255),w,b
  4124  0007A0  0A00               	xorlw	0	; case 0
  4125  0007A2  B4D8               	btfsc	status,2,c
  4126  0007A4  D7AE               	goto	l4714
  4127  0007A6  0A01               	xorlw	1	; case 1
  4128  0007A8  B4D8               	btfsc	status,2,c
  4129  0007AA  D7ED               	goto	l4716
  4130  0007AC  D79A               	goto	l3510
  4131  0007AE                     l3518:
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;uart.c: 84: else if (osc==1000000)
  4135  0007AE  0E40               	movlw	64
  4136  0007B0  0100               	movlb	0	; () banked
  4137  0007B2  1964               	xorwf	GetBaudRateConfig@osc& (0+255),w,b
  4138  0007B4  E196               	bnz	l3510
  4139  0007B6  0E42               	movlw	66
  4140  0007B8  0100               	movlb	0	; () banked
  4141  0007BA  1965               	xorwf	(GetBaudRateConfig@osc+1)& (0+255),w,b
  4142  0007BC  E192               	bnz	l3510
  4143  0007BE  0E0F               	movlw	15
  4144  0007C0  0100               	movlb	0	; () banked
  4145  0007C2  1966               	xorwf	(GetBaudRateConfig@osc+2)& (0+255),w,b
  4146  0007C4  0100               	movlb	0	; () banked
  4147  0007C6  1167               	iorwf	(GetBaudRateConfig@osc+3)& (0+255),w,b
  4148  0007C8  A4D8               	btfss	status,2,c
  4149  0007CA  D78B               	goto	l3510
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;uart.c: 85: {
  4153                           ;uart.c: 86: *setBRG16=1;
  4154  0007CC  C068  FFD9         	movff	GetBaudRateConfig@setBRG16,fsr2l
  4155  0007D0  C069  FFDA         	movff	GetBaudRateConfig@setBRG16+1,fsr2h
  4156  0007D4  0E01               	movlw	1
  4157  0007D6  6EDF               	movwf	indf2,c
  4158                           
  4159                           ;uart.c: 87: switch (rate)
  4160  0007D8  D010               	goto	l3536
  4161  0007DA                     l3524:
  4162                           
  4163                           ; BSR set to: 0
  4164  0007DA  0E00               	movlw	0
  4165  0007DC  0100               	movlb	0	; () banked
  4166  0007DE  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  4167  0007E0  0E33               	movlw	51
  4168  0007E2  D009               	goto	L17
  4169  0007E4                     l3526:
  4170                           
  4171                           ; BSR set to: 0
  4172  0007E4  0E00               	movlw	0
  4173  0007E6  0100               	movlb	0	; () banked
  4174  0007E8  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  4175  0007EA  0E19               	movlw	25
  4176  0007EC  D004               	goto	L17
  4177  0007EE                     l3528:
  4178                           
  4179                           ; BSR set to: 0
  4180  0007EE  0E00               	movlw	0
  4181  0007F0  0100               	movlb	0	; () banked
  4182  0007F2  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  4183  0007F4  0E05               	movlw	5
  4184  0007F6                     L17:
  4185  0007F6  6F72               	movwf	GetBaudRateConfig@brg& (0+255),b
  4186  0007F8  D039               	goto	l3542
  4187  0007FA                     l3536:
  4188                           
  4189                           ; BSR set to: 0
  4190  0007FA  C060  F06E         	movff	GetBaudRateConfig@rate,??_GetBaudRateConfig
  4191  0007FE  C061  F06F         	movff	GetBaudRateConfig@rate+1,??_GetBaudRateConfig+1
  4192  000802  C062  F070         	movff	GetBaudRateConfig@rate+2,??_GetBaudRateConfig+2
  4193  000806  C063  F071         	movff	GetBaudRateConfig@rate+3,??_GetBaudRateConfig+3
  4194                           
  4195                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4196                           ; Switch size 1, requested type "space"
  4197                           ; Number of cases is 1, Range of values is 0 to 0
  4198                           ; switch strategies available:
  4199                           ; Name         Instructions Cycles
  4200                           ; simple_byte            4     3 (average)
  4201                           ;	Chosen strategy is simple_byte
  4202  00080A  0100               	movlb	0	; () banked
  4203  00080C  5171               	movf	(??_GetBaudRateConfig+3)& (0+255),w,b
  4204  00080E  0A00               	xorlw	0	; case 0
  4205  000810  B4D8               	btfsc	status,2,c
  4206  000812  D026               	goto	l4738
  4207  000814  D766               	goto	l3510
  4208  000816                     l4736:
  4209                           
  4210                           ; BSR set to: 0
  4211                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  4212                           ; Switch size 1, requested type "space"
  4213                           ; Number of cases is 4, Range of values is 1 to 40
  4214                           ; switch strategies available:
  4215                           ; Name         Instructions Cycles
  4216                           ; simple_byte           13     7 (average)
  4217                           ;	Chosen strategy is simple_byte
  4218  000816  0100               	movlb	0	; () banked
  4219  000818  516F               	movf	(??_GetBaudRateConfig+1)& (0+255),w,b
  4220  00081A  0A01               	xorlw	1	; case 1
  4221  00081C  B4D8               	btfsc	status,2,c
  4222  00081E  D00A               	goto	l4740
  4223  000820  0A05               	xorlw	5	; case 4
  4224  000822  B4D8               	btfsc	status,2,c
  4225  000824  D00B               	goto	l4742
  4226  000826  0A0D               	xorlw	13	; case 9
  4227  000828  B4D8               	btfsc	status,2,c
  4228  00082A  D00E               	goto	l4744
  4229  00082C  0A21               	xorlw	33	; case 40
  4230  00082E  B4D8               	btfsc	status,2,c
  4231  000830  D011               	goto	l4746
  4232  000832  D757               	goto	l3510
  4233  000834                     l4740:
  4234                           
  4235                           ; BSR set to: 0
  4236                           ; Switch size 1, requested type "space"
  4237                           ; Number of cases is 1, Range of values is 44 to 44
  4238                           ; switch strategies available:
  4239                           ; Name         Instructions Cycles
  4240                           ; simple_byte            4     3 (average)
  4241                           ;	Chosen strategy is simple_byte
  4242  000834  0100               	movlb	0	; () banked
  4243  000836  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4244  000838  0A2C               	xorlw	44	; case 44
  4245  00083A  D79C               	goto	L18
  4246  00083C                     l4742:
  4247                           
  4248                           ; BSR set to: 0
  4249                           ; Switch size 1, requested type "space"
  4250                           ; Number of cases is 1, Range of values is 176 to 176
  4251                           ; switch strategies available:
  4252                           ; Name         Instructions Cycles
  4253                           ; simple_byte            4     3 (average)
  4254                           ;	Chosen strategy is simple_byte
  4255  00083C  0100               	movlb	0	; () banked
  4256  00083E  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4257  000840  0AB0               	xorlw	176	; case 176
  4258  000842  B4D8               	btfsc	status,2,c
  4259  000844  D7CA               	goto	l3524
  4260  000846  D74D               	goto	l3510
  4261  000848                     l4744:
  4262                           
  4263                           ; BSR set to: 0
  4264                           ; Switch size 1, requested type "space"
  4265                           ; Number of cases is 1, Range of values is 96 to 96
  4266                           ; switch strategies available:
  4267                           ; Name         Instructions Cycles
  4268                           ; simple_byte            4     3 (average)
  4269                           ;	Chosen strategy is simple_byte
  4270  000848  0100               	movlb	0	; () banked
  4271  00084A  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4272  00084C  0A60               	xorlw	96	; case 96
  4273  00084E  B4D8               	btfsc	status,2,c
  4274  000850  D7C9               	goto	l3526
  4275  000852  D747               	goto	l3510
  4276  000854                     l4746:
  4277                           
  4278                           ; BSR set to: 0
  4279                           ; Switch size 1, requested type "space"
  4280                           ; Number of cases is 1, Range of values is 177 to 177
  4281                           ; switch strategies available:
  4282                           ; Name         Instructions Cycles
  4283                           ; simple_byte            4     3 (average)
  4284                           ;	Chosen strategy is simple_byte
  4285  000854  0100               	movlb	0	; () banked
  4286  000856  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4287  000858  0AB1               	xorlw	177	; case 177
  4288  00085A  B4D8               	btfsc	status,2,c
  4289  00085C  D7C8               	goto	l3528
  4290  00085E  D741               	goto	l3510
  4291  000860                     l4738:
  4292                           
  4293                           ; BSR set to: 0
  4294                           ; Switch size 1, requested type "space"
  4295                           ; Number of cases is 1, Range of values is 0 to 0
  4296                           ; switch strategies available:
  4297                           ; Name         Instructions Cycles
  4298                           ; simple_byte            4     3 (average)
  4299                           ;	Chosen strategy is simple_byte
  4300  000860  0100               	movlb	0	; () banked
  4301  000862  5170               	movf	(??_GetBaudRateConfig+2)& (0+255),w,b
  4302  000864  0A00               	xorlw	0	; case 0
  4303  000866  B4D8               	btfsc	status,2,c
  4304  000868  D7D6               	goto	l4736
  4305  00086A  D73B               	goto	l3510
  4306  00086C                     l3542:
  4307                           
  4308                           ; BSR set to: 0
  4309                           ;uart.c: 99: }
  4310                           ;uart.c: 100: *brgh=(char)((brg >> 8) & 0xff);
  4311  00086C  0100               	movlb	0	; () banked
  4312  00086E  5173               	movf	(GetBaudRateConfig@brg+1)& (0+255),w,b
  4313  000870  C06A  FFD9         	movff	GetBaudRateConfig@brgh,fsr2l
  4314  000874  C06B  FFDA         	movff	GetBaudRateConfig@brgh+1,fsr2h
  4315  000878  6EDF               	movwf	indf2,c
  4316                           
  4317                           ; BSR set to: 0
  4318                           ;uart.c: 101: *brgl=(char)(brg & 0xff);
  4319  00087A  C06C  FFD9         	movff	GetBaudRateConfig@brgl,fsr2l
  4320  00087E  C06D  FFDA         	movff	GetBaudRateConfig@brgl+1,fsr2h
  4321  000882  C072  FFDF         	movff	GetBaudRateConfig@brg,indf2
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;uart.c: 102: return 1;
  4325  000886  0E01               	movlw	1
  4326  000888  0012               	return	
  4327  00088A                     __end_of_GetBaudRateConfig:
  4328                           	opt stack 0
  4329                           tblptru	equ	0xFF8
  4330                           prodh	equ	0xFF4
  4331                           prodl	equ	0xFF3
  4332                           postinc0	equ	0xFEE
  4333                           wreg	equ	0xFE8
  4334                           indf1	equ	0xFE7
  4335                           postinc1	equ	0xFE6
  4336                           postdec1	equ	0xFE5
  4337                           fsr1h	equ	0xFE2
  4338                           fsr1l	equ	0xFE1
  4339                           indf2	equ	0xFDF
  4340                           postinc2	equ	0xFDE
  4341                           postdec2	equ	0xFDD
  4342                           plusw2	equ	0xFDB
  4343                           fsr2h	equ	0xFDA
  4344                           fsr2l	equ	0xFD9
  4345                           status	equ	0xFD8
  4346                           
  4347 ;; *************** function _uartEnableSend *****************
  4348 ;; Defined at:
  4349 ;;		line 139 in file "uart.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;  uart            2    0[BANK0 ] PTR struct .
  4352 ;;		 -> uart(25), 
  4353 ;;  onoff           1    2[BANK0 ] unsigned char 
  4354 ;; Auto vars:     Size  Location     Type
  4355 ;;		None
  4356 ;; Return value:  Size  Location     Type
  4357 ;;                  1    wreg      void 
  4358 ;; Registers used:
  4359 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4360 ;; Tracked objects:
  4361 ;;		On entry : 0/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4365 ;;      Params:         0       3       0       0       0       0       0
  4366 ;;      Locals:         0       0       0       0       0       0       0
  4367 ;;      Temps:          1       0       0       0       0       0       0
  4368 ;;      Totals:         1       3       0       0       0       0       0
  4369 ;;Total ram usage:        4 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; Hardware stack levels required when called:    3
  4372 ;; This function calls:
  4373 ;;		Nothing
  4374 ;; This function is called by:
  4375 ;;		_InitUart
  4376 ;;		_uartSendByte
  4377 ;;		_uartSendBuf
  4378 ;;		_uartSendString
  4379 ;;		_uartSendString0
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           	psect	text20
  4384  0013A6                     __ptext20:
  4385                           	opt stack 0
  4386  0013A6                     _uartEnableSend:
  4387                           	opt stack 26
  4388                           
  4389                           ;uart.c: 141: switch (uart->number)
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;incstack = 0
  4393  0013A6  D016               	goto	l3840
  4394  0013A8                     l3834:
  4395  0013A8  C062  F026         	movff	uartEnableSend@onoff,??_uartEnableSend
  4396  0013AC  0E01               	movlw	1
  4397  0013AE  1626               	andwf	??_uartEnableSend,f,c
  4398  0013B0  3A26               	swapf	??_uartEnableSend,f,c
  4399  0013B2  509D               	movf	3997,w,c	;volatile
  4400  0013B4  1826               	xorwf	??_uartEnableSend,w,c
  4401  0013B6  0BEF               	andlw	-17
  4402  0013B8  1826               	xorwf	??_uartEnableSend,w,c
  4403  0013BA  6E9D               	movwf	3997,c	;volatile
  4404  0013BC  0012               	return	
  4405  0013BE                     l3836:
  4406  0013BE  C062  F026         	movff	uartEnableSend@onoff,??_uartEnableSend
  4407  0013C2  0E01               	movlw	1
  4408  0013C4  1626               	andwf	??_uartEnableSend,f,c
  4409  0013C6  3A26               	swapf	??_uartEnableSend,f,c
  4410  0013C8  50A3               	movf	4003,w,c	;volatile
  4411  0013CA  1826               	xorwf	??_uartEnableSend,w,c
  4412  0013CC  0BEF               	andlw	-17
  4413  0013CE  1826               	xorwf	??_uartEnableSend,w,c
  4414  0013D0  6EA3               	movwf	4003,c	;volatile
  4415                           
  4416                           ;uart.c: 145: }
  4417  0013D2  0012               	return	
  4418  0013D4                     l3840:
  4419  0013D4  0100               	movlb	0	; () banked
  4420  0013D6  EE20 F013          	lfsr	2,19
  4421  0013DA  5160               	movf	uartEnableSend@uart& (0+255),w,b
  4422  0013DC  26D9               	addwf	fsr2l,f,c
  4423  0013DE  5161               	movf	(uartEnableSend@uart+1)& (0+255),w,b
  4424  0013E0  22DA               	addwfc	fsr2h,f,c
  4425  0013E2  50DF               	movf	indf2,w,c
  4426                           
  4427                           ; Switch size 1, requested type "space"
  4428                           ; Number of cases is 2, Range of values is 1 to 2
  4429                           ; switch strategies available:
  4430                           ; Name         Instructions Cycles
  4431                           ; simple_byte            7     4 (average)
  4432                           ;	Chosen strategy is simple_byte
  4433  0013E4  0A01               	xorlw	1	; case 1
  4434  0013E6  B4D8               	btfsc	status,2,c
  4435  0013E8  D7DF               	goto	l3834
  4436  0013EA  0A03               	xorlw	3	; case 2
  4437  0013EC  A4D8               	btfss	status,2,c
  4438  0013EE  0012               	return	
  4439  0013F0  D7E6               	goto	l3836
  4440  0013F2                     __end_of_uartEnableSend:
  4441                           	opt stack 0
  4442                           tblptru	equ	0xFF8
  4443                           prodh	equ	0xFF4
  4444                           prodl	equ	0xFF3
  4445                           postinc0	equ	0xFEE
  4446                           wreg	equ	0xFE8
  4447                           indf1	equ	0xFE7
  4448                           postinc1	equ	0xFE6
  4449                           postdec1	equ	0xFE5
  4450                           fsr1h	equ	0xFE2
  4451                           fsr1l	equ	0xFE1
  4452                           indf2	equ	0xFDF
  4453                           postinc2	equ	0xFDE
  4454                           postdec2	equ	0xFDD
  4455                           plusw2	equ	0xFDB
  4456                           fsr2h	equ	0xFDA
  4457                           fsr2l	equ	0xFD9
  4458                           status	equ	0xFD8
  4459                           
  4460 ;; *************** function _uartEnableRecv *****************
  4461 ;; Defined at:
  4462 ;;		line 148 in file "uart.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;  uart            2    0[BANK0 ] PTR struct .
  4465 ;;		 -> uart(25), 
  4466 ;;  onoff           1    2[BANK0 ] unsigned char 
  4467 ;; Auto vars:     Size  Location     Type
  4468 ;;		None
  4469 ;; Return value:  Size  Location     Type
  4470 ;;                  1    wreg      void 
  4471 ;; Registers used:
  4472 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4473 ;; Tracked objects:
  4474 ;;		On entry : 0/0
  4475 ;;		On exit  : 0/0
  4476 ;;		Unchanged: 0/0
  4477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4478 ;;      Params:         0       3       0       0       0       0       0
  4479 ;;      Locals:         0       0       0       0       0       0       0
  4480 ;;      Temps:          1       0       0       0       0       0       0
  4481 ;;      Totals:         1       3       0       0       0       0       0
  4482 ;;Total ram usage:        4 bytes
  4483 ;; Hardware stack levels used:    1
  4484 ;; Hardware stack levels required when called:    3
  4485 ;; This function calls:
  4486 ;;		Nothing
  4487 ;; This function is called by:
  4488 ;;		_InitUart
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           	psect	text21
  4493  001356                     __ptext21:
  4494                           	opt stack 0
  4495  001356                     _uartEnableRecv:
  4496                           	opt stack 26
  4497                           
  4498                           ;uart.c: 150: switch (uart->number)
  4499                           
  4500                           ;incstack = 0
  4501  001356  D018               	goto	l3850
  4502  001358                     l3844:
  4503  001358  C062  F026         	movff	uartEnableRecv@onoff,??_uartEnableRecv
  4504  00135C  0E01               	movlw	1
  4505  00135E  1626               	andwf	??_uartEnableRecv,f,c
  4506  001360  3A26               	swapf	??_uartEnableRecv,f,c
  4507  001362  4626               	rlncf	??_uartEnableRecv,f,c
  4508  001364  509D               	movf	3997,w,c	;volatile
  4509  001366  1826               	xorwf	??_uartEnableRecv,w,c
  4510  001368  0BDF               	andlw	-33
  4511  00136A  1826               	xorwf	??_uartEnableRecv,w,c
  4512  00136C  6E9D               	movwf	3997,c	;volatile
  4513  00136E  0012               	return	
  4514  001370                     l3846:
  4515  001370  C062  F026         	movff	uartEnableRecv@onoff,??_uartEnableRecv
  4516  001374  0E01               	movlw	1
  4517  001376  1626               	andwf	??_uartEnableRecv,f,c
  4518  001378  3A26               	swapf	??_uartEnableRecv,f,c
  4519  00137A  4626               	rlncf	??_uartEnableRecv,f,c
  4520  00137C  50A3               	movf	4003,w,c	;volatile
  4521  00137E  1826               	xorwf	??_uartEnableRecv,w,c
  4522  001380  0BDF               	andlw	-33
  4523  001382  1826               	xorwf	??_uartEnableRecv,w,c
  4524  001384  6EA3               	movwf	4003,c	;volatile
  4525                           
  4526                           ;uart.c: 154: }
  4527  001386  0012               	return	
  4528  001388                     l3850:
  4529  001388  0100               	movlb	0	; () banked
  4530  00138A  EE20 F013          	lfsr	2,19
  4531  00138E  5160               	movf	uartEnableRecv@uart& (0+255),w,b
  4532  001390  26D9               	addwf	fsr2l,f,c
  4533  001392  5161               	movf	(uartEnableRecv@uart+1)& (0+255),w,b
  4534  001394  22DA               	addwfc	fsr2h,f,c
  4535  001396  50DF               	movf	indf2,w,c
  4536                           
  4537                           ; Switch size 1, requested type "space"
  4538                           ; Number of cases is 2, Range of values is 1 to 2
  4539                           ; switch strategies available:
  4540                           ; Name         Instructions Cycles
  4541                           ; simple_byte            7     4 (average)
  4542                           ;	Chosen strategy is simple_byte
  4543  001398  0A01               	xorlw	1	; case 1
  4544  00139A  B4D8               	btfsc	status,2,c
  4545  00139C  D7DD               	goto	l3844
  4546  00139E  0A03               	xorlw	3	; case 2
  4547  0013A0  A4D8               	btfss	status,2,c
  4548  0013A2  0012               	return	
  4549  0013A4  D7E5               	goto	l3846
  4550  0013A6                     __end_of_uartEnableRecv:
  4551                           	opt stack 0
  4552                           tblptru	equ	0xFF8
  4553                           prodh	equ	0xFF4
  4554                           prodl	equ	0xFF3
  4555                           postinc0	equ	0xFEE
  4556                           wreg	equ	0xFE8
  4557                           indf1	equ	0xFE7
  4558                           postinc1	equ	0xFE6
  4559                           postdec1	equ	0xFE5
  4560                           fsr1h	equ	0xFE2
  4561                           fsr1l	equ	0xFE1
  4562                           indf2	equ	0xFDF
  4563                           postinc2	equ	0xFDE
  4564                           postdec2	equ	0xFDD
  4565                           plusw2	equ	0xFDB
  4566                           fsr2h	equ	0xFDA
  4567                           fsr2l	equ	0xFD9
  4568                           status	equ	0xFD8
  4569                           
  4570 ;; *************** function _InitSystem *****************
  4571 ;; Defined at:
  4572 ;;		line 99 in file "main.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;		None
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;		None
  4577 ;; Return value:  Size  Location     Type
  4578 ;;                  1    wreg      void 
  4579 ;; Registers used:
  4580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4581 ;; Tracked objects:
  4582 ;;		On entry : 0/0
  4583 ;;		On exit  : 0/0
  4584 ;;		Unchanged: 0/0
  4585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4586 ;;      Params:         0       0       0       0       0       0       0
  4587 ;;      Locals:         0       0       0       0       0       0       0
  4588 ;;      Temps:          0       0       0       0       0       0       0
  4589 ;;      Totals:         0       0       0       0       0       0       0
  4590 ;;Total ram usage:        0 bytes
  4591 ;; Hardware stack levels used:    1
  4592 ;; Hardware stack levels required when called:    5
  4593 ;; This function calls:
  4594 ;;		_LoadConfigData
  4595 ;;		_SetupInternalOscillator
  4596 ;;		_ledInit
  4597 ;; This function is called by:
  4598 ;;		_main
  4599 ;; This function uses a non-reentrant model
  4600 ;;
  4601                           
  4602                           	psect	text22
  4603  00100C                     __ptext22:
  4604                           	opt stack 0
  4605  00100C                     _InitSystem:
  4606                           	opt stack 25
  4607                           
  4608                           ;main.c: 102: SetupInternalOscillator((0b00111),(0b1));
  4609                           
  4610                           ;incstack = 0
  4611  00100C  0E01               	movlw	1
  4612  00100E  6E26               	movwf	SetupInternalOscillator@enpll,c
  4613  001010  0E07               	movlw	7
  4614  001012  ECAC  F008         	call	_SetupInternalOscillator
  4615                           
  4616                           ;main.c: 105: LoadConfigData();
  4617  001016  ECEC  F00A         	call	_LoadConfigData	;wreg free
  4618                           
  4619                           ;main.c: 108: INTCON=0;
  4620  00101A  0E00               	movlw	0
  4621  00101C  6EF2               	movwf	intcon,c	;volatile
  4622                           
  4623                           ;main.c: 109: INTCON3=0;
  4624  00101E  0E00               	movlw	0
  4625  001020  6EF0               	movwf	intcon3,c	;volatile
  4626                           
  4627                           ;main.c: 110: PIE1=0;
  4628  001022  0E00               	movlw	0
  4629  001024  6E9D               	movwf	3997,c	;volatile
  4630                           
  4631                           ;main.c: 111: PIE2=0;
  4632  001026  0E00               	movlw	0
  4633  001028  6EA0               	movwf	4000,c	;volatile
  4634                           
  4635                           ;main.c: 112: PIE3=0;
  4636  00102A  0E00               	movlw	0
  4637  00102C  6EA3               	movwf	4003,c	;volatile
  4638                           
  4639                           ;main.c: 113: PIE4=0;
  4640  00102E  0E00               	movlw	0
  4641  001030  6E7A               	movwf	3962,c	;volatile
  4642                           
  4643                           ;main.c: 114: PIE5=0;
  4644  001032  0E00               	movlw	0
  4645  001034  6E7D               	movwf	3965,c	;volatile
  4646                           
  4647                           ;main.c: 116: RCONbits.IPEN = 0;
  4648  001036  9ED0               	bcf	4048,7,c	;volatile
  4649                           
  4650                           ;main.c: 117: INTCONbits.PEIE = 1;
  4651  001038  8CF2               	bsf	intcon,6,c	;volatile
  4652                           
  4653                           ;main.c: 118: INTCONbits.GIE = 1;
  4654  00103A  8EF2               	bsf	intcon,7,c	;volatile
  4655                           
  4656                           ;main.c: 121: TRISAbits.RA0=0;
  4657  00103C  9092               	bcf	3986,0,c	;volatile
  4658                           
  4659                           ;main.c: 122: TRISAbits.RA1=0;
  4660  00103E  9292               	bcf	3986,1,c	;volatile
  4661                           
  4662                           ;main.c: 123: TRISAbits.RA2=0;
  4663  001040  9492               	bcf	3986,2,c	;volatile
  4664                           
  4665                           ;main.c: 124: TRISAbits.RA3=0;
  4666  001042  9692               	bcf	3986,3,c	;volatile
  4667                           
  4668                           ;main.c: 125: TRISAbits.RA4=0;
  4669  001044  9892               	bcf	3986,4,c	;volatile
  4670                           
  4671                           ;main.c: 126: TRISAbits.RA5=0;
  4672  001046  9A92               	bcf	3986,5,c	;volatile
  4673                           
  4674                           ;main.c: 127: ANSELAbits.ANSA0=0;
  4675  001048  010F               	movlb	15	; () banked
  4676  00104A  9138               	bcf	56,0,b	;volatile
  4677                           
  4678                           ; BSR set to: 15
  4679                           ;main.c: 128: ANSELAbits.ANSA1=0;
  4680  00104C  010F               	movlb	15	; () banked
  4681  00104E  9338               	bcf	56,1,b	;volatile
  4682                           
  4683                           ; BSR set to: 15
  4684                           ;main.c: 129: ANSELAbits.ANSA2=0;
  4685  001050  010F               	movlb	15	; () banked
  4686  001052  9538               	bcf	56,2,b	;volatile
  4687                           
  4688                           ; BSR set to: 15
  4689                           ;main.c: 130: ANSELAbits.ANSA3=0;
  4690  001054  010F               	movlb	15	; () banked
  4691  001056  9738               	bcf	56,3,b	;volatile
  4692                           
  4693                           ; BSR set to: 15
  4694                           ;main.c: 131: ANSELAbits.ANSA5=0;
  4695  001058  010F               	movlb	15	; () banked
  4696  00105A  9B38               	bcf	56,5,b	;volatile
  4697                           
  4698                           ; BSR set to: 15
  4699                           ;main.c: 133: TRISBbits.RB4=0;
  4700  00105C  9893               	bcf	3987,4,c	;volatile
  4701                           
  4702                           ; BSR set to: 15
  4703                           ;main.c: 134: TRISBbits.RB5=0;
  4704  00105E  9A93               	bcf	3987,5,c	;volatile
  4705                           
  4706                           ; BSR set to: 15
  4707                           ;main.c: 136: ledInit(&(ledRx),(5),(5),0b00000001);
  4708  001060  0E31               	movlw	low _ledRx
  4709  001062  0100               	movlb	0	; () banked
  4710  001064  6F60               	movwf	ledInit@led& (0+255),b
  4711  001066  0E00               	movlw	high _ledRx
  4712  001068  0100               	movlb	0	; () banked
  4713  00106A  6F61               	movwf	(ledInit@led+1)& (0+255),b
  4714  00106C  0E00               	movlw	0
  4715  00106E  0100               	movlb	0	; () banked
  4716  001070  6F63               	movwf	(ledInit@on+1)& (0+255),b
  4717  001072  0E05               	movlw	5
  4718  001074  6F62               	movwf	ledInit@on& (0+255),b
  4719  001076  0E00               	movlw	0
  4720  001078  0100               	movlb	0	; () banked
  4721  00107A  6F65               	movwf	(ledInit@off+1)& (0+255),b
  4722  00107C  0E05               	movlw	5
  4723  00107E  6F64               	movwf	ledInit@off& (0+255),b
  4724  001080  0E01               	movlw	1
  4725  001082  0100               	movlb	0	; () banked
  4726  001084  6F66               	movwf	ledInit@bm& (0+255),b
  4727  001086  EC27  F009         	call	_ledInit	;wreg free
  4728                           
  4729                           ;main.c: 137: ledInit(&(ledTx),(5),(5),0b00000010);
  4730  00108A  0E28               	movlw	low _ledTx
  4731  00108C  0100               	movlb	0	; () banked
  4732  00108E  6F60               	movwf	ledInit@led& (0+255),b
  4733  001090  0E00               	movlw	high _ledTx
  4734  001092  0100               	movlb	0	; () banked
  4735  001094  6F61               	movwf	(ledInit@led+1)& (0+255),b
  4736  001096  0E00               	movlw	0
  4737  001098  0100               	movlb	0	; () banked
  4738  00109A  6F63               	movwf	(ledInit@on+1)& (0+255),b
  4739  00109C  0E05               	movlw	5
  4740  00109E  6F62               	movwf	ledInit@on& (0+255),b
  4741  0010A0  0E00               	movlw	0
  4742  0010A2  0100               	movlb	0	; () banked
  4743  0010A4  6F65               	movwf	(ledInit@off+1)& (0+255),b
  4744  0010A6  0E05               	movlw	5
  4745  0010A8  6F64               	movwf	ledInit@off& (0+255),b
  4746  0010AA  0E02               	movlw	2
  4747  0010AC  0100               	movlb	0	; () banked
  4748  0010AE  6F66               	movwf	ledInit@bm& (0+255),b
  4749  0010B0  EC27  F009         	call	_ledInit	;wreg free
  4750  0010B4  0012               	return		;funcret
  4751  0010B6                     __end_of_InitSystem:
  4752                           	opt stack 0
  4753                           tblptru	equ	0xFF8
  4754                           prodh	equ	0xFF4
  4755                           prodl	equ	0xFF3
  4756                           intcon	equ	0xFF2
  4757                           intcon3	equ	0xFF0
  4758                           postinc0	equ	0xFEE
  4759                           wreg	equ	0xFE8
  4760                           indf1	equ	0xFE7
  4761                           postinc1	equ	0xFE6
  4762                           postdec1	equ	0xFE5
  4763                           fsr1h	equ	0xFE2
  4764                           fsr1l	equ	0xFE1
  4765                           indf2	equ	0xFDF
  4766                           postinc2	equ	0xFDE
  4767                           postdec2	equ	0xFDD
  4768                           plusw2	equ	0xFDB
  4769                           fsr2h	equ	0xFDA
  4770                           fsr2l	equ	0xFD9
  4771                           status	equ	0xFD8
  4772                           
  4773 ;; *************** function _ledInit *****************
  4774 ;; Defined at:
  4775 ;;		line 12 in file "blink.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;  led             2    0[BANK0 ] PTR struct .
  4778 ;;		 -> ledTx(9), ledRx(9), 
  4779 ;;  on              2    2[BANK0 ] int 
  4780 ;;  off             2    4[BANK0 ] int 
  4781 ;;  bm              1    6[BANK0 ] unsigned char 
  4782 ;; Auto vars:     Size  Location     Type
  4783 ;;		None
  4784 ;; Return value:  Size  Location     Type
  4785 ;;                  1    wreg      void 
  4786 ;; Registers used:
  4787 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4788 ;; Tracked objects:
  4789 ;;		On entry : 0/0
  4790 ;;		On exit  : 0/0
  4791 ;;		Unchanged: 0/0
  4792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4793 ;;      Params:         0       7       0       0       0       0       0
  4794 ;;      Locals:         0       0       0       0       0       0       0
  4795 ;;      Temps:          0       0       0       0       0       0       0
  4796 ;;      Totals:         0       7       0       0       0       0       0
  4797 ;;Total ram usage:        7 bytes
  4798 ;; Hardware stack levels used:    1
  4799 ;; Hardware stack levels required when called:    3
  4800 ;; This function calls:
  4801 ;;		Nothing
  4802 ;; This function is called by:
  4803 ;;		_InitSystem
  4804 ;; This function uses a non-reentrant model
  4805 ;;
  4806                           
  4807                           	psect	text23
  4808  00124E                     __ptext23:
  4809                           	opt stack 0
  4810  00124E                     _ledInit:
  4811                           	opt stack 26
  4812                           
  4813                           ;blink.c: 14: led->onTime=on;
  4814                           
  4815                           ;incstack = 0
  4816  00124E  0100               	movlb	0	; () banked
  4817  001250  EE20 F003          	lfsr	2,3
  4818  001254  5160               	movf	ledInit@led& (0+255),w,b
  4819  001256  26D9               	addwf	fsr2l,f,c
  4820  001258  5161               	movf	(ledInit@led+1)& (0+255),w,b
  4821  00125A  22DA               	addwfc	fsr2h,f,c
  4822  00125C  C062  FFDE         	movff	ledInit@on,postinc2
  4823  001260  C063  FFDD         	movff	ledInit@on+1,postdec2
  4824                           
  4825                           ;blink.c: 15: led->offTime=off;
  4826  001264  0100               	movlb	0	; () banked
  4827  001266  EE20 F005          	lfsr	2,5
  4828  00126A  5160               	movf	ledInit@led& (0+255),w,b
  4829  00126C  26D9               	addwf	fsr2l,f,c
  4830  00126E  5161               	movf	(ledInit@led+1)& (0+255),w,b
  4831  001270  22DA               	addwfc	fsr2h,f,c
  4832  001272  C064  FFDE         	movff	ledInit@off,postinc2
  4833  001276  C065  FFDD         	movff	ledInit@off+1,postdec2
  4834                           
  4835                           ;blink.c: 16: led->bitMask=bm;
  4836  00127A  0100               	movlb	0	; () banked
  4837  00127C  EE20 F007          	lfsr	2,7
  4838  001280  5160               	movf	ledInit@led& (0+255),w,b
  4839  001282  26D9               	addwf	fsr2l,f,c
  4840  001284  5161               	movf	(ledInit@led+1)& (0+255),w,b
  4841  001286  22DA               	addwfc	fsr2h,f,c
  4842  001288  C066  FFDF         	movff	ledInit@bm,indf2
  4843                           
  4844                           ;blink.c: 17: led->on=0;
  4845  00128C  0100               	movlb	0	; () banked
  4846  00128E  EE20 F002          	lfsr	2,2
  4847  001292  5160               	movf	ledInit@led& (0+255),w,b
  4848  001294  26D9               	addwf	fsr2l,f,c
  4849  001296  5161               	movf	(ledInit@led+1)& (0+255),w,b
  4850  001298  22DA               	addwfc	fsr2h,f,c
  4851  00129A  0E00               	movlw	0
  4852  00129C  6EDF               	movwf	indf2,c
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;blink.c: 18: led->count=0;
  4856  00129E  C060  FFD9         	movff	ledInit@led,fsr2l
  4857  0012A2  C061  FFDA         	movff	ledInit@led+1,fsr2h
  4858  0012A6  0E00               	movlw	0
  4859  0012A8  6EDE               	movwf	postinc2,c
  4860  0012AA  0E00               	movlw	0
  4861  0012AC  6EDD               	movwf	postdec2,c
  4862                           
  4863                           ; BSR set to: 0
  4864  0012AE  0012               	return		;funcret
  4865  0012B0                     __end_of_ledInit:
  4866                           	opt stack 0
  4867                           tblptru	equ	0xFF8
  4868                           prodh	equ	0xFF4
  4869                           prodl	equ	0xFF3
  4870                           intcon	equ	0xFF2
  4871                           intcon3	equ	0xFF0
  4872                           postinc0	equ	0xFEE
  4873                           wreg	equ	0xFE8
  4874                           indf1	equ	0xFE7
  4875                           postinc1	equ	0xFE6
  4876                           postdec1	equ	0xFE5
  4877                           fsr1h	equ	0xFE2
  4878                           fsr1l	equ	0xFE1
  4879                           indf2	equ	0xFDF
  4880                           postinc2	equ	0xFDE
  4881                           postdec2	equ	0xFDD
  4882                           plusw2	equ	0xFDB
  4883                           fsr2h	equ	0xFDA
  4884                           fsr2l	equ	0xFD9
  4885                           status	equ	0xFD8
  4886                           
  4887 ;; *************** function _SetupInternalOscillator *****************
  4888 ;; Defined at:
  4889 ;;		line 6 in file "intosc.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;  setBits         1    wreg     unsigned char 
  4892 ;;  enpll           1   37[COMRAM] unsigned char 
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;  setBits         1    1[BANK0 ] unsigned char 
  4895 ;; Return value:  Size  Location     Type
  4896 ;;                  1    wreg      void 
  4897 ;; Registers used:
  4898 ;;		wreg, status,2, status,0
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4904 ;;      Params:         1       0       0       0       0       0       0
  4905 ;;      Locals:         0       1       0       0       0       0       0
  4906 ;;      Temps:          0       1       0       0       0       0       0
  4907 ;;      Totals:         1       2       0       0       0       0       0
  4908 ;;Total ram usage:        3 bytes
  4909 ;; Hardware stack levels used:    1
  4910 ;; Hardware stack levels required when called:    3
  4911 ;; This function calls:
  4912 ;;		Nothing
  4913 ;; This function is called by:
  4914 ;;		_InitSystem
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           	psect	text24
  4919  001158                     __ptext24:
  4920                           	opt stack 0
  4921  001158                     _SetupInternalOscillator:
  4922                           	opt stack 26
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;incstack = 0
  4926                           ;SetupInternalOscillator@setBits stored from wreg
  4927  001158  0100               	movlb	0	; () banked
  4928  00115A  6F61               	movwf	SetupInternalOscillator@setBits& (0+255),b
  4929                           
  4930                           ;intosc.c: 8: OSCCONbits.IRCF = setBits & 7;
  4931  00115C  C061  F060         	movff	SetupInternalOscillator@setBits,??_SetupInternalOscillator
  4932  001160  0E07               	movlw	7
  4933  001162  0100               	movlb	0	; () banked
  4934  001164  1760               	andwf	??_SetupInternalOscillator& (0+255),f,b
  4935  001166  0100               	movlb	0	; () banked
  4936  001168  3B60               	swapf	??_SetupInternalOscillator& (0+255),f,b
  4937  00116A  50D3               	movf	4051,w,c	;volatile
  4938  00116C  0100               	movlb	0	; () banked
  4939  00116E  1960               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  4940  001170  0B8F               	andlw	-113
  4941  001172  1960               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  4942  001174  6ED3               	movwf	4051,c	;volatile
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;intosc.c: 9: OSCCONbits.SCS = 0b00;
  4946  001176  0EFC               	movlw	-4
  4947  001178  16D3               	andwf	4051,f,c	;volatile
  4948                           
  4949                           ; BSR set to: 0
  4950                           ;intosc.c: 10: OSCTUNEbits.PLLEN = enpll;
  4951  00117A  B026               	btfsc	SetupInternalOscillator@enpll,0,c
  4952  00117C  D002               	bra	u1635
  4953  00117E  9C9B               	bcf	3995,6,c	;volatile
  4954  001180  D001               	bra	u1636
  4955  001182                     u1635:
  4956  001182  8C9B               	bsf	3995,6,c	;volatile
  4957  001184                     u1636:
  4958                           
  4959                           ;intosc.c: 12: OSCCON2bits.MFIOSEL = (setBits & 8) >> 3;
  4960  001184  C061  F060         	movff	SetupInternalOscillator@setBits,??_SetupInternalOscillator
  4961  001188  0100               	movlb	0	; () banked
  4962  00118A  90D8               	bcf	status,0,c
  4963  00118C  3360               	rrcf	??_SetupInternalOscillator& (0+255),f,b
  4964  00118E  0100               	movlb	0	; () banked
  4965  001190  90D8               	bcf	status,0,c
  4966  001192  3360               	rrcf	??_SetupInternalOscillator& (0+255),f,b
  4967  001194  0100               	movlb	0	; () banked
  4968  001196  90D8               	bcf	status,0,c
  4969  001198  3360               	rrcf	??_SetupInternalOscillator& (0+255),f,b
  4970  00119A  0E01               	movlw	1
  4971  00119C  0100               	movlb	0	; () banked
  4972  00119E  1760               	andwf	??_SetupInternalOscillator& (0+255),f,b
  4973  0011A0  0100               	movlb	0	; () banked
  4974  0011A2  3B60               	swapf	??_SetupInternalOscillator& (0+255),f,b
  4975  0011A4  50D2               	movf	4050,w,c	;volatile
  4976  0011A6  0100               	movlb	0	; () banked
  4977  0011A8  1960               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  4978  0011AA  0BEF               	andlw	-17
  4979  0011AC  1960               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  4980  0011AE  6ED2               	movwf	4050,c	;volatile
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;intosc.c: 13: OSCTUNEbits.INTSRC = (setBits & 16) >> 4;
  4984  0011B0  C061  F060         	movff	SetupInternalOscillator@setBits,??_SetupInternalOscillator
  4985  0011B4  0100               	movlb	0	; () banked
  4986  0011B6  3B60               	swapf	??_SetupInternalOscillator& (0+255),f,b
  4987  0011B8  0E0F               	movlw	15
  4988  0011BA  1760               	andwf	??_SetupInternalOscillator& (0+255),f,b
  4989  0011BC  0E01               	movlw	1
  4990  0011BE  0100               	movlb	0	; () banked
  4991  0011C0  1760               	andwf	??_SetupInternalOscillator& (0+255),f,b
  4992  0011C2  0100               	movlb	0	; () banked
  4993  0011C4  3360               	rrcf	??_SetupInternalOscillator& (0+255),f,b
  4994  0011C6  3360               	rrcf	??_SetupInternalOscillator& (0+255),f,b
  4995  0011C8  509B               	movf	3995,w,c	;volatile
  4996  0011CA  0100               	movlb	0	; () banked
  4997  0011CC  1960               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  4998  0011CE  0B7F               	andlw	-129
  4999  0011D0  1960               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  5000  0011D2  6E9B               	movwf	3995,c	;volatile
  5001                           
  5002                           ; BSR set to: 0
  5003  0011D4  0012               	return		;funcret
  5004  0011D6                     __end_of_SetupInternalOscillator:
  5005                           	opt stack 0
  5006                           tblptru	equ	0xFF8
  5007                           prodh	equ	0xFF4
  5008                           prodl	equ	0xFF3
  5009                           intcon	equ	0xFF2
  5010                           intcon3	equ	0xFF0
  5011                           postinc0	equ	0xFEE
  5012                           wreg	equ	0xFE8
  5013                           indf1	equ	0xFE7
  5014                           postinc1	equ	0xFE6
  5015                           postdec1	equ	0xFE5
  5016                           fsr1h	equ	0xFE2
  5017                           fsr1l	equ	0xFE1
  5018                           indf2	equ	0xFDF
  5019                           postinc2	equ	0xFDE
  5020                           postdec2	equ	0xFDD
  5021                           plusw2	equ	0xFDB
  5022                           fsr2h	equ	0xFDA
  5023                           fsr2l	equ	0xFD9
  5024                           status	equ	0xFD8
  5025                           
  5026 ;; *************** function _LoadConfigData *****************
  5027 ;; Defined at:
  5028 ;;		line 89 in file "main.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;		None
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;		None
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  1    wreg      void 
  5035 ;; Registers used:
  5036 ;;		wreg, status,2, cstack
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5042 ;;      Params:         0       0       0       0       0       0       0
  5043 ;;      Locals:         0       0       0       0       0       0       0
  5044 ;;      Temps:          0       0       0       0       0       0       0
  5045 ;;      Totals:         0       0       0       0       0       0       0
  5046 ;;Total ram usage:        0 bytes
  5047 ;; Hardware stack levels used:    1
  5048 ;; Hardware stack levels required when called:    4
  5049 ;; This function calls:
  5050 ;;		_EERead
  5051 ;; This function is called by:
  5052 ;;		_InitSystem
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           	psect	text25
  5057  0015D8                     __ptext25:
  5058                           	opt stack 0
  5059  0015D8                     _LoadConfigData:
  5060                           	opt stack 25
  5061                           
  5062                           ;main.c: 91: adr=EERead((0));
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;incstack = 0
  5066  0015D8  0E00               	movlw	0
  5067  0015DA  ECB4  F00A         	call	_EERead
  5068  0015DE  0100               	movlb	0	; () banked
  5069  0015E0  6FB7               	movwf	_adr& (0+255),b
  5070                           
  5071                           ; BSR set to: 0
  5072  0015E2  0012               	return		;funcret
  5073  0015E4                     __end_of_LoadConfigData:
  5074                           	opt stack 0
  5075                           tblptru	equ	0xFF8
  5076                           prodh	equ	0xFF4
  5077                           prodl	equ	0xFF3
  5078                           intcon	equ	0xFF2
  5079                           intcon3	equ	0xFF0
  5080                           postinc0	equ	0xFEE
  5081                           wreg	equ	0xFE8
  5082                           indf1	equ	0xFE7
  5083                           postinc1	equ	0xFE6
  5084                           postdec1	equ	0xFE5
  5085                           fsr1h	equ	0xFE2
  5086                           fsr1l	equ	0xFE1
  5087                           indf2	equ	0xFDF
  5088                           postinc2	equ	0xFDE
  5089                           postdec2	equ	0xFDD
  5090                           plusw2	equ	0xFDB
  5091                           fsr2h	equ	0xFDA
  5092                           fsr2l	equ	0xFD9
  5093                           status	equ	0xFD8
  5094                           
  5095 ;; *************** function _EERead *****************
  5096 ;; Defined at:
  5097 ;;		line 40 in file "eeprom.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;  adresse         1    wreg     unsigned char 
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;  adresse         1    0[BANK0 ] unsigned char 
  5102 ;;  orgGIE          1    1[BANK0 ] unsigned char 
  5103 ;;  data            1    0        unsigned char 
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  1    wreg      unsigned char 
  5106 ;; Registers used:
  5107 ;;		wreg, status,2
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5113 ;;      Params:         0       0       0       0       0       0       0
  5114 ;;      Locals:         0       2       0       0       0       0       0
  5115 ;;      Temps:          0       0       0       0       0       0       0
  5116 ;;      Totals:         0       2       0       0       0       0       0
  5117 ;;Total ram usage:        2 bytes
  5118 ;; Hardware stack levels used:    1
  5119 ;; Hardware stack levels required when called:    3
  5120 ;; This function calls:
  5121 ;;		Nothing
  5122 ;; This function is called by:
  5123 ;;		_LoadConfigData
  5124 ;;		_EEReadInt
  5125 ;;		_EEReadLong
  5126 ;; This function uses a non-reentrant model
  5127 ;;
  5128                           
  5129                           	psect	text26
  5130  001568                     __ptext26:
  5131                           	opt stack 0
  5132  001568                     _EERead:
  5133                           	opt stack 25
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;incstack = 0
  5137                           ;EERead@adresse stored from wreg
  5138  001568  0100               	movlb	0	; () banked
  5139  00156A  6F60               	movwf	EERead@adresse& (0+255),b
  5140                           
  5141                           ;eeprom.c: 42: char orgGIE;
  5142                           ;eeprom.c: 43: char data;
  5143                           ;eeprom.c: 44: orgGIE=INTCONbits.GIE;
  5144  00156C  0E00               	movlw	0
  5145  00156E  BEF2               	btfsc	intcon,7,c	;volatile
  5146  001570  0E01               	movlw	1
  5147  001572  0100               	movlb	0	; () banked
  5148  001574  6F61               	movwf	EERead@orgGIE& (0+255),b
  5149                           
  5150                           ;eeprom.c: 46: INTCONbits.GIE=0;
  5151  001576  9EF2               	bcf	intcon,7,c	;volatile
  5152                           
  5153                           ;eeprom.c: 47: EECON1bits.CFGS=0;
  5154  001578  9CA6               	bcf	4006,6,c	;volatile
  5155                           
  5156                           ;eeprom.c: 48: EECON1bits.EEPGD=0;
  5157  00157A  9EA6               	bcf	4006,7,c	;volatile
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;eeprom.c: 49: EEADR=adresse;
  5161  00157C  C060  FFA9         	movff	EERead@adresse,4009	;volatile
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;eeprom.c: 50: EECON1bits.RD=1;
  5165  001580  80A6               	bsf	4006,0,c	;volatile
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;eeprom.c: 51: INTCONbits.GIE=orgGIE;
  5169  001582  0100               	movlb	0	; () banked
  5170  001584  B161               	btfsc	EERead@orgGIE& (0+255),0,b
  5171  001586  D002               	bra	u1545
  5172  001588  9EF2               	bcf	intcon,7,c	;volatile
  5173  00158A  D001               	bra	u1546
  5174  00158C                     u1545:
  5175  00158C  8EF2               	bsf	intcon,7,c	;volatile
  5176  00158E                     u1546:
  5177                           
  5178                           ;eeprom.c: 53: return EEDATA;
  5179  00158E  50A8               	movf	4008,w,c	;volatile
  5180  001590  0012               	return	
  5181  001592                     __end_of_EERead:
  5182                           	opt stack 0
  5183                           tblptru	equ	0xFF8
  5184                           prodh	equ	0xFF4
  5185                           prodl	equ	0xFF3
  5186                           intcon	equ	0xFF2
  5187                           intcon3	equ	0xFF0
  5188                           postinc0	equ	0xFEE
  5189                           wreg	equ	0xFE8
  5190                           indf1	equ	0xFE7
  5191                           postinc1	equ	0xFE6
  5192                           postdec1	equ	0xFE5
  5193                           fsr1h	equ	0xFE2
  5194                           fsr1l	equ	0xFE1
  5195                           indf2	equ	0xFDF
  5196                           postinc2	equ	0xFDE
  5197                           postdec2	equ	0xFDD
  5198                           plusw2	equ	0xFDB
  5199                           fsr2h	equ	0xFDA
  5200                           fsr2l	equ	0xFD9
  5201                           status	equ	0xFD8
  5202                           
  5203 ;; *************** function _IntHighRoutine *****************
  5204 ;; Defined at:
  5205 ;;		line 149 in file "main.c"
  5206 ;; Parameters:    Size  Location     Type
  5207 ;;		None
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;		None
  5210 ;; Return value:  Size  Location     Type
  5211 ;;                  1    wreg      void 
  5212 ;; Registers used:
  5213 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5214 ;; Tracked objects:
  5215 ;;		On entry : 0/0
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5219 ;;      Params:         0       0       0       0       0       0       0
  5220 ;;      Locals:         0       0       0       0       0       0       0
  5221 ;;      Temps:         14       0       0       0       0       0       0
  5222 ;;      Totals:        14       0       0       0       0       0       0
  5223 ;;Total ram usage:       14 bytes
  5224 ;; Hardware stack levels used:    1
  5225 ;; Hardware stack levels required when called:    2
  5226 ;; This function calls:
  5227 ;;		_uartInterruptHandler
  5228 ;; This function is called by:
  5229 ;;		Interrupt level 2
  5230 ;; This function uses a non-reentrant model
  5231 ;;
  5232                           
  5233                           	psect	intcode
  5234  000008                     __pintcode:
  5235                           	opt stack 0
  5236  000008                     _IntHighRoutine:
  5237                           	opt stack 24
  5238                           
  5239                           ;incstack = 0
  5240  000008  823A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5241  00000A  CFFA F018          	movff	pclath,??_IntHighRoutine
  5242  00000E  CFFB F019          	movff	pclatu,??_IntHighRoutine+1
  5243  000012  CFE9 F01A          	movff	fsr0l,??_IntHighRoutine+2
  5244  000016  CFEA F01B          	movff	fsr0h,??_IntHighRoutine+3
  5245  00001A  CFE1 F01C          	movff	fsr1l,??_IntHighRoutine+4
  5246  00001E  CFE2 F01D          	movff	fsr1h,??_IntHighRoutine+5
  5247  000022  CFD9 F01E          	movff	fsr2l,??_IntHighRoutine+6
  5248  000026  CFDA F01F          	movff	fsr2h,??_IntHighRoutine+7
  5249  00002A  CFF3 F020          	movff	prodl,??_IntHighRoutine+8
  5250  00002E  CFF4 F021          	movff	prodh,??_IntHighRoutine+9
  5251  000032  CFF6 F022          	movff	tblptrl,??_IntHighRoutine+10
  5252  000036  CFF7 F023          	movff	tblptrh,??_IntHighRoutine+11
  5253  00003A  CFF8 F024          	movff	tblptru,??_IntHighRoutine+12
  5254  00003E  CFF5 F025          	movff	tablat,??_IntHighRoutine+13
  5255                           
  5256                           ;main.c: 151: INTCONbits.GIE=0;
  5257  000042  9EF2               	bcf	intcon,7,c	;volatile
  5258                           
  5259                           ;main.c: 153: uartInterruptHandler(&(uart));
  5260  000044  0E9E               	movlw	low _uart
  5261  000046  6E08               	movwf	uartInterruptHandler@uart,c
  5262  000048  0E00               	movlw	high _uart
  5263  00004A  6E09               	movwf	uartInterruptHandler@uart+1,c
  5264  00004C  EC15  F002         	call	_uartInterruptHandler	;wreg free
  5265                           
  5266                           ;main.c: 155: INTCONbits.GIE=1;
  5267  000050  8EF2               	bsf	intcon,7,c	;volatile
  5268  000052  C025  FFF5         	movff	??_IntHighRoutine+13,tablat
  5269  000056  C024  FFF8         	movff	??_IntHighRoutine+12,tblptru
  5270  00005A  C023  FFF7         	movff	??_IntHighRoutine+11,tblptrh
  5271  00005E  C022  FFF6         	movff	??_IntHighRoutine+10,tblptrl
  5272  000062  C021  FFF4         	movff	??_IntHighRoutine+9,prodh
  5273  000066  C020  FFF3         	movff	??_IntHighRoutine+8,prodl
  5274  00006A  C01F  FFDA         	movff	??_IntHighRoutine+7,fsr2h
  5275  00006E  C01E  FFD9         	movff	??_IntHighRoutine+6,fsr2l
  5276  000072  C01D  FFE2         	movff	??_IntHighRoutine+5,fsr1h
  5277  000076  C01C  FFE1         	movff	??_IntHighRoutine+4,fsr1l
  5278  00007A  C01B  FFEA         	movff	??_IntHighRoutine+3,fsr0h
  5279  00007E  C01A  FFE9         	movff	??_IntHighRoutine+2,fsr0l
  5280  000082  C019  FFFB         	movff	??_IntHighRoutine+1,pclatu
  5281  000086  C018  FFFA         	movff	??_IntHighRoutine,pclath
  5282  00008A  923A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5283  00008C  0011               	retfie		f
  5284  00008E                     __end_of_IntHighRoutine:
  5285                           	opt stack 0
  5286                           pclatu	equ	0xFFB
  5287                           pclath	equ	0xFFA
  5288                           tblptru	equ	0xFF8
  5289                           tblptrh	equ	0xFF7
  5290                           tblptrl	equ	0xFF6
  5291                           tablat	equ	0xFF5
  5292                           prodh	equ	0xFF4
  5293                           prodl	equ	0xFF3
  5294                           intcon	equ	0xFF2
  5295                           intcon3	equ	0xFF0
  5296                           postinc0	equ	0xFEE
  5297                           fsr0h	equ	0xFEA
  5298                           fsr0l	equ	0xFE9
  5299                           wreg	equ	0xFE8
  5300                           indf1	equ	0xFE7
  5301                           postinc1	equ	0xFE6
  5302                           postdec1	equ	0xFE5
  5303                           fsr1h	equ	0xFE2
  5304                           fsr1l	equ	0xFE1
  5305                           indf2	equ	0xFDF
  5306                           postinc2	equ	0xFDE
  5307                           postdec2	equ	0xFDD
  5308                           plusw2	equ	0xFDB
  5309                           fsr2h	equ	0xFDA
  5310                           fsr2l	equ	0xFD9
  5311                           status	equ	0xFD8
  5312                           
  5313 ;; *************** function _uartInterruptHandler *****************
  5314 ;; Defined at:
  5315 ;;		line 206 in file "uart.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;  uart            2    7[COMRAM] PTR struct .
  5318 ;;		 -> uart(25), 
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;  rcsta           2   20[COMRAM] PTR volatile unsigned ch
  5321 ;;		 -> RCSTA2(1), RCSTA1(1), 
  5322 ;;  txsta           2   13[COMRAM] PTR volatile unsigned ch
  5323 ;;		 -> TXSTA2(1), TXSTA1(1), 
  5324 ;;  data            1   22[COMRAM] unsigned char 
  5325 ;;  iRxFlag         1   19[COMRAM] unsigned char 
  5326 ;;  oErr            1   18[COMRAM] unsigned char 
  5327 ;;  fErr            1   17[COMRAM] unsigned char 
  5328 ;;  iRxEnable       1   16[COMRAM] unsigned char 
  5329 ;;  iTxFlag         1   15[COMRAM] unsigned char 
  5330 ;;  iTxEnable       1   12[COMRAM] unsigned char 
  5331 ;; Return value:  Size  Location     Type
  5332 ;;                  1    wreg      void 
  5333 ;; Registers used:
  5334 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5335 ;; Tracked objects:
  5336 ;;		On entry : 0/0
  5337 ;;		On exit  : 0/0
  5338 ;;		Unchanged: 0/0
  5339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5340 ;;      Params:         2       0       0       0       0       0       0
  5341 ;;      Locals:        11       0       0       0       0       0       0
  5342 ;;      Temps:          3       0       0       0       0       0       0
  5343 ;;      Totals:        16       0       0       0       0       0       0
  5344 ;;Total ram usage:       16 bytes
  5345 ;; Hardware stack levels used:    1
  5346 ;; Hardware stack levels required when called:    1
  5347 ;; This function calls:
  5348 ;;		i2_fifoGet
  5349 ;;		i2_fifoPut
  5350 ;;		i2_uartEnableSend
  5351 ;; This function is called by:
  5352 ;;		_IntHighRoutine
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           	psect	text28
  5357  00042A                     __ptext28:
  5358                           	opt stack 0
  5359  00042A                     _uartInterruptHandler:
  5360                           	opt stack 24
  5361                           
  5362                           ;uart.c: 208: char iTxFlag;
  5363                           ;uart.c: 209: char iTxEnable;
  5364                           ;uart.c: 210: char iRxFlag;
  5365                           ;uart.c: 211: char iRxEnable;
  5366                           ;uart.c: 212: char fErr;
  5367                           ;uart.c: 213: char oErr;
  5368                           ;uart.c: 214: volatile unsigned char* rcsta;
  5369                           ;uart.c: 215: volatile unsigned char* txsta;
  5370                           ;uart.c: 217: char data;
  5371                           ;uart.c: 219: switch (uart->number)
  5372                           
  5373                           ;incstack = 0
  5374  00042A  D03F               	goto	i2l2820
  5375  00042C                     i2l2806:
  5376                           
  5377                           ;uart.c: 222: iTxFlag=PIR1bits.TX1IF;
  5378  00042C  0E00               	movlw	0
  5379  00042E  B89E               	btfsc	3998,4,c	;volatile
  5380  000430  0E01               	movlw	1
  5381  000432  6E10               	movwf	uartInterruptHandler@iTxFlag,c
  5382                           
  5383                           ;uart.c: 223: iTxEnable=PIE1bits.TX1IE;
  5384  000434  0E00               	movlw	0
  5385  000436  B89D               	btfsc	3997,4,c	;volatile
  5386  000438  0E01               	movlw	1
  5387  00043A  6E0D               	movwf	uartInterruptHandler@iTxEnable,c
  5388                           
  5389                           ;uart.c: 224: iRxFlag=PIR1bits.RC1IF;
  5390  00043C  0E00               	movlw	0
  5391  00043E  BA9E               	btfsc	3998,5,c	;volatile
  5392  000440  0E01               	movlw	1
  5393  000442  6E14               	movwf	uartInterruptHandler@iRxFlag,c
  5394                           
  5395                           ;uart.c: 225: iRxEnable=PIE1bits.RCIE;
  5396  000444  0E00               	movlw	0
  5397  000446  BA9D               	btfsc	3997,5,c	;volatile
  5398  000448  0E01               	movlw	1
  5399  00044A  6E11               	movwf	uartInterruptHandler@iRxEnable,c
  5400                           
  5401                           ;uart.c: 226: fErr=RCSTA1bits.FERR;
  5402  00044C  0E00               	movlw	0
  5403  00044E  B4AB               	btfsc	4011,2,c	;volatile
  5404  000450  0E01               	movlw	1
  5405  000452  6E12               	movwf	uartInterruptHandler@fErr,c
  5406                           
  5407                           ;uart.c: 227: oErr=RCSTA1bits.OERR;
  5408  000454  0E00               	movlw	0
  5409  000456  B2AB               	btfsc	4011,1,c	;volatile
  5410  000458  0E01               	movlw	1
  5411  00045A  6E13               	movwf	uartInterruptHandler@oErr,c
  5412                           
  5413                           ;uart.c: 228: rcsta=&RCSTA1;
  5414  00045C  0EAB               	movlw	171
  5415  00045E  6E15               	movwf	uartInterruptHandler@rcsta,c
  5416  000460  0E0F               	movlw	15
  5417  000462  6E16               	movwf	uartInterruptHandler@rcsta+1,c
  5418                           
  5419                           ;uart.c: 229: txsta=&TXSTA1;
  5420  000464  0EAC               	movlw	172
  5421  000466  D01D               	goto	L19
  5422  000468                     i2l2812:
  5423                           
  5424                           ;uart.c: 232: iTxFlag=PIR3bits.TX2IF;
  5425  000468  0E00               	movlw	0
  5426  00046A  B8A4               	btfsc	4004,4,c	;volatile
  5427  00046C  0E01               	movlw	1
  5428  00046E  6E10               	movwf	uartInterruptHandler@iTxFlag,c
  5429                           
  5430                           ;uart.c: 233: iTxEnable=PIE3bits.TX2IE;
  5431  000470  0E00               	movlw	0
  5432  000472  B8A3               	btfsc	4003,4,c	;volatile
  5433  000474  0E01               	movlw	1
  5434  000476  6E0D               	movwf	uartInterruptHandler@iTxEnable,c
  5435                           
  5436                           ;uart.c: 234: iRxFlag=PIR3bits.RC2IF;
  5437  000478  0E00               	movlw	0
  5438  00047A  BAA4               	btfsc	4004,5,c	;volatile
  5439  00047C  0E01               	movlw	1
  5440  00047E  6E14               	movwf	uartInterruptHandler@iRxFlag,c
  5441                           
  5442                           ;uart.c: 235: iRxEnable=PIE3bits.RC2IE;
  5443  000480  0E00               	movlw	0
  5444  000482  BAA3               	btfsc	4003,5,c	;volatile
  5445  000484  0E01               	movlw	1
  5446  000486  6E11               	movwf	uartInterruptHandler@iRxEnable,c
  5447                           
  5448                           ;uart.c: 236: fErr=RCSTA2bits.FERR;
  5449  000488  0E00               	movlw	0
  5450  00048A  B471               	btfsc	3953,2,c	;volatile
  5451  00048C  0E01               	movlw	1
  5452  00048E  6E12               	movwf	uartInterruptHandler@fErr,c
  5453                           
  5454                           ;uart.c: 237: oErr=RCSTA2bits.OERR;
  5455  000490  0E00               	movlw	0
  5456  000492  B271               	btfsc	3953,1,c	;volatile
  5457  000494  0E01               	movlw	1
  5458  000496  6E13               	movwf	uartInterruptHandler@oErr,c
  5459                           
  5460                           ;uart.c: 238: rcsta=&RCSTA2;
  5461  000498  0E71               	movlw	113
  5462  00049A  6E15               	movwf	uartInterruptHandler@rcsta,c
  5463  00049C  0E0F               	movlw	15
  5464  00049E  6E16               	movwf	uartInterruptHandler@rcsta+1,c
  5465                           
  5466                           ;uart.c: 239: txsta=&TXSTA2;
  5467  0004A0  0E72               	movlw	114
  5468  0004A2                     L19:
  5469  0004A2  6E0E               	movwf	uartInterruptHandler@txsta,c
  5470  0004A4  0E0F               	movlw	15
  5471  0004A6  6E0F               	movwf	uartInterruptHandler@txsta+1,c
  5472                           
  5473                           ;uart.c: 241: }
  5474                           
  5475                           ;uart.c: 240: break;
  5476  0004A8  D00D               	goto	i2l2822
  5477  0004AA                     i2l2820:
  5478  0004AA  EE20 F013          	lfsr	2,19
  5479  0004AE  5008               	movf	uartInterruptHandler@uart,w,c
  5480  0004B0  26D9               	addwf	fsr2l,f,c
  5481  0004B2  5009               	movf	uartInterruptHandler@uart+1,w,c
  5482  0004B4  22DA               	addwfc	fsr2h,f,c
  5483  0004B6  50DF               	movf	indf2,w,c
  5484                           
  5485                           ; Switch size 1, requested type "space"
  5486                           ; Number of cases is 2, Range of values is 1 to 2
  5487                           ; switch strategies available:
  5488                           ; Name         Instructions Cycles
  5489                           ; simple_byte            7     4 (average)
  5490                           ;	Chosen strategy is simple_byte
  5491  0004B8  0A01               	xorlw	1	; case 1
  5492  0004BA  B4D8               	btfsc	status,2,c
  5493  0004BC  D7B7               	goto	i2l2806
  5494  0004BE  0A03               	xorlw	3	; case 2
  5495  0004C0  B4D8               	btfsc	status,2,c
  5496  0004C2  D7D2               	goto	i2l2812
  5497  0004C4                     i2l2822:
  5498                           
  5499                           ;uart.c: 242: if (iTxFlag )
  5500  0004C4  5010               	movf	uartInterruptHandler@iTxFlag,w,c
  5501  0004C6  B4D8               	btfsc	status,2,c
  5502  0004C8  D0C3               	goto	i2l2868
  5503                           
  5504                           ;uart.c: 243: {
  5505                           ;uart.c: 244: if ( fifoGet(&(uart->sendFifo),&data) )
  5506  0004CA  C008  F001         	movff	uartInterruptHandler@uart,i2fifoGet@fifo
  5507  0004CE  C009  F002         	movff	uartInterruptHandler@uart+1,i2fifoGet@fifo+1
  5508  0004D2  0E17               	movlw	low uartInterruptHandler@data
  5509  0004D4  6E03               	movwf	i2fifoGet@get,c
  5510  0004D6  0E00               	movlw	high uartInterruptHandler@data
  5511  0004D8  6E04               	movwf	i2fifoGet@get+1,c
  5512  0004DA  EC7E  F006         	call	i2_fifoGet	;wreg free
  5513  0004DE  0900               	iorlw	0
  5514  0004E0  B4D8               	btfsc	status,2,c
  5515  0004E2  D032               	goto	i2l2830
  5516                           
  5517                           ;uart.c: 245: {
  5518                           ;uart.c: 247: if (uart->hdFlag )
  5519  0004E4  EE20 F014          	lfsr	2,20
  5520  0004E8  5008               	movf	uartInterruptHandler@uart,w,c
  5521  0004EA  26D9               	addwf	fsr2l,f,c
  5522  0004EC  5009               	movf	uartInterruptHandler@uart+1,w,c
  5523  0004EE  22DA               	addwfc	fsr2h,f,c
  5524  0004F0  50DF               	movf	indf2,w,c
  5525  0004F2  B4D8               	btfsc	status,2,c
  5526  0004F4  D018               	goto	i2l368
  5527                           
  5528                           ;uart.c: 248: {
  5529                           ;uart.c: 249: *(uart->hdPort) |= uart->hdOnMask;
  5530  0004F6  EE20 F017          	lfsr	2,23
  5531  0004FA  5008               	movf	uartInterruptHandler@uart,w,c
  5532  0004FC  26D9               	addwf	fsr2l,f,c
  5533  0004FE  5009               	movf	uartInterruptHandler@uart+1,w,c
  5534  000500  22DA               	addwfc	fsr2h,f,c
  5535  000502  50DF               	movf	indf2,w,c
  5536  000504  6E0A               	movwf	??_uartInterruptHandler& (0+255),c
  5537  000506  EE20 F015          	lfsr	2,21
  5538  00050A  5008               	movf	uartInterruptHandler@uart,w,c
  5539  00050C  26D9               	addwf	fsr2l,f,c
  5540  00050E  5009               	movf	uartInterruptHandler@uart+1,w,c
  5541  000510  22DA               	addwfc	fsr2h,f,c
  5542  000512  CFDE F00B          	movff	postinc2,??_uartInterruptHandler+1
  5543  000516  CFDD F00C          	movff	postdec2,??_uartInterruptHandler+2
  5544  00051A  C00B  FFD9         	movff	??_uartInterruptHandler+1,fsr2l
  5545  00051E  C00C  FFDA         	movff	??_uartInterruptHandler+2,fsr2h
  5546  000522  500A               	movf	??_uartInterruptHandler,w,c
  5547  000524  12DF               	iorwf	indf2,f,c
  5548  000526                     i2l368:
  5549                           
  5550                           ;uart.c: 250: }
  5551                           ;uart.c: 251: *uart->txReg=data;
  5552  000526  EE20 F00E          	lfsr	2,14
  5553  00052A  5008               	movf	uartInterruptHandler@uart,w,c
  5554  00052C  26D9               	addwf	fsr2l,f,c
  5555  00052E  5009               	movf	uartInterruptHandler@uart+1,w,c
  5556  000530  22DA               	addwfc	fsr2h,f,c
  5557  000532  CFDE F00A          	movff	postinc2,??_uartInterruptHandler
  5558  000536  CFDD F00B          	movff	postdec2,??_uartInterruptHandler+1
  5559  00053A  C00A  FFD9         	movff	??_uartInterruptHandler,fsr2l
  5560  00053E  C00B  FFDA         	movff	??_uartInterruptHandler+1,fsr2h
  5561  000542  C017  FFDF         	movff	uartInterruptHandler@data,indf2
  5562                           
  5563                           ;uart.c: 252: }
  5564  000546  D084               	goto	i2l2868
  5565  000548                     i2l2830:
  5566                           
  5567                           ;uart.c: 253: else
  5568                           ;uart.c: 254: {
  5569                           ;uart.c: 256: if (uart->hdFlag)
  5570  000548  EE20 F014          	lfsr	2,20
  5571  00054C  5008               	movf	uartInterruptHandler@uart,w,c
  5572  00054E  26D9               	addwf	fsr2l,f,c
  5573  000550  5009               	movf	uartInterruptHandler@uart+1,w,c
  5574  000552  22DA               	addwfc	fsr2h,f,c
  5575  000554  50DF               	movf	indf2,w,c
  5576  000556  B4D8               	btfsc	status,2,c
  5577  000558  D01E               	goto	i2l2838
  5578  00055A                     i2l2834:
  5579  00055A  C00E  FFD9         	movff	uartInterruptHandler@txsta,fsr2l
  5580  00055E  C00F  FFDA         	movff	uartInterruptHandler@txsta+1,fsr2h
  5581  000562  A2DF               	btfss	indf2,1,c
  5582  000564  D7FA               	goto	i2l2834
  5583                           
  5584                           ;uart.c: 260: *(uart->hdPort) &= uart->hdOffMask;
  5585  000566  EE20 F018          	lfsr	2,24
  5586  00056A  5008               	movf	uartInterruptHandler@uart,w,c
  5587  00056C  26D9               	addwf	fsr2l,f,c
  5588  00056E  5009               	movf	uartInterruptHandler@uart+1,w,c
  5589  000570  22DA               	addwfc	fsr2h,f,c
  5590  000572  50DF               	movf	indf2,w,c
  5591  000574  6E0A               	movwf	??_uartInterruptHandler& (0+255),c
  5592  000576  EE20 F015          	lfsr	2,21
  5593  00057A  5008               	movf	uartInterruptHandler@uart,w,c
  5594  00057C  26D9               	addwf	fsr2l,f,c
  5595  00057E  5009               	movf	uartInterruptHandler@uart+1,w,c
  5596  000580  22DA               	addwfc	fsr2h,f,c
  5597  000582  CFDE F00B          	movff	postinc2,??_uartInterruptHandler+1
  5598  000586  CFDD F00C          	movff	postdec2,??_uartInterruptHandler+2
  5599  00058A  C00B  FFD9         	movff	??_uartInterruptHandler+1,fsr2l
  5600  00058E  C00C  FFDA         	movff	??_uartInterruptHandler+2,fsr2h
  5601  000592  500A               	movf	??_uartInterruptHandler,w,c
  5602  000594  16DF               	andwf	indf2,f,c
  5603  000596                     i2l2838:
  5604                           
  5605                           ;uart.c: 261: }
  5606                           ;uart.c: 262: uartEnableSend(uart,0);
  5607  000596  C008  F001         	movff	uartInterruptHandler@uart,i2uartEnableSend@uart
  5608  00059A  C009  F002         	movff	uartInterruptHandler@uart+1,i2uartEnableSend@uart+1
  5609  00059E  0E00               	movlw	0
  5610  0005A0  6E03               	movwf	i2uartEnableSend@onoff,c
  5611  0005A2  ECF9  F009         	call	i2_uartEnableSend	;wreg free
  5612                           
  5613                           ;uart.c: 263: }
  5614                           ;uart.c: 264: }
  5615                           ;uart.c: 266: while (iRxEnable & iRxFlag)
  5616  0005A6  D054               	goto	i2l2868
  5617  0005A8                     i2l2840:
  5618                           
  5619                           ;uart.c: 267: {
  5620                           ;uart.c: 268: if (fErr)
  5621  0005A8  5012               	movf	uartInterruptHandler@fErr,w,c
  5622  0005AA  B4D8               	btfsc	status,2,c
  5623  0005AC  D009               	goto	i2l2846
  5624                           
  5625                           ;uart.c: 269: {
  5626                           ;uart.c: 270: uart->status|=16;
  5627  0005AE  EE20 F012          	lfsr	2,18
  5628  0005B2  5008               	movf	uartInterruptHandler@uart,w,c
  5629  0005B4  26D9               	addwf	fsr2l,f,c
  5630  0005B6  5009               	movf	uartInterruptHandler@uart+1,w,c
  5631  0005B8  22DA               	addwfc	fsr2h,f,c
  5632  0005BA  0E00               	movlw	0
  5633  0005BC  88DB               	bsf	plusw2,4,c
  5634                           
  5635                           ;uart.c: 271: break;
  5636  0005BE  0012               	return	
  5637  0005C0                     i2l2846:
  5638                           
  5639                           ;uart.c: 273: else
  5640                           ;uart.c: 274: {
  5641                           ;uart.c: 275: if (oErr)
  5642  0005C0  5013               	movf	uartInterruptHandler@oErr,w,c
  5643  0005C2  B4D8               	btfsc	status,2,c
  5644  0005C4  D013               	goto	i2l2856
  5645                           
  5646                           ;uart.c: 276: {
  5647                           ;uart.c: 277: uart->status|=32;
  5648  0005C6  EE20 F012          	lfsr	2,18
  5649  0005CA  5008               	movf	uartInterruptHandler@uart,w,c
  5650  0005CC  26D9               	addwf	fsr2l,f,c
  5651  0005CE  5009               	movf	uartInterruptHandler@uart+1,w,c
  5652  0005D0  22DA               	addwfc	fsr2h,f,c
  5653  0005D2  0E00               	movlw	0
  5654  0005D4  8ADB               	bsf	plusw2,5,c
  5655                           
  5656                           ;uart.c: 278: *rcsta&=~0x10;
  5657  0005D6  C015  FFD9         	movff	uartInterruptHandler@rcsta,fsr2l
  5658  0005DA  C016  FFDA         	movff	uartInterruptHandler@rcsta+1,fsr2h
  5659  0005DE  0EEF               	movlw	239
  5660  0005E0  16DF               	andwf	indf2,f,c
  5661                           
  5662                           ;uart.c: 279: *rcsta|=0x10;
  5663  0005E2  C015  FFD9         	movff	uartInterruptHandler@rcsta,fsr2l
  5664  0005E6  C016  FFDA         	movff	uartInterruptHandler@rcsta+1,fsr2h
  5665  0005EA  D7E7               	goto	L20
  5666  0005EC                     i2l2856:
  5667                           
  5668                           ;uart.c: 282: else
  5669                           ;uart.c: 283: {
  5670                           ;uart.c: 284: data=*uart->rxReg;
  5671  0005EC  EE20 F010          	lfsr	2,16
  5672  0005F0  5008               	movf	uartInterruptHandler@uart,w,c
  5673  0005F2  26D9               	addwf	fsr2l,f,c
  5674  0005F4  5009               	movf	uartInterruptHandler@uart+1,w,c
  5675  0005F6  22DA               	addwfc	fsr2h,f,c
  5676  0005F8  CFDE F00A          	movff	postinc2,??_uartInterruptHandler
  5677  0005FC  CFDD F00B          	movff	postdec2,??_uartInterruptHandler+1
  5678  000600  C00A  FFD9         	movff	??_uartInterruptHandler,fsr2l
  5679  000604  C00B  FFDA         	movff	??_uartInterruptHandler+1,fsr2h
  5680  000608  50DF               	movf	indf2,w,c
  5681  00060A  6E17               	movwf	uartInterruptHandler@data,c
  5682                           
  5683                           ;uart.c: 285: fifoPut(&uart->recvFifo,data);
  5684  00060C  0E06               	movlw	6
  5685  00060E  2408               	addwf	uartInterruptHandler@uart,w,c
  5686  000610  6E01               	movwf	i2fifoPut@fifo,c
  5687  000612  0E00               	movlw	0
  5688  000614  2009               	addwfc	uartInterruptHandler@uart+1,w,c
  5689  000616  6E02               	movwf	i2fifoPut@fifo+1,c
  5690  000618  C017  F003         	movff	uartInterruptHandler@data,i2fifoPut@put
  5691  00061C  ECED  F006         	call	i2_fifoPut	;wreg free
  5692                           
  5693                           ;uart.c: 286: }
  5694                           ;uart.c: 287: }
  5695                           ;uart.c: 289: switch (uart->number)
  5696  000620  D00A               	goto	i2l2866
  5697  000622                     i2l2860:
  5698                           
  5699                           ;uart.c: 292: iRxFlag=PIR1bits.RC1IF;
  5700  000622  0E00               	movlw	0
  5701  000624  BA9E               	btfsc	3998,5,c	;volatile
  5702  000626  0E01               	movlw	1
  5703  000628  6E14               	movwf	uartInterruptHandler@iRxFlag,c
  5704                           
  5705                           ;uart.c: 293: break;
  5706  00062A  D012               	goto	i2l2868
  5707  00062C                     i2l2862:
  5708                           
  5709                           ;uart.c: 295: iRxFlag=PIR3bits.RC2IF;
  5710  00062C  0E00               	movlw	0
  5711  00062E  BAA4               	btfsc	4004,5,c	;volatile
  5712  000630  0E01               	movlw	1
  5713  000632  6E14               	movwf	uartInterruptHandler@iRxFlag,c
  5714                           
  5715                           ;uart.c: 297: }
  5716                           
  5717                           ;uart.c: 296: break;
  5718  000634  D00D               	goto	i2l2868
  5719  000636                     i2l2866:
  5720  000636  EE20 F013          	lfsr	2,19
  5721  00063A  5008               	movf	uartInterruptHandler@uart,w,c
  5722  00063C  26D9               	addwf	fsr2l,f,c
  5723  00063E  5009               	movf	uartInterruptHandler@uart+1,w,c
  5724  000640  22DA               	addwfc	fsr2h,f,c
  5725  000642  50DF               	movf	indf2,w,c
  5726                           
  5727                           ; Switch size 1, requested type "space"
  5728                           ; Number of cases is 2, Range of values is 1 to 2
  5729                           ; switch strategies available:
  5730                           ; Name         Instructions Cycles
  5731                           ; simple_byte            7     4 (average)
  5732                           ;	Chosen strategy is simple_byte
  5733  000644  0A01               	xorlw	1	; case 1
  5734  000646  B4D8               	btfsc	status,2,c
  5735  000648  D7EC               	goto	i2l2860
  5736  00064A  0A03               	xorlw	3	; case 2
  5737  00064C  B4D8               	btfsc	status,2,c
  5738  00064E  D7EE               	goto	i2l2862
  5739  000650                     i2l2868:
  5740  000650  5011               	movf	uartInterruptHandler@iRxEnable,w,c
  5741  000652  1414               	andwf	uartInterruptHandler@iRxFlag,w,c
  5742  000654  0900               	iorlw	0
  5743  000656  B4D8               	btfsc	status,2,c
  5744  000658  0012               	return	
  5745  00065A  D7A6               	goto	i2l2840
  5746  00065C                     __end_of_uartInterruptHandler:
  5747                           	opt stack 0
  5748                           pclatu	equ	0xFFB
  5749                           pclath	equ	0xFFA
  5750                           tblptru	equ	0xFF8
  5751                           tblptrh	equ	0xFF7
  5752                           tblptrl	equ	0xFF6
  5753                           tablat	equ	0xFF5
  5754                           prodh	equ	0xFF4
  5755                           prodl	equ	0xFF3
  5756                           intcon	equ	0xFF2
  5757                           intcon3	equ	0xFF0
  5758                           postinc0	equ	0xFEE
  5759                           fsr0h	equ	0xFEA
  5760                           fsr0l	equ	0xFE9
  5761                           wreg	equ	0xFE8
  5762                           indf1	equ	0xFE7
  5763                           postinc1	equ	0xFE6
  5764                           postdec1	equ	0xFE5
  5765                           fsr1h	equ	0xFE2
  5766                           fsr1l	equ	0xFE1
  5767                           indf2	equ	0xFDF
  5768                           postinc2	equ	0xFDE
  5769                           postdec2	equ	0xFDD
  5770                           plusw2	equ	0xFDB
  5771                           fsr2h	equ	0xFDA
  5772                           fsr2l	equ	0xFD9
  5773                           status	equ	0xFD8
  5774                           
  5775 ;; *************** function i2_uartEnableSend *****************
  5776 ;; Defined at:
  5777 ;;		line 139 in file "uart.c"
  5778 ;; Parameters:    Size  Location     Type
  5779 ;;  uart            2    0[COMRAM] PTR struct .
  5780 ;;		 -> uart(25), 
  5781 ;;  onoff           1    2[COMRAM] unsigned char 
  5782 ;; Auto vars:     Size  Location     Type
  5783 ;;		None
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  1    wreg      void 
  5786 ;; Registers used:
  5787 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5793 ;;      Params:         3       0       0       0       0       0       0
  5794 ;;      Locals:         0       0       0       0       0       0       0
  5795 ;;      Temps:          1       0       0       0       0       0       0
  5796 ;;      Totals:         4       0       0       0       0       0       0
  5797 ;;Total ram usage:        4 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; This function calls:
  5800 ;;		Nothing
  5801 ;; This function is called by:
  5802 ;;		_uartInterruptHandler
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           	psect	text29
  5807  0013F2                     __ptext29:
  5808                           	opt stack 0
  5809  0013F2                     i2_uartEnableSend:
  5810                           	opt stack 24
  5811                           
  5812                           ;uart.c: 141: switch (uart->number)
  5813                           
  5814                           ;incstack = 0
  5815  0013F2  D016               	goto	i2l2678
  5816  0013F4                     i2l2672:
  5817  0013F4  C003  F004         	movff	i2uartEnableSend@onoff,??i2_uartEnableSend
  5818  0013F8  0E01               	movlw	1
  5819  0013FA  1604               	andwf	??i2_uartEnableSend,f,c
  5820  0013FC  3A04               	swapf	??i2_uartEnableSend,f,c
  5821  0013FE  509D               	movf	3997,w,c	;volatile
  5822  001400  1804               	xorwf	??i2_uartEnableSend,w,c
  5823  001402  0BEF               	andlw	-17
  5824  001404  1804               	xorwf	??i2_uartEnableSend,w,c
  5825  001406  6E9D               	movwf	3997,c	;volatile
  5826  001408  0012               	return	
  5827  00140A                     i2l2674:
  5828  00140A  C003  F004         	movff	i2uartEnableSend@onoff,??i2_uartEnableSend
  5829  00140E  0E01               	movlw	1
  5830  001410  1604               	andwf	??i2_uartEnableSend,f,c
  5831  001412  3A04               	swapf	??i2_uartEnableSend,f,c
  5832  001414  50A3               	movf	4003,w,c	;volatile
  5833  001416  1804               	xorwf	??i2_uartEnableSend,w,c
  5834  001418  0BEF               	andlw	-17
  5835  00141A  1804               	xorwf	??i2_uartEnableSend,w,c
  5836  00141C  6EA3               	movwf	4003,c	;volatile
  5837                           
  5838                           ;uart.c: 145: }
  5839  00141E  0012               	return	
  5840  001420                     i2l2678:
  5841  001420  EE20 F013          	lfsr	2,19
  5842  001424  5001               	movf	i2uartEnableSend@uart,w,c
  5843  001426  26D9               	addwf	fsr2l,f,c
  5844  001428  5002               	movf	i2uartEnableSend@uart+1,w,c
  5845  00142A  22DA               	addwfc	fsr2h,f,c
  5846  00142C  50DF               	movf	indf2,w,c
  5847                           
  5848                           ; Switch size 1, requested type "space"
  5849                           ; Number of cases is 2, Range of values is 1 to 2
  5850                           ; switch strategies available:
  5851                           ; Name         Instructions Cycles
  5852                           ; simple_byte            7     4 (average)
  5853                           ;	Chosen strategy is simple_byte
  5854  00142E  0A01               	xorlw	1	; case 1
  5855  001430  B4D8               	btfsc	status,2,c
  5856  001432  D7E0               	goto	i2l2672
  5857  001434  0A03               	xorlw	3	; case 2
  5858  001436  A4D8               	btfss	status,2,c
  5859  001438  0012               	return	
  5860  00143A  D7E7               	goto	i2l2674
  5861  00143C                     __end_ofi2_uartEnableSend:
  5862                           	opt stack 0
  5863                           pclatu	equ	0xFFB
  5864                           pclath	equ	0xFFA
  5865                           tblptru	equ	0xFF8
  5866                           tblptrh	equ	0xFF7
  5867                           tblptrl	equ	0xFF6
  5868                           tablat	equ	0xFF5
  5869                           prodh	equ	0xFF4
  5870                           prodl	equ	0xFF3
  5871                           intcon	equ	0xFF2
  5872                           intcon3	equ	0xFF0
  5873                           postinc0	equ	0xFEE
  5874                           fsr0h	equ	0xFEA
  5875                           fsr0l	equ	0xFE9
  5876                           wreg	equ	0xFE8
  5877                           indf1	equ	0xFE7
  5878                           postinc1	equ	0xFE6
  5879                           postdec1	equ	0xFE5
  5880                           fsr1h	equ	0xFE2
  5881                           fsr1l	equ	0xFE1
  5882                           indf2	equ	0xFDF
  5883                           postinc2	equ	0xFDE
  5884                           postdec2	equ	0xFDD
  5885                           plusw2	equ	0xFDB
  5886                           fsr2h	equ	0xFDA
  5887                           fsr2l	equ	0xFD9
  5888                           status	equ	0xFD8
  5889                           
  5890 ;; *************** function i2_fifoPut *****************
  5891 ;; Defined at:
  5892 ;;		line 12 in file "fifo.c"
  5893 ;; Parameters:    Size  Location     Type
  5894 ;;  fifo            2    0[COMRAM] PTR struct .
  5895 ;;		 -> uart(25), 
  5896 ;;  put             1    2[COMRAM] unsigned char 
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;		None
  5899 ;; Return value:  Size  Location     Type
  5900 ;;                  1    wreg      unsigned char 
  5901 ;; Registers used:
  5902 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5908 ;;      Params:         3       0       0       0       0       0       0
  5909 ;;      Locals:         0       0       0       0       0       0       0
  5910 ;;      Temps:          3       0       0       0       0       0       0
  5911 ;;      Totals:         6       0       0       0       0       0       0
  5912 ;;Total ram usage:        6 bytes
  5913 ;; Hardware stack levels used:    1
  5914 ;; This function calls:
  5915 ;;		Nothing
  5916 ;; This function is called by:
  5917 ;;		_uartInterruptHandler
  5918 ;; This function uses a non-reentrant model
  5919 ;;
  5920                           
  5921                           	psect	text30
  5922  000DDA                     __ptext30:
  5923                           	opt stack 0
  5924  000DDA                     i2_fifoPut:
  5925                           	opt stack 24
  5926                           
  5927                           ;fifo.c: 14: if ((fifo->status & 1)==1)
  5928                           
  5929                           ;incstack = 0
  5930  000DDA  EE20 F003          	lfsr	2,3
  5931  000DDE  5001               	movf	i2fifoPut@fifo,w,c
  5932  000DE0  26D9               	addwf	fsr2l,f,c
  5933  000DE2  5002               	movf	i2fifoPut@fifo+1,w,c
  5934  000DE4  22DA               	addwfc	fsr2h,f,c
  5935  000DE6  B0DF               	btfsc	indf2,0,c
  5936  000DE8  0012               	return	
  5937                           
  5938                           ;fifo.c: 17: }
  5939                           ;fifo.c: 19: fifo->buf[fifo->putPtr]=put;
  5940                           
  5941                           ;fifo.c: 15: {
  5942                           ;fifo.c: 16: return 0;
  5943                           ;	Return value of i2_fifoPut is never used
  5944  000DEA  EE20 F004          	lfsr	2,4
  5945  000DEE  5001               	movf	i2fifoPut@fifo,w,c
  5946  000DF0  26D9               	addwf	fsr2l,f,c
  5947  000DF2  5002               	movf	i2fifoPut@fifo+1,w,c
  5948  000DF4  22DA               	addwfc	fsr2h,f,c
  5949  000DF6  50DF               	movf	indf2,w,c
  5950  000DF8  6E04               	movwf	??i2_fifoPut& (0+255),c
  5951  000DFA  5004               	movf	??i2_fifoPut,w,c
  5952  000DFC  0D01               	mullw	1
  5953  000DFE  C001  FFD9         	movff	i2fifoPut@fifo,fsr2l
  5954  000E02  C002  FFDA         	movff	i2fifoPut@fifo+1,fsr2h
  5955  000E06  CFDE F005          	movff	postinc2,??i2_fifoPut+1
  5956  000E0A  CFDD F006          	movff	postdec2,??i2_fifoPut+2
  5957  000E0E  50F3               	movf	prodl,w,c
  5958  000E10  2405               	addwf	??i2_fifoPut+1,w,c
  5959  000E12  6ED9               	movwf	fsr2l,c
  5960  000E14  50F4               	movf	prodh,w,c
  5961  000E16  2006               	addwfc	??i2_fifoPut+2,w,c
  5962  000E18  6EDA               	movwf	fsr2h,c
  5963  000E1A  C003  FFDF         	movff	i2fifoPut@put,indf2
  5964                           
  5965                           ;fifo.c: 20: fifo->status&=~2;
  5966  000E1E  EE20 F003          	lfsr	2,3
  5967  000E22  5001               	movf	i2fifoPut@fifo,w,c
  5968  000E24  26D9               	addwf	fsr2l,f,c
  5969  000E26  5002               	movf	i2fifoPut@fifo+1,w,c
  5970  000E28  22DA               	addwfc	fsr2h,f,c
  5971  000E2A  0EFD               	movlw	253
  5972  000E2C  16DF               	andwf	indf2,f,c
  5973                           
  5974                           ;fifo.c: 22: fifo->putPtr--;
  5975  000E2E  EE20 F004          	lfsr	2,4
  5976  000E32  5001               	movf	i2fifoPut@fifo,w,c
  5977  000E34  26D9               	addwf	fsr2l,f,c
  5978  000E36  5002               	movf	i2fifoPut@fifo+1,w,c
  5979  000E38  22DA               	addwfc	fsr2h,f,c
  5980  000E3A  06DF               	decf	indf2,f,c
  5981                           
  5982                           ;fifo.c: 23: if (fifo->putPtr > fifo->maxPtr)
  5983  000E3C  EE20 F004          	lfsr	2,4
  5984  000E40  5001               	movf	i2fifoPut@fifo,w,c
  5985  000E42  26D9               	addwf	fsr2l,f,c
  5986  000E44  5002               	movf	i2fifoPut@fifo+1,w,c
  5987  000E46  22DA               	addwfc	fsr2h,f,c
  5988  000E48  EE10 F002          	lfsr	1,2
  5989  000E4C  5001               	movf	i2fifoPut@fifo,w,c
  5990  000E4E  26E1               	addwf	fsr1l,f,c
  5991  000E50  5002               	movf	i2fifoPut@fifo+1,w,c
  5992  000E52  22E2               	addwfc	fsr1h,f,c
  5993  000E54  50DE               	movf	postinc2,w,c
  5994  000E56  5CE6               	subwf	postinc1,w,c
  5995  000E58  B0D8               	btfsc	status,0,c
  5996  000E5A  D00E               	goto	i2l8
  5997                           
  5998                           ;fifo.c: 24: {
  5999                           ;fifo.c: 25: fifo->putPtr=fifo->maxPtr;
  6000  000E5C  EE20 F002          	lfsr	2,2
  6001  000E60  5001               	movf	i2fifoPut@fifo,w,c
  6002  000E62  26D9               	addwf	fsr2l,f,c
  6003  000E64  5002               	movf	i2fifoPut@fifo+1,w,c
  6004  000E66  22DA               	addwfc	fsr2h,f,c
  6005  000E68  EE10 F004          	lfsr	1,4
  6006  000E6C  5001               	movf	i2fifoPut@fifo,w,c
  6007  000E6E  26E1               	addwf	fsr1l,f,c
  6008  000E70  5002               	movf	i2fifoPut@fifo+1,w,c
  6009  000E72  22E2               	addwfc	fsr1h,f,c
  6010  000E74  CFDF FFE7          	movff	indf2,indf1
  6011  000E78                     i2l8:
  6012                           
  6013                           ;fifo.c: 26: }
  6014                           ;fifo.c: 28: if (fifo->putPtr==fifo->getPtr)
  6015  000E78  EE20 F005          	lfsr	2,5
  6016  000E7C  5001               	movf	i2fifoPut@fifo,w,c
  6017  000E7E  26D9               	addwf	fsr2l,f,c
  6018  000E80  5002               	movf	i2fifoPut@fifo+1,w,c
  6019  000E82  22DA               	addwfc	fsr2h,f,c
  6020  000E84  EE10 F004          	lfsr	1,4
  6021  000E88  5001               	movf	i2fifoPut@fifo,w,c
  6022  000E8A  26E1               	addwf	fsr1l,f,c
  6023  000E8C  5002               	movf	i2fifoPut@fifo+1,w,c
  6024  000E8E  22E2               	addwfc	fsr1h,f,c
  6025  000E90  50DE               	movf	postinc2,w,c
  6026  000E92  18E6               	xorwf	postinc1,w,c
  6027  000E94  A4D8               	btfss	status,2,c
  6028  000E96  0012               	return	
  6029                           
  6030                           ;fifo.c: 29: {
  6031                           ;fifo.c: 30: fifo->status|=1;
  6032  000E98  EE20 F003          	lfsr	2,3
  6033  000E9C  5001               	movf	i2fifoPut@fifo,w,c
  6034  000E9E  26D9               	addwf	fsr2l,f,c
  6035  000EA0  5002               	movf	i2fifoPut@fifo+1,w,c
  6036  000EA2  22DA               	addwfc	fsr2h,f,c
  6037  000EA4  0E00               	movlw	0
  6038  000EA6  80DB               	bsf	plusw2,0,c
  6039  000EA8  0012               	return	
  6040  000EAA                     __end_ofi2_fifoPut:
  6041                           	opt stack 0
  6042                           pclatu	equ	0xFFB
  6043                           pclath	equ	0xFFA
  6044                           tblptru	equ	0xFF8
  6045                           tblptrh	equ	0xFF7
  6046                           tblptrl	equ	0xFF6
  6047                           tablat	equ	0xFF5
  6048                           prodh	equ	0xFF4
  6049                           prodl	equ	0xFF3
  6050                           intcon	equ	0xFF2
  6051                           intcon3	equ	0xFF0
  6052                           postinc0	equ	0xFEE
  6053                           fsr0h	equ	0xFEA
  6054                           fsr0l	equ	0xFE9
  6055                           wreg	equ	0xFE8
  6056                           indf1	equ	0xFE7
  6057                           postinc1	equ	0xFE6
  6058                           postdec1	equ	0xFE5
  6059                           fsr1h	equ	0xFE2
  6060                           fsr1l	equ	0xFE1
  6061                           indf2	equ	0xFDF
  6062                           postinc2	equ	0xFDE
  6063                           postdec2	equ	0xFDD
  6064                           plusw2	equ	0xFDB
  6065                           fsr2h	equ	0xFDA
  6066                           fsr2l	equ	0xFD9
  6067                           status	equ	0xFD8
  6068                           
  6069 ;; *************** function i2_fifoGet *****************
  6070 ;; Defined at:
  6071 ;;		line 74 in file "fifo.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;  fifo            2    0[COMRAM] PTR struct .
  6074 ;;		 -> uart(25), 
  6075 ;;  get             2    2[COMRAM] PTR unsigned char 
  6076 ;;		 -> uartTransmitAll@data(1), uartInterruptHandler@data(1), RAM(1535), fifoGetBuf@elem(1), 
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;		None
  6079 ;; Return value:  Size  Location     Type
  6080 ;;                  1    wreg      unsigned char 
  6081 ;; Registers used:
  6082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6083 ;; Tracked objects:
  6084 ;;		On entry : 0/0
  6085 ;;		On exit  : 0/0
  6086 ;;		Unchanged: 0/0
  6087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6088 ;;      Params:         4       0       0       0       0       0       0
  6089 ;;      Locals:         0       0       0       0       0       0       0
  6090 ;;      Temps:          3       0       0       0       0       0       0
  6091 ;;      Totals:         7       0       0       0       0       0       0
  6092 ;;Total ram usage:        7 bytes
  6093 ;; Hardware stack levels used:    1
  6094 ;; This function calls:
  6095 ;;		Nothing
  6096 ;; This function is called by:
  6097 ;;		_uartInterruptHandler
  6098 ;; This function uses a non-reentrant model
  6099 ;;
  6100                           
  6101                           	psect	text31
  6102  000CFC                     __ptext31:
  6103                           	opt stack 0
  6104  000CFC                     i2_fifoGet:
  6105                           	opt stack 24
  6106                           
  6107                           ;fifo.c: 76: if ((fifo->status & 2)==2)
  6108                           
  6109                           ;incstack = 0
  6110  000CFC  EE20 F003          	lfsr	2,3
  6111  000D00  5001               	movf	i2fifoGet@fifo,w,c
  6112  000D02  26D9               	addwf	fsr2l,f,c
  6113  000D04  5002               	movf	i2fifoGet@fifo+1,w,c
  6114  000D06  22DA               	addwfc	fsr2h,f,c
  6115  000D08  A2DF               	btfss	indf2,1,c
  6116  000D0A  D002               	goto	i2l2654
  6117                           
  6118                           ;fifo.c: 77: {
  6119                           ;fifo.c: 78: return 0;
  6120  000D0C  0E00               	movlw	0
  6121  000D0E  0012               	return	
  6122  000D10                     i2l2654:
  6123                           
  6124                           ;fifo.c: 79: }
  6125                           ;fifo.c: 80: *get=fifo->buf[fifo->getPtr];
  6126  000D10  EE20 F005          	lfsr	2,5
  6127  000D14  5001               	movf	i2fifoGet@fifo,w,c
  6128  000D16  26D9               	addwf	fsr2l,f,c
  6129  000D18  5002               	movf	i2fifoGet@fifo+1,w,c
  6130  000D1A  22DA               	addwfc	fsr2h,f,c
  6131  000D1C  50DF               	movf	indf2,w,c
  6132  000D1E  6E05               	movwf	??i2_fifoGet& (0+255),c
  6133  000D20  5005               	movf	??i2_fifoGet,w,c
  6134  000D22  0D01               	mullw	1
  6135  000D24  C001  FFD9         	movff	i2fifoGet@fifo,fsr2l
  6136  000D28  C002  FFDA         	movff	i2fifoGet@fifo+1,fsr2h
  6137  000D2C  CFDE F006          	movff	postinc2,??i2_fifoGet+1
  6138  000D30  CFDD F007          	movff	postdec2,??i2_fifoGet+2
  6139  000D34  50F3               	movf	prodl,w,c
  6140  000D36  2406               	addwf	??i2_fifoGet+1,w,c
  6141  000D38  6ED9               	movwf	fsr2l,c
  6142  000D3A  50F4               	movf	prodh,w,c
  6143  000D3C  2007               	addwfc	??i2_fifoGet+2,w,c
  6144  000D3E  6EDA               	movwf	fsr2h,c
  6145  000D40  C003  FFE1         	movff	i2fifoGet@get,fsr1l
  6146  000D44  C004  FFE2         	movff	i2fifoGet@get+1,fsr1h
  6147  000D48  CFDF FFE7          	movff	indf2,indf1
  6148                           
  6149                           ;fifo.c: 81: fifo->status&=~1;
  6150  000D4C  EE20 F003          	lfsr	2,3
  6151  000D50  5001               	movf	i2fifoGet@fifo,w,c
  6152  000D52  26D9               	addwf	fsr2l,f,c
  6153  000D54  5002               	movf	i2fifoGet@fifo+1,w,c
  6154  000D56  22DA               	addwfc	fsr2h,f,c
  6155  000D58  0EFE               	movlw	254
  6156  000D5A  16DF               	andwf	indf2,f,c
  6157                           
  6158                           ;fifo.c: 83: fifo->getPtr--;
  6159  000D5C  EE20 F005          	lfsr	2,5
  6160  000D60  5001               	movf	i2fifoGet@fifo,w,c
  6161  000D62  26D9               	addwf	fsr2l,f,c
  6162  000D64  5002               	movf	i2fifoGet@fifo+1,w,c
  6163  000D66  22DA               	addwfc	fsr2h,f,c
  6164  000D68  06DF               	decf	indf2,f,c
  6165                           
  6166                           ;fifo.c: 84: if (fifo->getPtr > fifo->maxPtr)
  6167  000D6A  EE20 F005          	lfsr	2,5
  6168  000D6E  5001               	movf	i2fifoGet@fifo,w,c
  6169  000D70  26D9               	addwf	fsr2l,f,c
  6170  000D72  5002               	movf	i2fifoGet@fifo+1,w,c
  6171  000D74  22DA               	addwfc	fsr2h,f,c
  6172  000D76  EE10 F002          	lfsr	1,2
  6173  000D7A  5001               	movf	i2fifoGet@fifo,w,c
  6174  000D7C  26E1               	addwf	fsr1l,f,c
  6175  000D7E  5002               	movf	i2fifoGet@fifo+1,w,c
  6176  000D80  22E2               	addwfc	fsr1h,f,c
  6177  000D82  50DE               	movf	postinc2,w,c
  6178  000D84  5CE6               	subwf	postinc1,w,c
  6179  000D86  B0D8               	btfsc	status,0,c
  6180  000D88  D00E               	goto	i2l34
  6181                           
  6182                           ;fifo.c: 85: {
  6183                           ;fifo.c: 86: fifo->getPtr=fifo->maxPtr;
  6184  000D8A  EE20 F002          	lfsr	2,2
  6185  000D8E  5001               	movf	i2fifoGet@fifo,w,c
  6186  000D90  26D9               	addwf	fsr2l,f,c
  6187  000D92  5002               	movf	i2fifoGet@fifo+1,w,c
  6188  000D94  22DA               	addwfc	fsr2h,f,c
  6189  000D96  EE10 F005          	lfsr	1,5
  6190  000D9A  5001               	movf	i2fifoGet@fifo,w,c
  6191  000D9C  26E1               	addwf	fsr1l,f,c
  6192  000D9E  5002               	movf	i2fifoGet@fifo+1,w,c
  6193  000DA0  22E2               	addwfc	fsr1h,f,c
  6194  000DA2  CFDF FFE7          	movff	indf2,indf1
  6195  000DA6                     i2l34:
  6196                           
  6197                           ;fifo.c: 87: }
  6198                           ;fifo.c: 89: if (fifo->getPtr==fifo->putPtr)
  6199  000DA6  EE20 F004          	lfsr	2,4
  6200  000DAA  5001               	movf	i2fifoGet@fifo,w,c
  6201  000DAC  26D9               	addwf	fsr2l,f,c
  6202  000DAE  5002               	movf	i2fifoGet@fifo+1,w,c
  6203  000DB0  22DA               	addwfc	fsr2h,f,c
  6204  000DB2  EE10 F005          	lfsr	1,5
  6205  000DB6  5001               	movf	i2fifoGet@fifo,w,c
  6206  000DB8  26E1               	addwf	fsr1l,f,c
  6207  000DBA  5002               	movf	i2fifoGet@fifo+1,w,c
  6208  000DBC  22E2               	addwfc	fsr1h,f,c
  6209  000DBE  50DE               	movf	postinc2,w,c
  6210  000DC0  18E6               	xorwf	postinc1,w,c
  6211  000DC2  A4D8               	btfss	status,2,c
  6212  000DC4  D008               	goto	i2l2666
  6213                           
  6214                           ;fifo.c: 90: {
  6215                           ;fifo.c: 91: fifo->status|=2;
  6216  000DC6  EE20 F003          	lfsr	2,3
  6217  000DCA  5001               	movf	i2fifoGet@fifo,w,c
  6218  000DCC  26D9               	addwf	fsr2l,f,c
  6219  000DCE  5002               	movf	i2fifoGet@fifo+1,w,c
  6220  000DD0  22DA               	addwfc	fsr2h,f,c
  6221  000DD2  0E00               	movlw	0
  6222  000DD4  82DB               	bsf	plusw2,1,c
  6223  000DD6                     i2l2666:
  6224                           
  6225                           ;fifo.c: 92: }
  6226                           ;fifo.c: 93: return 1;
  6227  000DD6  0E01               	movlw	1
  6228  000DD8  0012               	return	
  6229  000DDA                     __end_ofi2_fifoGet:
  6230                           	opt stack 0
  6231  0000                     pclatu	equ	0xFFB
  6232                           pclath	equ	0xFFA
  6233                           tblptru	equ	0xFF8
  6234                           tblptrh	equ	0xFF7
  6235                           tblptrl	equ	0xFF6
  6236                           tablat	equ	0xFF5
  6237                           prodh	equ	0xFF4
  6238                           prodl	equ	0xFF3
  6239                           intcon	equ	0xFF2
  6240                           intcon3	equ	0xFF0
  6241                           postinc0	equ	0xFEE
  6242                           fsr0h	equ	0xFEA
  6243                           fsr0l	equ	0xFE9
  6244                           wreg	equ	0xFE8
  6245                           indf1	equ	0xFE7
  6246                           postinc1	equ	0xFE6
  6247                           postdec1	equ	0xFE5
  6248                           fsr1h	equ	0xFE2
  6249                           fsr1l	equ	0xFE1
  6250                           indf2	equ	0xFDF
  6251                           postinc2	equ	0xFDE
  6252                           postdec2	equ	0xFDD
  6253                           plusw2	equ	0xFDB
  6254                           fsr2h	equ	0xFDA
  6255                           fsr2l	equ	0xFD9
  6256                           status	equ	0xFD8
  6257                           pclatu	equ	0xFFB
  6258                           pclath	equ	0xFFA
  6259                           tblptru	equ	0xFF8
  6260                           tblptrh	equ	0xFF7
  6261                           tblptrl	equ	0xFF6
  6262                           tablat	equ	0xFF5
  6263                           prodh	equ	0xFF4
  6264                           prodl	equ	0xFF3
  6265                           intcon	equ	0xFF2
  6266                           intcon3	equ	0xFF0
  6267                           postinc0	equ	0xFEE
  6268                           fsr0h	equ	0xFEA
  6269                           fsr0l	equ	0xFE9
  6270                           wreg	equ	0xFE8
  6271                           indf1	equ	0xFE7
  6272                           postinc1	equ	0xFE6
  6273                           postdec1	equ	0xFE5
  6274                           fsr1h	equ	0xFE2
  6275                           fsr1l	equ	0xFE1
  6276                           indf2	equ	0xFDF
  6277                           postinc2	equ	0xFDE
  6278                           postdec2	equ	0xFDD
  6279                           plusw2	equ	0xFDB
  6280                           fsr2h	equ	0xFDA
  6281                           fsr2l	equ	0xFD9
  6282                           status	equ	0xFD8
  6283                           
  6284                           	psect	rparam
  6285  0000                     pclatu	equ	0xFFB
  6286                           pclath	equ	0xFFA
  6287                           tblptru	equ	0xFF8
  6288                           tblptrh	equ	0xFF7
  6289                           tblptrl	equ	0xFF6
  6290                           tablat	equ	0xFF5
  6291                           prodh	equ	0xFF4
  6292                           prodl	equ	0xFF3
  6293                           intcon	equ	0xFF2
  6294                           intcon3	equ	0xFF0
  6295                           postinc0	equ	0xFEE
  6296                           fsr0h	equ	0xFEA
  6297                           fsr0l	equ	0xFE9
  6298                           wreg	equ	0xFE8
  6299                           indf1	equ	0xFE7
  6300                           postinc1	equ	0xFE6
  6301                           postdec1	equ	0xFE5
  6302                           fsr1h	equ	0xFE2
  6303                           fsr1l	equ	0xFE1
  6304                           indf2	equ	0xFDF
  6305                           postinc2	equ	0xFDE
  6306                           postdec2	equ	0xFDD
  6307                           plusw2	equ	0xFDB
  6308                           fsr2h	equ	0xFDA
  6309                           fsr2l	equ	0xFD9
  6310                           status	equ	0xFD8
  6311                           
  6312                           	psect	temp
  6313  00003A                     btemp:
  6314                           	opt stack 0
  6315  00003A                     	ds	1
  6316  0000                     int$flags	set	btemp
  6317                           pclatu	equ	0xFFB
  6318                           pclath	equ	0xFFA
  6319                           tblptru	equ	0xFF8
  6320                           tblptrh	equ	0xFF7
  6321                           tblptrl	equ	0xFF6
  6322                           tablat	equ	0xFF5
  6323                           prodh	equ	0xFF4
  6324                           prodl	equ	0xFF3
  6325                           intcon	equ	0xFF2
  6326                           intcon3	equ	0xFF0
  6327                           postinc0	equ	0xFEE
  6328                           fsr0h	equ	0xFEA
  6329                           fsr0l	equ	0xFE9
  6330                           wreg	equ	0xFE8
  6331                           indf1	equ	0xFE7
  6332                           postinc1	equ	0xFE6
  6333                           postdec1	equ	0xFE5
  6334                           fsr1h	equ	0xFE2
  6335                           fsr1l	equ	0xFE1
  6336                           indf2	equ	0xFDF
  6337                           postinc2	equ	0xFDE
  6338                           postdec2	equ	0xFDD
  6339                           plusw2	equ	0xFDB
  6340                           fsr2h	equ	0xFDA
  6341                           fsr2l	equ	0xFD9
  6342                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         790
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      57
    BANK0           160     56      88
    BANK1           256      0     238
    BANK2           256      0     238
    BANK3           256      0     132
    BANK4           256      0     132
    BANK5           256      0       0

Pointer List with Targets:

    uart.buf	PTR unsigned char  size(2) Largest target is 0
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    ledTact@led	PTR struct . size(2) Largest target is 9
		 -> ledTx(COMRAM[9]), ledRx(COMRAM[9]), 

    ledFlash@led	PTR struct . size(2) Largest target is 9
		 -> ledTx(COMRAM[9]), ledRx(COMRAM[9]), 

    ledOff@led	PTR struct . size(2) Largest target is 9
		 -> ledTx(COMRAM[9]), ledRx(COMRAM[9]), 

    ledOn@led	PTR struct . size(2) Largest target is 9
		 -> ledTx(COMRAM[9]), ledRx(COMRAM[9]), 

    ledInit@led	PTR struct . size(2) Largest target is 9
		 -> ledTx(COMRAM[9]), ledRx(COMRAM[9]), 

    uartIsTransmitting@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartIsTransmitting@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartIsTransmitting@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartIsTransmitting@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartIsTransmitting@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartRecvBufferFull@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartRecvBufferFull@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartRecvBufferFull@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartRecvBufferFull@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartRecvBufferFull@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartSendBufferFull@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartSendBufferFull@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartSendBufferFull@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartSendBufferFull@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartSendBufferFull@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartStatus@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartStatus@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartStatus@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartStatus@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartStatus@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartTransmitAll@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartTransmitAll@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartTransmitAll@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartTransmitAll@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartTransmitAll@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartInterruptHandler@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartInterruptHandler@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartInterruptHandler@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartInterruptHandler@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartInterruptHandler@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartInterruptHandler@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    uartInterruptHandler@txsta	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXSTA2(SFR_1[1]), TXSTA1(SFR_1[1]), 

    uartInterruptHandler@rcsta	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCSTA2(SFR_1[1]), RCSTA1(SFR_1[1]), 

    uartRecvBuf@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartRecvBuf@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartRecvBuf@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartRecvBuf@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartRecvBuf@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartRecvByte@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartRecvByte@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartRecvByte@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartRecvByte@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartRecvByte@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartRecvByte@data	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 

    uartRecvByte@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    uartSendBuf@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartSendBuf@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartSendBuf@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartSendBuf@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartSendBuf@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartSendBuf@str	PTR unsigned char  size(2) Largest target is 132
		 -> packetRecvBuffer(BANK1[132]), 

    uartSendBuf@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    uartSendString0@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartSendString0@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartSendString0@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartSendString0@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartSendString0@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartSendString@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartSendString@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartSendString@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartSendString@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartSendString@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartSendByte@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartSendByte@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartSendByte@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartSendByte@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartSendByte@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartSendByte@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    uartEnableHalfDuplex@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartEnableHalfDuplex@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartEnableHalfDuplex@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartEnableHalfDuplex@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartEnableHalfDuplex@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartEnableRecv@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartEnableRecv@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartEnableRecv@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartEnableRecv@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartEnableRecv@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartEnableRecv@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    uartEnableSend@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartEnableSend@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartEnableSend@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartEnableSend@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartEnableSend@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartEnableSend@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    uartInitHalfDuplex@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartInitHalfDuplex@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartInitHalfDuplex@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartInitHalfDuplex@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartInitHalfDuplex@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartInitHalfDuplex@port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartInitHalfDuplex@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    SetBaudRate@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    SetBaudRate@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    SetBaudRate@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    SetBaudRate@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    SetBaudRate@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    SetBaudRate@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    GetBaudRateConfig@brgl	PTR unsigned char  size(2) Largest target is 1
		 -> SetBaudRate@l(BANK0[1]), 

    GetBaudRateConfig@brgh	PTR unsigned char  size(2) Largest target is 1
		 -> SetBaudRate@h(BANK0[1]), 

    GetBaudRateConfig@setBRG16	PTR unsigned char  size(2) Largest target is 1
		 -> SetBaudRate@brg16(BANK0[1]), 

    uartInit@recvbuf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), 

    uartInit@sendbuf	PTR unsigned char  size(2) Largest target is 132
		 -> uartSendBuffer(BANK2[132]), 

    uartInit@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartInit@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartInit@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartInit@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartInit@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uartInit@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    S193$hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    S193$rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    S193$txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    fifoWipeBuffer@fifoBuf.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    fifoGetBuf@fifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    fifoGet@get	PTR unsigned char  size(2) Largest target is 1535
		 -> uartTransmitAll@data(COMRAM[1]), uartInterruptHandler@data(COMRAM[1]), RAM(DATA[1535]), fifoGetBuf@elem(COMRAM[1]), 

    fifoGet@fifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    fifoGet@fifo	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    fifoPutBuf@buf	PTR unsigned char  size(2) Largest target is 132
		 -> packetRecvBuffer(BANK1[132]), 

    fifoPutBuf@fifo	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    fifoPut@fifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    fifoPut@fifo	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    S21$buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    fifoInit@fifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    fifoInit@buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK3[132]), uartSendBuffer(BANK2[132]), 

    fifoInit@fifo	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 


Critical Paths under _main in COMRAM

    _uartSendByte->_uartEnableSend
    _uartSendBuf->_uartEnableSend
    _InitUart->_uartEnableRecv
    _InitUart->_uartEnableSend
    _InitSystem->_SetupInternalOscillator

Critical Paths under _IntHighRoutine in COMRAM

    _IntHighRoutine->_uartInterruptHandler
    _uartInterruptHandler->i2_fifoGet

Critical Paths under _main in BANK0

    _uartSendByte->_fifoPut
    _uartSendBuf->_fifoPutBuf
    _fifoPutBuf->_fifoPut
    _uartRecvByte->_fifoGet
    _InitUart->_uartInit
    _uartInit->_SetBaudRate
    _SetBaudRate->_GetBaudRateConfig
    _InitSystem->_ledInit
    _LoadConfigData->_EERead

Critical Paths under _IntHighRoutine in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _IntHighRoutine in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _IntHighRoutine in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _IntHighRoutine in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _IntHighRoutine in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _IntHighRoutine in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   21383
                                             51 BANK0      5     5      0
                         _InitSystem
                           _InitUart
                              _crcOk
                   _decodeRecvBuffer
                           _ledFlash
                             _ledOff
                              _ledOn
                            _ledTact
                            _myDelay
                       _uartRecvByte
                        _uartSendBuf
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (1) _uartSendByte                                         4     1      3    6250
                                              6 BANK0      4     1      3
                            _fifoPut
                     _uartEnableSend
 ---------------------------------------------------------------------------------
 (1) _uartSendBuf                                          6     1      5    3860
                                             11 BANK0      6     1      5
                         _fifoPutBuf
                     _uartEnableSend
 ---------------------------------------------------------------------------------
 (2) _fifoPutBuf                                           5     0      5    1602
                                              6 BANK0      5     0      5
                            _fifoPut
 ---------------------------------------------------------------------------------
 (2) _fifoPut                                              6     3      3    1233
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (1) _uartRecvByte                                         4     0      4    1295
                                              7 BANK0      4     0      4
                            _fifoGet
 ---------------------------------------------------------------------------------
 (2) _fifoGet                                              7     3      4    1053
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _myDelay                                              6     2      4     155
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _ledTact                                              4     2      2     676
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _ledOn                                                2     0      2     273
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ledOff                                               2     0      2     273
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ledFlash                                             2     0      2     242
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _decodeRecvBuffer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _crcOk                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _InitUart                                             0     0      0    6573
                     _uartEnableRecv
                     _uartEnableSend
                           _uartInit
                 _uartInitHalfDuplex
 ---------------------------------------------------------------------------------
 (2) _uartInitHalfDuplex                                   8     3      5     549
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _uartInit                                            20     3     17    3928
                                             34 BANK0     17     0     17
                        _SetBaudRate
                           _fifoInit
 ---------------------------------------------------------------------------------
 (3) _fifoInit                                             5     0      5     819
                                              0 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (3) _SetBaudRate                                         14     4     10    1769
                                             20 BANK0     14     4     10
                  _GetBaudRateConfig
 ---------------------------------------------------------------------------------
 (4) _GetBaudRateConfig                                   20     6     14     799
                                              0 BANK0     20     6     14
 ---------------------------------------------------------------------------------
 (2) _uartEnableSend                                       4     1      3    1823
                                             37 COMRAM     1     1      0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _uartEnableRecv                                       4     1      3     273
                                             37 COMRAM     1     1      0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _InitSystem                                           0     0      0    1247
                     _LoadConfigData
            _SetupInternalOscillator
                            _ledInit
 ---------------------------------------------------------------------------------
 (2) _ledInit                                              7     0      7     968
                                              0 BANK0      7     0      7
 ---------------------------------------------------------------------------------
 (2) _SetupInternalOscillator                              3     2      1     214
                                             37 COMRAM     1     0      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _LoadConfigData                                       0     0      0      65
                             _EERead
 ---------------------------------------------------------------------------------
 (3) _EERead                                               3     3      0      65
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _IntHighRoutine                                      14    14      0    1465
                                             23 COMRAM    14    14      0
               _uartInterruptHandler
 ---------------------------------------------------------------------------------
 (6) _uartInterruptHandler                                16    14      2    1465
                                              7 COMRAM    16    14      2
                          i2_fifoGet
                          i2_fifoPut
                   i2_uartEnableSend
 ---------------------------------------------------------------------------------
 (7) i2_uartEnableSend                                     4     1      3     118
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (7) i2_fifoPut                                            6     3      3     338
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (7) i2_fifoGet                                            7     3      4     338
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitSystem
     _LoadConfigData
       _EERead
     _SetupInternalOscillator
     _ledInit
   _InitUart
     _uartEnableRecv
     _uartEnableSend
     _uartInit
       _SetBaudRate
         _GetBaudRateConfig
       _fifoInit
     _uartInitHalfDuplex
   _crcOk
   _decodeRecvBuffer
   _ledFlash
   _ledOff
   _ledOn
   _ledTact
   _myDelay
   _uartRecvByte
     _fifoGet
   _uartSendBuf
     _fifoPutBuf
       _fifoPut
     _uartEnableSend
   _uartSendByte
     _fifoPut
     _uartEnableSend

 _IntHighRoutine (ROOT)
   _uartInterruptHandler
     i2_fifoGet
     i2_fifoPut
     i2_uartEnableSend

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      84      13       51.6%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      84      11       51.6%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      EE       8       93.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      EE       6       93.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     38      58       4       55.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     26      39       1       60.6%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     375       9        0.0%
DATA                 0      0     375      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed May 10 00:11:38 2017

                               l8 0CC2                  _decodeRecvBuffer 15E8  
                              l34 0BCC  __size_of_SetupInternalOscillator 007E  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000            __end_of_IntHighRoutine 008E  
                    __CFG_CP3$OFF 000000                   uartInit@recvbuf 0090  
                 uartInit@sendbuf 008D                               l321 1124  
                             l319 110E                               l434 0A0A  
                    __CFG_CPB$OFF 000000                      __CFG_CPD$OFF 000000  
                             i2l8 0E78                               _adr 00B7  
                             prod 000FF3                               wreg 000FE8  
                      _TXSTA1bits 000FAC                        _TXSTA2bits 000F72  
                uartInit@recvSize 0092                  uartInit@sendSize 008F  
                    __CFG_LVP$OFF 000000                              l4010 0A9E  
                            l4012 0AB0                              l4006 0A74  
                            l4110 02B4                              l4120 0324  
                            l4104 0254                              l4040 0104  
                            l4122 0332                              l4050 0120  
                            l3500 06B0                              l4116 0310  
                            l4052 0132                              l4044 010A  
                            l3510 06E2                              l3502 06BA  
                            l4150 0408                              l4126 0350  
                            l4062 0174                              l3504 06C4  
                            l4144 03F6                              l4136 0384  
                            l3506 06CE                              l4082 01D4  
                            l3524 07DA                              l3508 06D8  
                            l3516 06E6                              l4148 0400  
                            l4076 01BE                              l3526 07E4  
                            l3542 086C                              l3518 07AE  
                            l4078 01C4                              l3528 07EE  
                            l3536 07FA                              l3704 113A  
                            l4088 01E6                              l3714 14A4  
                            l3740 0C02                              l3708 1480  
                            l3716 14AE                              l3494 0692  
                            l3840 13D4                              l4720 0732  
                            l3496 069C                              l3816 0982  
                            l3728 0B20                              l3680 0CF8  
                            l3850 1388                              l3834 13A8  
                            l4730 076E                              l4722 073E  
                            l4714 0702                              l3498 06A6  
                            l3818 0992                              l3762 089E  
                            l3844 1358                              l3836 13BE  
                            l4740 0834                              l4716 0786  
                            l4732 077A                              l4724 074A  
                            l3668 0C1E                              l3846 1370  
                            l4742 083C                              l4726 0756  
                            l4718 079C                              l3790 0914  
                            l4744 0848                              l4736 0816  
                            l4728 0762                              l3960 1308  
                            l4746 0854                              l4738 0860  
                            l3962 1312                              l3964 1328  
                            _LATA 000F89                              _LATB 000F8A  
                            u1545 158C                              u1546 158E  
                            u1635 1182                              u1491 0682  
                            u1636 1184                              u1644 0EE4  
                            u1740 09FC                              u1565 1118  
                            u1645 0EDE                              u1566 111A  
                            u1575 112E                              _PIE1 000F9D  
                            u1576 1130                              _PIE2 000FA0  
                            _PIE3 000FA3                              _PIE4 000F7A  
                            _PIE5 000F7D                              i2l34 0DA6  
                            _main 0092                      EERead@orgGIE 0061  
                            _mode 009D                              _uart 009E  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 003A                     __CFG_BORV$190 000000  
          __end_of_LoadConfigData 15E4                              prodh 000FF4  
                            prodl 000FF3                              start 008E  
                   __CFG_IESO$OFF 000000                      ___param_bank 000000  
       __size_ofi2_uartEnableSend 004A                      _BAUDCON1bits 000FB8  
                    _BAUDCON2bits 000F70                   ?_IntHighRoutine 0001  
            GetBaudRateConfig@brg 0072                             ?_main 0001  
            GetBaudRateConfig@osc 0064                             _EEADR 000FA9  
                           i2l368 0526                     EERead@adresse 0060  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
                 __end_of_fifoGet 0C06                    __CFG_EBTR0$OFF 000000  
                  __CFG_FCMEN$OFF 000000                   __end_of_fifoPut 0CFC  
                  __CFG_EBTR1$OFF 000000                   __end_of_ledInit 12B0  
                  __CFG_EBTR2$OFF 000000                   __end_of_ledTact 0B08  
                  __CFG_EBTR3$OFF 000000                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBTRB$OFF 000000                             _crcOk 15E4  
                           _ledOn 1530                             _ledRx 0031  
                           _ledTx 0028                   __end_of_myDelay 1356  
              __CFG_MCLRE$EXTMCLR 000000                      main@nullByte 0096  
                           main@b 0097                             pclath 000FFA  
                           tablat 000FF5                             plusw2 000FDB  
                   ??_SetBaudRate 0026                             status 000FD8  
                  __CFG_HFOFST$ON 000000                   ?_LoadConfigData 0001  
                  __CFG_PBADEN$ON 000000       __size_of_uartInitHalfDuplex 00B4  
                 __initialization 12B0                __size_ofi2_fifoGet 00DE  
                    __end_of_main 042A                __size_ofi2_fifoPut 00D0  
                      _InitSystem 100C                  __end_of_InitUart 100C  
                          ??_main 0093                     __activetblptr 000002  
          uartInitHalfDuplex@uart 0060            uartInitHalfDuplex@port 0062  
                  __CFG_PLLCFG$ON 000000         uartInterruptHandler@rcsta 0015  
    __end_of_uartInterruptHandler 065C         uartInterruptHandler@txsta 000E  
                   _packetAddress 0099                            ?_crcOk 0001  
                          ?_ledOn 0060             GetBaudRateConfig@brgh 006A  
           GetBaudRateConfig@brgl 006C             GetBaudRateConfig@rate 0060  
                          _EEDATA 000FA8                            _EECON2 000FA7  
                 uartSendBuf@uart 006B                   uartSendBuf@size 006F  
                          _EERead 1568                    __CFG_WDTEN$OFF 000000  
                          i2l2812 0468                            i2l2820 04AA  
                          i2l2654 0D10                            i2l2830 0548  
                          i2l2822 04C4                            i2l2806 042C  
                          i2l2672 13F4                            i2l2840 05A8  
                   _packetRecvLen 0098                            i2l2666 0DD6  
                          i2l2674 140A                            i2l2834 055A  
                          i2l2860 0622                            i2l2678 1420  
                          i2l2862 062C                            i2l2846 05C0  
                          i2l2838 0596                            i2l2856 05EC  
                          i2l2866 0636                            i2l2868 0650  
                          _INTCON 000FF2                            _RCREG1 000FAE  
                          _RCREG2 000F74                     _packetSendLen 0027  
                          _RCSTA1 000FAB                            _RCSTA2 000F71  
                          _SPBRG1 000FAF                            _SPBRG2 000F75  
                          _TXREG1 000FAD                            _TXREG2 000F73  
                          _TXSTA1 000FAC                            _TXSTA2 000F72  
                 uartSendByte@res 0069                   uartSendByte@snd 0068  
                __end_of_fifoInit 124E                  __end_of_ledFlash 15B6  
                  __CFG_PWRTEN$ON 000000                    __CFG_XINST$OFF 000000  
             __end_of_SetBaudRate 1158                      ?_uartSendBuf 006B  
                  __CFG_STVREN$ON 000000                            _ledOff 14F6  
         _SetupInternalOscillator 1158                            clear_0 12B6  
                          clear_1 12C2                            clear_2 12CE  
                          clear_3 12DA                            clear_4 12E6  
                          clear_5 12F2                         ??_fifoGet 0064  
                       ??_fifoPut 0063                         ??_ledInit 0026  
                       ??_ledTact 0062                         ??_myDelay 0026  
                __end_of_uartInit 09E2                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
         __size_of_uartEnableRecv 0050           __size_of_uartEnableSend 004C  
               __end_ofi2_fifoGet 0DDA                 __end_ofi2_fifoPut 0EAA  
        __end_of_decodeRecvBuffer 15EA                        __accesstop 0060  
         __end_of__initialization 12F8                     ___rparam_used 000001  
                    i2fifoGet@get 0003                    __pcstackCOMRAM 0001  
                i2_uartEnableSend 13F2                     __end_of_crcOk 15E8  
                     ?_InitSystem 0001                     __end_of_ledOn 1568  
                uartRecvByte@data 0069                      i2fifoPut@put 0003  
                uartRecvByte@uart 0067                           ??_crcOk 0026  
                         ??_ledOn 0026                        __pbssBANK0 0098  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
                      __pbssBANK3 0300                        __pbssBANK4 0400  
                         ?_EERead 0001                         ?_InitUart 0001  
                     _SetBaudRate 10B6                __CFG_CCP2MX$PORTC1 000000  
            _uartInterruptHandler 042A         ??_SetupInternalOscillator 0060  
                ??_IntHighRoutine 0018                __CFG_CCP3MX$PORTB5 000000  
                         ?_ledOff 0060                        _fifoPutBuf 147E  
       GetBaudRateConfig@setBRG16 0068                           _INTCON3 000FF0  
                  main@pckRecvPtr 0095                           _SPBRGH1 000FB0  
                         _SPBRGH2 000F76                         ?_fifoInit 0060  
                       ?_ledFlash 0060                  ??_LoadConfigData 0026  
                 SetBaudRate@rate 0076                   SetBaudRate@uart 0074  
             __size_of_InitSystem 00AA                   __size_of_EERead 002A  
                      ??_InitUart 0027                  uartSendByte@uart 0066  
                         __Hparam 0000                        _packetCtrl 009A  
           ?_uartInterruptHandler 0008                           __Lparam 0000  
                       ?_uartInit 0082                     ?_uartRecvByte 0067  
                 __size_of_ledOff 003A                     ?_uartSendByte 0066  
                         __pcinit 12B0              __size_of_uartSendBuf 0042  
                         __ramtop 0600                           _fifoGet 0B08  
                         _fifoPut 0C06                           __ptext0 0092  
                         __ptext1 14BC                           __ptext2 143C  
                         __ptext3 147E                           __ptext4 0C06  
                         __ptext5 15B6                           __ptext6 0B08  
                         _ledInit 124E                           __ptext7 1306  
                         __ptext8 09E2                           __ptext9 1530  
                         _ledTact 09E2                      SetBaudRate@h 007F  
                    SetBaudRate@l 0080                      SetBaudRate@o 007E  
                         _myDelay 1306                    _uartEnableRecv 1356  
                  _uartEnableSend 13A6                        ??_fifoInit 0026  
                      ??_ledFlash 0026                       uartInit@osc 0089  
                     uartInit@num 0084                     _dataAvailable 009B  
                _packetRecvBuffer 016A              end_of_initialization 12F8  
                   __Lmediumconst 0000                uartEnableRecv@uart 0060  
      __end_of_uartInitHalfDuplex 0F5E                  _packetSendBuffer 0400  
              uartEnableSend@uart 0060                        fifoGet@get 0062  
                      ??_uartInit 0026                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                  ??_uartRecvByte 0026                    ??_uartSendByte 0027  
                     ?_fifoPutBuf 0066                        fifoPut@put 0062  
                      ledInit@led 0060                        ledInit@off 0064  
          __end_of_uartEnableRecv 13A6            __end_of_uartEnableSend 13F2  
                      ledTact@led 0060                         _TRISAbits 000F92  
                       _TRISBbits 000F93                         _TRISCbits 000F94  
        __end_ofi2_uartEnableSend 143C                 ?_decodeRecvBuffer 0001  
                  _uartRecvBuffer 0300                         i2_fifoGet 0CFC  
                       i2_fifoPut 0DDA                    __end_of_EERead 1592  
              ??_decodeRecvBuffer 0026            ??_uartInterruptHandler 000A  
                  _uartSendBuffer 026A                     i2fifoGet@fifo 0001  
            uartInitHalfDuplex@bt 0064                      ??_InitSystem 0027  
                  __end_of_ledOff 1530                   ?_uartEnableRecv 0060  
                 ?_uartEnableSend 0060               start_initialization 12B0  
                   i2fifoPut@fifo 0001                          ??_EERead 0026  
              __end_of_InitSystem 10B6                        ?i2_fifoGet 0001  
                      ?i2_fifoPut 0001               __size_of_fifoPutBuf 003E  
                    ?_SetBaudRate 0074                    uartSendBuf@res 0070  
                  uartSendBuf@str 006D                        myDelay@per 0060  
               __size_of_InitUart 00AE                 _GetBaudRateConfig 065C  
              ?_GetBaudRateConfig 0060                          ??_ledOff 0026  
             ??_GetBaudRateConfig 006E                       __pbssCOMRAM 0027  
                   __pcstackBANK0 0060              __end_of_uartRecvByte 15D8  
               __size_of_fifoInit 0078                 __size_of_ledFlash 0024  
            __end_of_uartSendByte 14F6         __end_of_GetBaudRateConfig 088A  
                       __pnvBANK0 00B7                         __pintcode 0008  
               __size_of_uartInit 0158                          ?_fifoGet 0060  
                __CFG_PRICLKEN$ON 000000                          ?_fifoPut 0060  
                        ?_ledInit 0060                          ?_ledTact 0060  
                  SetBaudRate@osc 007A                          ?_myDelay 0060  
                  __size_of_crcOk 0004                    __size_of_ledOn 0038  
                  fifoPutBuf@fifo 0066                    fifoPutBuf@size 006A  
                     ??i2_fifoGet 0005             i2uartEnableSend@onoff 0003  
                     ??i2_fifoPut 0004          ?_SetupInternalOscillator 0026  
                        _IPR1bits 000F9F                          _IPR3bits 000FA5  
                        _PIE1bits 000F9D                          _PIE3bits 000FA3  
                        _PIR1bits 000F9E                          _PIR2bits 000FA1  
                        _PIR3bits 000FA4                          _RCONbits 000FD0  
                __CFG_WDTPS$32768 000000                     ??_uartSendBuf 0027  
                       ledOff@led 0060                         ledInit@bm 0066  
                       ledInit@on 0062    SetupInternalOscillator@setBits 0061  
              _uartInitHalfDuplex 0EAA                      ??_fifoPutBuf 0026  
                SetBaudRate@brg16 0081               ?_uartInitHalfDuplex 0060  
         __size_of_IntHighRoutine 0086                     _spiRecvBuffer 0100  
               ?i2_uartEnableSend 0001          uartInterruptHandler@fErr 0012  
              ??i2_uartEnableSend 0004          uartInterruptHandler@oErr 0013  
                   _spiSendBuffer 0200          uartInterruptHandler@data 0017  
                        _InitUart 0F5E          uartInterruptHandler@uart 0008  
      __size_of_GetBaudRateConfig 022E                __end_of_fifoPutBuf 14BC  
                      _EECON1bits 000FA6              ??_uartInitHalfDuplex 0065  
     uartInterruptHandler@iRxFlag 0014                       _packetReady 009C  
     uartInterruptHandler@iTxFlag 0010                          __Hrparam 0000  
            __size_of_SetBaudRate 00A2           __size_of_LoadConfigData 000C  
                        __Lrparam 0000                __CFG_BOREN$SBORDIS 000000  
               __CFG_P2BMX$PORTB5 000000                  ??_uartEnableRecv 0026  
                ??_uartEnableSend 0026         __size_of_decodeRecvBuffer 0002  
                      _ANSELAbits 000F38                        _ANSELCbits 000F3A  
                __size_of_fifoGet 00FE               __end_of_uartSendBuf 147E  
                __size_of_fifoPut 00F6                  __size_of_ledInit 0062  
                __size_of_ledTact 0126             __size_of_uartRecvByte 0022  
                __size_of_myDelay 0050             __size_of_uartSendByte 003A  
                        _fifoInit 11D6                          _ledFlash 1592  
                        __ptext10 14F6                          __ptext11 1592  
                        __ptext20 13A6                          __ptext12 15E8  
                        __ptext21 1356                          __ptext13 15E4  
                        __ptext30 0DDA                          __ptext22 100C  
                        __ptext14 0F5E                          __ptext31 0CFC  
                        __ptext23 124E                          __ptext15 0EAA  
                        __ptext24 1158                          __ptext16 088A  
                        __ptext25 15D8                          __ptext17 11D6  
                        __ptext26 1568                          __ptext18 10B6  
                        __ptext19 065C                          __ptext28 042A  
                        __ptext29 13F2   __end_of_SetupInternalOscillator 11D6  
                     _OSCCON2bits 000FD2                     fifoPutBuf@buf 0068  
                   __size_of_main 0398                          crcOk@crc 0001  
            i2uartEnableSend@uart 0001     __size_of_uartInterruptHandler 0232  
                        _uartInit 088A                          ledOn@led 0060  
                        int$flags 003A                      uartInit@baud 0085  
                    uartInit@uart 0082                      _uartRecvByte 15B6  
                    _uartSendByte 14BC                      fifoInit@fifo 0060  
                    fifoInit@size 0064                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2                          myDelay@i 0064  
             uartEnableRecv@onoff 0062                          intlevel2 0000  
             uartEnableSend@onoff 0062                        _RCSTA1bits 000FAB  
                      _RCSTA2bits 000F71                       fifoGet@fifo 0060  
                      _OSCCONbits 000FD3                       _uartSendBuf 143C  
                     fifoInit@buf 0062     uartInterruptHandler@iRxEnable 0011  
                     ledFlash@led 0060     uartInterruptHandler@iTxEnable 000D  
                  _IntHighRoutine 0008                       fifoPut@fifo 0060  
               __CFG_T3CMX$PORTC0 000000                 __CFG_FOSC$INTIO67 000000  
    SetupInternalOscillator@enpll 0026                    _LoadConfigData 15D8  
