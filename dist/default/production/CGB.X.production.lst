

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Thu Jun 01 22:51:17 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.42
    55                           ; Generated 13/04/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F25K22 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	nvBANK0
    90  0000B8                     __pnvBANK0:
    91                           	opt stack 0
    92  0000B8                     _adr:
    93                           	opt stack 0
    94  0000B8                     	ds	1
    95  0000                     _ANSELCbits	set	3898
    96  0000                     _ANSELAbits	set	3896
    97  0000                     _PIR2bits	set	4001
    98  0000                     _EECON2	set	4007
    99  0000                     _EECON1bits	set	4006
   100  0000                     _EEDATA	set	4008
   101  0000                     _EEADR	set	4009
   102  0000                     _LATA	set	3977
   103  0000                     _PIR3bits	set	4004
   104  0000                     _PIR1bits	set	3998
   105  0000                     _PIE3bits	set	4003
   106  0000                     _PIE1bits	set	3997
   107  0000                     _SPBRG2	set	3957
   108  0000                     _SPBRGH2	set	3958
   109  0000                     _BAUDCON2bits	set	3952
   110  0000                     _SPBRG1	set	4015
   111  0000                     _SPBRGH1	set	4016
   112  0000                     _BAUDCON1bits	set	4024
   113  0000                     _IPR3bits	set	4005
   114  0000                     _RCSTA2bits	set	3953
   115  0000                     _TXSTA2bits	set	3954
   116  0000                     _IPR1bits	set	3999
   117  0000                     _RCSTA1bits	set	4011
   118  0000                     _TXSTA1bits	set	4012
   119  0000                     _SSP1BUF	set	4041
   120  0000                     _PORTBbits	set	3969
   121  0000                     _TRISCbits	set	3988
   122  0000                     _TRISBbits	set	3987
   123  0000                     _TRISAbits	set	3986
   124  0000                     _INTCONbits	set	4082
   125  0000                     _RCONbits	set	4048
   126  0000                     _PIE5	set	3965
   127  0000                     _PIE4	set	3962
   128  0000                     _PIE3	set	4003
   129  0000                     _PIE2	set	4000
   130  0000                     _PIE1	set	3997
   131  0000                     _INTCON3	set	4080
   132  0000                     _INTCON	set	4082
   133  0000                     _OSCCON2bits	set	4050
   134  0000                     _OSCTUNEbits	set	3995
   135  0000                     _OSCCONbits	set	4051
   136  0000                     _TXSTA2	set	3954
   137  0000                     _RCSTA2	set	3953
   138  0000                     _TXSTA1	set	4012
   139  0000                     _RCSTA1	set	4011
   140  0000                     _RCREG2	set	3956
   141  0000                     _TXREG2	set	3955
   142  0000                     _RCREG1	set	4014
   143  0000                     _TXREG1	set	4013
   144  0000                     _SSP1IF	set	31987
   145  0000                     _LATB2	set	31826
   146  0000                     _RBIF	set	32656
   147  0000                     _IOCB4	set	31508
   148                           
   149                           ; #config settings
   150  0000                     
   151                           	psect	cinit
   152  0013B8                     __pcinit:
   153                           	opt stack 0
   154  0013B8                     start_initialization:
   155                           	opt stack 0
   156  0013B8                     __initialization:
   157                           	opt stack 0
   158                           
   159                           ; Clear objects allocated to BANK4 (132 bytes)
   160  0013B8  EE04  F000         	lfsr	0,__pbssBANK4
   161  0013BC  0E84               	movlw	132
   162  0013BE                     clear_0:
   163  0013BE  6AEE               	clrf	postinc0,c
   164  0013C0  06E8               	decf	wreg,f,c
   165  0013C2  E1FD               	bnz	clear_0
   166                           
   167                           ; Clear objects allocated to BANK3 (132 bytes)
   168  0013C4  EE03  F000         	lfsr	0,__pbssBANK3
   169  0013C8  0E84               	movlw	132
   170  0013CA                     clear_1:
   171  0013CA  6AEE               	clrf	postinc0,c
   172  0013CC  06E8               	decf	wreg,f,c
   173  0013CE  E1FD               	bnz	clear_1
   174                           
   175                           ; Clear objects allocated to BANK2 (254 bytes)
   176  0013D0  EE02  F000         	lfsr	0,__pbssBANK2
   177  0013D4  0EFE               	movlw	254
   178  0013D6                     clear_2:
   179  0013D6  6AEE               	clrf	postinc0,c
   180  0013D8  06E8               	decf	wreg,f,c
   181  0013DA  E1FD               	bnz	clear_2
   182                           
   183                           ; Clear objects allocated to BANK1 (212 bytes)
   184  0013DC  EE01  F000         	lfsr	0,__pbssBANK1
   185  0013E0  0ED4               	movlw	212
   186  0013E2                     clear_3:
   187  0013E2  6AEE               	clrf	postinc0,c
   188  0013E4  06E8               	decf	wreg,f,c
   189  0013E6  E1FD               	bnz	clear_3
   190                           
   191                           ; Clear objects allocated to BANK0 (33 bytes)
   192  0013E8  EE00  F097         	lfsr	0,__pbssBANK0
   193  0013EC  0E21               	movlw	33
   194  0013EE                     clear_4:
   195  0013EE  6AEE               	clrf	postinc0,c
   196  0013F0  06E8               	decf	wreg,f,c
   197  0013F2  E1FD               	bnz	clear_4
   198                           
   199                           ; Clear objects allocated to COMRAM (23 bytes)
   200  0013F4  EE00  F026         	lfsr	0,__pbssCOMRAM
   201  0013F8  0E17               	movlw	23
   202  0013FA                     clear_5:
   203  0013FA  6AEE               	clrf	postinc0,c
   204  0013FC  06E8               	decf	wreg,f,c
   205  0013FE  E1FD               	bnz	clear_5
   206  001400                     end_of_initialization:
   207                           	opt stack 0
   208  001400                     __end_of__initialization:
   209                           	opt stack 0
   210  001400  903D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   211  001402  923D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   212  001404  0E00               	movlw	low (__Lmediumconst shr (0+16))
   213  001406  6EF8               	movwf	tblptru,c
   214  001408  0100               	movlb	0
   215  00140A  EF4B  F000         	goto	_main	;jump to C main() function
   216                           tblptru	equ	0xFF8
   217                           postinc0	equ	0xFEE
   218                           wreg	equ	0xFE8
   219                           
   220                           	psect	bssCOMRAM
   221  000026                     __pbssCOMRAM:
   222                           	opt stack 0
   223  000026                     _spiSendPtr:
   224                           	opt stack 0
   225  000026                     	ds	1
   226  000027                     _spiRecvPtr:
   227                           	opt stack 0
   228  000027                     	ds	1
   229  000028                     _spiRecvLen:
   230                           	opt stack 0
   231  000028                     	ds	1
   232  000029                     _spiReadWrite:
   233                           	opt stack 0
   234  000029                     	ds	1
   235  00002A                     _dataAvailable:
   236                           	opt stack 0
   237  00002A                     	ds	1
   238  00002B                     _ledTx:
   239                           	opt stack 0
   240  00002B                     	ds	9
   241  000034                     _ledRx:
   242                           	opt stack 0
   243  000034                     	ds	9
   244                           tblptru	equ	0xFF8
   245                           postinc0	equ	0xFEE
   246                           wreg	equ	0xFE8
   247                           
   248                           	psect	bssBANK0
   249  000097                     __pbssBANK0:
   250                           	opt stack 0
   251  000097                     _packetSendEnable:
   252                           	opt stack 0
   253  000097                     	ds	1
   254  000098                     _packetSendCrc:
   255                           	opt stack 0
   256  000098                     	ds	1
   257  000099                     _packetRecvLen:
   258                           	opt stack 0
   259  000099                     	ds	1
   260  00009A                     _packetAddress:
   261                           	opt stack 0
   262  00009A                     	ds	1
   263  00009B                     _packetCtrl:
   264                           	opt stack 0
   265  00009B                     	ds	1
   266  00009C                     _packetSendLen:
   267                           	opt stack 0
   268  00009C                     	ds	1
   269  00009D                     _mode:
   270                           	opt stack 0
   271  00009D                     	ds	1
   272  00009E                     _uart:
   273                           	opt stack 0
   274  00009E                     	ds	26
   275                           tblptru	equ	0xFF8
   276                           postinc0	equ	0xFEE
   277                           wreg	equ	0xFE8
   278                           
   279                           	psect	bssBANK1
   280  000100                     __pbssBANK1:
   281                           	opt stack 0
   282  000100                     _spiSendBuffer:
   283                           	opt stack 0
   284  000100                     	ds	106
   285  00016A                     _spiRecvBuffer:
   286                           	opt stack 0
   287  00016A                     	ds	106
   288                           tblptru	equ	0xFF8
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           
   292                           	psect	bssBANK2
   293  000200                     __pbssBANK2:
   294                           	opt stack 0
   295  000200                     _packetRecvBuffer:
   296                           	opt stack 0
   297  000200                     	ds	127
   298  00027F                     _packetSendBuffer:
   299                           	opt stack 0
   300  00027F                     	ds	127
   301                           tblptru	equ	0xFF8
   302                           postinc0	equ	0xFEE
   303                           wreg	equ	0xFE8
   304                           
   305                           	psect	bssBANK3
   306  000300                     __pbssBANK3:
   307                           	opt stack 0
   308  000300                     _uartSendBuffer:
   309                           	opt stack 0
   310  000300                     	ds	132
   311                           tblptru	equ	0xFF8
   312                           postinc0	equ	0xFEE
   313                           wreg	equ	0xFE8
   314                           
   315                           	psect	bssBANK4
   316  000400                     __pbssBANK4:
   317                           	opt stack 0
   318  000400                     _uartRecvBuffer:
   319                           	opt stack 0
   320  000400                     	ds	132
   321                           tblptru	equ	0xFF8
   322                           postinc0	equ	0xFEE
   323                           wreg	equ	0xFE8
   324                           
   325                           	psect	cstackBANK0
   326  000060                     __pcstackBANK0:
   327                           	opt stack 0
   328  000060                     SetupInternalOscillator@enpll:
   329                           	opt stack 0
   330  000060                     EERead@adresse:
   331                           	opt stack 0
   332  000060                     fifoInit@fifo:
   333                           	opt stack 0
   334  000060                     fifoPut@fifo:
   335                           	opt stack 0
   336  000060                     fifoGet@fifo:
   337                           	opt stack 0
   338  000060                     uartEnableSend@uart:
   339                           	opt stack 0
   340  000060                     uartEnableRecv@uart:
   341                           	opt stack 0
   342  000060                     ledInit@led:
   343                           	opt stack 0
   344  000060                     ledOn@led:
   345                           	opt stack 0
   346  000060                     ledOff@led:
   347                           	opt stack 0
   348  000060                     ledFlash@led:
   349                           	opt stack 0
   350  000060                     ledTact@led:
   351                           	opt stack 0
   352  000060                     myDelay@per:
   353                           	opt stack 0
   354  000060                     GetBaudRateConfig@rate:
   355                           	opt stack 0
   356                           
   357                           ; 4 bytes @ 0x0
   358  000060                     	ds	1
   359  000061                     ??_SetupInternalOscillator:
   360  000061                     EERead@orgGIE:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x1
   364  000061                     	ds	1
   365  000062                     fifoPut@put:
   366                           	opt stack 0
   367  000062                     SetupInternalOscillator@setBits:
   368                           	opt stack 0
   369  000062                     uartEnableSend@onoff:
   370                           	opt stack 0
   371  000062                     uartEnableRecv@onoff:
   372                           	opt stack 0
   373  000062                     fifoInit@buf:
   374                           	opt stack 0
   375  000062                     fifoGet@get:
   376                           	opt stack 0
   377  000062                     ledInit@on:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x2
   381  000062                     	ds	1
   382  000063                     ??_uartEnableSend:
   383  000063                     ??_uartEnableRecv:
   384  000063                     ??_fifoPut:
   385                           
   386                           ; 1 bytes @ 0x3
   387  000063                     	ds	1
   388  000064                     ??_fifoGet:
   389  000064                     fifoInit@size:
   390                           	opt stack 0
   391  000064                     myDelay@i:
   392                           	opt stack 0
   393  000064                     ledInit@off:
   394                           	opt stack 0
   395  000064                     GetBaudRateConfig@osc:
   396                           	opt stack 0
   397                           
   398                           ; 4 bytes @ 0x4
   399  000064                     	ds	1
   400  000065                     
   401                           ; 1 bytes @ 0x5
   402  000065                     	ds	1
   403  000066                     ledInit@bm:
   404                           	opt stack 0
   405  000066                     fifoPutBuf@fifo:
   406                           	opt stack 0
   407  000066                     uartSendByte@uart:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x6
   411  000066                     	ds	1
   412  000067                     uartRecvByte@uart:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x7
   416  000067                     	ds	1
   417  000068                     uartSendByte@snd:
   418                           	opt stack 0
   419  000068                     fifoPutBuf@buf:
   420                           	opt stack 0
   421  000068                     GetBaudRateConfig@setBRG16:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0x8
   425  000068                     	ds	1
   426  000069                     uartSendByte@res:
   427                           	opt stack 0
   428  000069                     uartRecvByte@data:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x9
   432  000069                     	ds	1
   433  00006A                     fifoPutBuf@size:
   434                           	opt stack 0
   435  00006A                     GetBaudRateConfig@brgh:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0xA
   439  00006A                     	ds	1
   440  00006B                     uartSendBuf@uart:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0xB
   444  00006B                     	ds	1
   445  00006C                     GetBaudRateConfig@brgl:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0xC
   449  00006C                     	ds	1
   450  00006D                     uartSendBuf@str:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0xD
   454  00006D                     	ds	1
   455  00006E                     ??_GetBaudRateConfig:
   456                           
   457                           ; 1 bytes @ 0xE
   458  00006E                     	ds	1
   459  00006F                     uartSendBuf@size:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0xF
   463  00006F                     	ds	1
   464  000070                     uartSendBuf@res:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0x10
   468  000070                     	ds	2
   469  000072                     GetBaudRateConfig@brg:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x12
   473  000072                     	ds	2
   474  000074                     SetBaudRate@uart:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0x14
   478  000074                     	ds	2
   479  000076                     SetBaudRate@rate:
   480                           	opt stack 0
   481                           
   482                           ; 4 bytes @ 0x16
   483  000076                     	ds	4
   484  00007A                     SetBaudRate@osc:
   485                           	opt stack 0
   486                           
   487                           ; 4 bytes @ 0x1A
   488  00007A                     	ds	4
   489  00007E                     SetBaudRate@o:
   490                           	opt stack 0
   491                           
   492                           ; 1 bytes @ 0x1E
   493  00007E                     	ds	1
   494  00007F                     SetBaudRate@h:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x1F
   498  00007F                     	ds	1
   499  000080                     SetBaudRate@l:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x20
   503  000080                     	ds	1
   504  000081                     SetBaudRate@brg16:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x21
   508  000081                     	ds	1
   509  000082                     uartInit@uart:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x22
   513  000082                     	ds	2
   514  000084                     uartInit@num:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x24
   518  000084                     	ds	1
   519  000085                     uartInit@baud:
   520                           	opt stack 0
   521                           
   522                           ; 4 bytes @ 0x25
   523  000085                     	ds	4
   524  000089                     uartInit@osc:
   525                           	opt stack 0
   526                           
   527                           ; 4 bytes @ 0x29
   528  000089                     	ds	4
   529  00008D                     uartInit@sendbuf:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x2D
   533  00008D                     	ds	2
   534  00008F                     uartInit@sendSize:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x2F
   538  00008F                     	ds	1
   539  000090                     uartInit@recvbuf:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x30
   543  000090                     	ds	2
   544  000092                     uartInit@recvSize:
   545                           	opt stack 0
   546                           
   547                           ; 1 bytes @ 0x32
   548  000092                     	ds	1
   549  000093                     ??_main:
   550                           
   551                           ; 1 bytes @ 0x33
   552  000093                     	ds	2
   553  000095                     main@pckRecvPtr:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x35
   557  000095                     	ds	1
   558  000096                     main@b:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x36
   562  000096                     	ds	1
   563                           tblptru	equ	0xFF8
   564                           postinc0	equ	0xFEE
   565                           wreg	equ	0xFE8
   566                           
   567                           	psect	cstackCOMRAM
   568  000001                     __pcstackCOMRAM:
   569                           	opt stack 0
   570  000001                     i2fifoPut@fifo:
   571                           	opt stack 0
   572  000001                     i2fifoGet@fifo:
   573                           	opt stack 0
   574  000001                     i2uartEnableSend@uart:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x0
   578  000001                     	ds	2
   579  000003                     i2fifoPut@put:
   580                           	opt stack 0
   581  000003                     i2uartEnableSend@onoff:
   582                           	opt stack 0
   583  000003                     i2fifoGet@get:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x2
   587  000003                     	ds	1
   588  000004                     ??i2_fifoPut:
   589  000004                     ??i2_uartEnableSend:
   590                           
   591                           ; 1 bytes @ 0x3
   592  000004                     	ds	1
   593  000005                     ??i2_fifoGet:
   594                           
   595                           ; 1 bytes @ 0x4
   596  000005                     	ds	3
   597  000008                     uartInterruptHandler@uart:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x7
   601  000008                     	ds	2
   602  00000A                     ??_uartInterruptHandler:
   603                           
   604                           ; 1 bytes @ 0x9
   605  00000A                     	ds	3
   606  00000D                     uartInterruptHandler@iTxEnable:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0xC
   610  00000D                     	ds	1
   611  00000E                     uartInterruptHandler@txsta:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0xD
   615  00000E                     	ds	2
   616  000010                     uartInterruptHandler@iTxFlag:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0xF
   620  000010                     	ds	1
   621  000011                     uartInterruptHandler@iRxEnable:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x10
   625  000011                     	ds	1
   626  000012                     uartInterruptHandler@fErr:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x11
   630  000012                     	ds	1
   631  000013                     uartInterruptHandler@oErr:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x12
   635  000013                     	ds	1
   636  000014                     uartInterruptHandler@iRxFlag:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x13
   640  000014                     	ds	1
   641  000015                     uartInterruptHandler@rcsta:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x14
   645  000015                     	ds	2
   646  000017                     uartInterruptHandler@data:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x16
   650  000017                     	ds	1
   651  000018                     ??_IntHighRoutine:
   652                           
   653                           ; 1 bytes @ 0x17
   654  000018                     	ds	14
   655                           tblptru	equ	0xFF8
   656                           postinc0	equ	0xFEE
   657                           wreg	equ	0xFE8
   658                           
   659 ;;
   660 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   661 ;;
   662 ;; *************** function _main *****************
   663 ;; Defined at:
   664 ;;		line 279 in file "main.c"
   665 ;; Parameters:    Size  Location     Type
   666 ;;		None
   667 ;; Auto vars:     Size  Location     Type
   668 ;;  b               1   54[BANK0 ] unsigned char 
   669 ;;  pckRecvPtr      1   53[BANK0 ] unsigned char 
   670 ;; Return value:  Size  Location     Type
   671 ;;                  1    wreg      void 
   672 ;; Registers used:
   673 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   674 ;; Tracked objects:
   675 ;;		On entry : 0/0
   676 ;;		On exit  : 0/0
   677 ;;		Unchanged: 0/0
   678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   679 ;;      Params:         0       0       0       0       0       0       0
   680 ;;      Locals:         0       2       0       0       0       0       0
   681 ;;      Temps:          0       2       0       0       0       0       0
   682 ;;      Totals:         0       4       0       0       0       0       0
   683 ;;Total ram usage:        4 bytes
   684 ;; Hardware stack levels required when called:    7
   685 ;; This function calls:
   686 ;;		_InitSystem
   687 ;;		_InitUart
   688 ;;		_crcOk
   689 ;;		_decodeRecvBuffer
   690 ;;		_ledFlash
   691 ;;		_ledOff
   692 ;;		_ledOn
   693 ;;		_ledTact
   694 ;;		_myDelay
   695 ;;		_setDataAvailable
   696 ;;		_uartRecvByte
   697 ;;		_uartSendBuf
   698 ;;		_uartSendByte
   699 ;; This function is called by:
   700 ;;		Startup code after reset
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704                           	psect	text0
   705  000096                     __ptext0:
   706                           	opt stack 0
   707  000096                     _main:
   708                           	opt stack 24
   709                           
   710                           ;main.c: 281: char b;
   711                           ;main.c: 282: char pckRecvPtr=0;
   712                           
   713                           ;incstack = 0
   714  000096  0E00               	movlw	0
   715  000098  0100               	movlb	0	; () banked
   716  00009A  6F95               	movwf	main@pckRecvPtr& (0+255),b
   717                           
   718                           ; BSR set to: 0
   719                           ;main.c: 283: adr=-1;
   720  00009C  0100               	movlb	0	; () banked
   721  00009E  69B8               	setf	_adr& (0+255),b
   722                           
   723                           ; BSR set to: 0
   724                           ;main.c: 285: InitSystem();
   725  0000A0  ECE5  F007         	call	_InitSystem	;wreg free
   726                           
   727                           ;main.c: 287: ledOn(&ledRx);
   728  0000A4  0E34               	movlw	low _ledRx
   729  0000A6  0100               	movlb	0	; () banked
   730  0000A8  6F60               	movwf	ledOn@led& (0+255),b
   731  0000AA  0E00               	movlw	high _ledRx
   732  0000AC  0100               	movlb	0	; () banked
   733  0000AE  6F61               	movwf	(ledOn@led+1)& (0+255),b
   734  0000B0  ECCE  F00A         	call	_ledOn	;wreg free
   735                           
   736                           ;main.c: 288: ledOn(&ledTx);
   737  0000B4  0E2B               	movlw	low _ledTx
   738  0000B6  0100               	movlb	0	; () banked
   739  0000B8  6F60               	movwf	ledOn@led& (0+255),b
   740  0000BA  0E00               	movlw	high _ledTx
   741  0000BC  0100               	movlb	0	; () banked
   742  0000BE  6F61               	movwf	(ledOn@led+1)& (0+255),b
   743  0000C0  ECCE  F00A         	call	_ledOn	;wreg free
   744                           
   745                           ;main.c: 290: InitUart();
   746  0000C4  EC8F  F008         	call	_InitUart	;wreg free
   747                           
   748                           ;main.c: 291: myDelay(500);
   749  0000C8  0EF4               	movlw	244
   750  0000CA  0100               	movlb	0	; () banked
   751  0000CC  6F60               	movwf	myDelay@per& (0+255),b
   752  0000CE  0E01               	movlw	1
   753  0000D0  6F61               	movwf	(myDelay@per+1)& (0+255),b
   754  0000D2  0E00               	movlw	0
   755  0000D4  6F62               	movwf	(myDelay@per+2)& (0+255),b
   756  0000D6  0E00               	movlw	0
   757  0000D8  6F63               	movwf	(myDelay@per+3)& (0+255),b
   758  0000DA  EC07  F00A         	call	_myDelay	;wreg free
   759                           
   760                           ;main.c: 293: ledOff(&ledRx);
   761  0000DE  0E34               	movlw	low _ledRx
   762  0000E0  0100               	movlb	0	; () banked
   763  0000E2  6F60               	movwf	ledOff@led& (0+255),b
   764  0000E4  0E00               	movlw	high _ledRx
   765  0000E6  0100               	movlb	0	; () banked
   766  0000E8  6F61               	movwf	(ledOff@led+1)& (0+255),b
   767  0000EA  ECB1  F00A         	call	_ledOff	;wreg free
   768                           
   769                           ;main.c: 294: ledOff(&ledTx);
   770  0000EE  0E2B               	movlw	low _ledTx
   771  0000F0  0100               	movlb	0	; () banked
   772  0000F2  6F60               	movwf	ledOff@led& (0+255),b
   773  0000F4  0E00               	movlw	high _ledTx
   774  0000F6  0100               	movlb	0	; () banked
   775  0000F8  6F61               	movwf	(ledOff@led+1)& (0+255),b
   776  0000FA  ECB1  F00A         	call	_ledOff	;wreg free
   777                           
   778                           ;main.c: 296: mode=(2);
   779  0000FE  0E02               	movlw	2
   780  000100  D083               	goto	L1
   781  000102                     l4229:
   782                           
   783                           ; BSR set to: 0
   784                           ;main.c: 297: packetAddress=-1;
   785  000102  0100               	movlb	0	; () banked
   786  000104  699A               	setf	_packetAddress& (0+255),b
   787  000106  D083               	goto	l4265
   788  000108                     l4233:
   789                           
   790                           ;main.c: 301: {
   791                           ;main.c: 302: if (mode==(1))
   792  000108  0100               	movlb	0	; () banked
   793  00010A  059D               	decf	_mode& (0+255),w,b
   794  00010C  A4D8               	btfss	status,2,c
   795  00010E  D010               	goto	l4241
   796                           
   797                           ; BSR set to: 0
   798                           ;main.c: 303: {
   799                           ;main.c: 304: if (uart.status & 2)
   800  000110  0100               	movlb	0	; () banked
   801  000112  A3B0               	btfss	(_uart+18)& (0+255),1,b
   802  000114  D004               	goto	l4239
   803                           
   804                           ; BSR set to: 0
   805                           ;main.c: 305: {
   806                           ;main.c: 306: mode=(2);
   807  000116  0E02               	movlw	2
   808  000118  0100               	movlb	0	; () banked
   809  00011A  6F9D               	movwf	_mode& (0+255),b
   810                           
   811                           ;main.c: 307: }
   812  00011C  D009               	goto	l4241
   813  00011E                     l4239:
   814                           
   815                           ; BSR set to: 0
   816                           ;main.c: 308: else
   817                           ;main.c: 309: {
   818                           ;main.c: 310: ledFlash(&ledTx);
   819  00011E  0E2B               	movlw	low _ledTx
   820  000120  0100               	movlb	0	; () banked
   821  000122  6F60               	movwf	ledFlash@led& (0+255),b
   822  000124  0E00               	movlw	high _ledTx
   823  000126  0100               	movlb	0	; () banked
   824  000128  6F61               	movwf	(ledFlash@led+1)& (0+255),b
   825  00012A  ECFF  F00A         	call	_ledFlash	;wreg free
   826                           
   827                           ;main.c: 311: continue;
   828  00012E  D7EC               	goto	l4233
   829  000130                     l4241:
   830                           
   831                           ;main.c: 312: }
   832                           ;main.c: 313: }
   833                           ;main.c: 315: if (mode==(2))
   834  000130  0E02               	movlw	2
   835  000132  0100               	movlb	0	; () banked
   836  000134  199D               	xorwf	_mode& (0+255),w,b
   837  000136  A4D8               	btfss	status,2,c
   838  000138  D045               	goto	l4251
   839                           
   840                           ; BSR set to: 0
   841                           ;main.c: 316: {
   842                           ;main.c: 317: if (packetSendEnable)
   843  00013A  0100               	movlb	0	; () banked
   844  00013C  5197               	movf	_packetSendEnable& (0+255),w,b
   845  00013E  B4D8               	btfsc	status,2,c
   846  000140  D041               	goto	l4251
   847                           
   848                           ; BSR set to: 0
   849                           ;main.c: 318: {
   850                           ;main.c: 319: uartSendByte(&uart,(0x80));
   851  000142  0E9E               	movlw	low _uart
   852  000144  0100               	movlb	0	; () banked
   853  000146  6F66               	movwf	uartSendByte@uart& (0+255),b
   854  000148  0E00               	movlw	high _uart
   855  00014A  0100               	movlb	0	; () banked
   856  00014C  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
   857  00014E  0E80               	movlw	128
   858  000150  0100               	movlb	0	; () banked
   859  000152  6F68               	movwf	uartSendByte@snd& (0+255),b
   860  000154  EC94  F00A         	call	_uartSendByte	;wreg free
   861                           
   862                           ;main.c: 320: uartSendByte(&uart,(0));
   863  000158  0E9E               	movlw	low _uart
   864  00015A  0100               	movlb	0	; () banked
   865  00015C  6F66               	movwf	uartSendByte@uart& (0+255),b
   866  00015E  0E00               	movlw	high _uart
   867  000160  0100               	movlb	0	; () banked
   868  000162  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
   869  000164  0E00               	movlw	0
   870  000166  0100               	movlb	0	; () banked
   871  000168  6F68               	movwf	uartSendByte@snd& (0+255),b
   872  00016A  EC94  F00A         	call	_uartSendByte	;wreg free
   873                           
   874                           ;main.c: 321: uartSendByte(&uart,packetSendLen);
   875  00016E  0E9E               	movlw	low _uart
   876  000170  0100               	movlb	0	; () banked
   877  000172  6F66               	movwf	uartSendByte@uart& (0+255),b
   878  000174  0E00               	movlw	high _uart
   879  000176  0100               	movlb	0	; () banked
   880  000178  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
   881  00017A  C09C  F068         	movff	_packetSendLen,uartSendByte@snd
   882  00017E  EC94  F00A         	call	_uartSendByte	;wreg free
   883                           
   884                           ;main.c: 322: uartSendBuf(&uart,packetSendBuffer,packetSendLen);
   885  000182  0E9E               	movlw	low _uart
   886  000184  0100               	movlb	0	; () banked
   887  000186  6F6B               	movwf	uartSendBuf@uart& (0+255),b
   888  000188  0E00               	movlw	high _uart
   889  00018A  0100               	movlb	0	; () banked
   890  00018C  6F6C               	movwf	(uartSendBuf@uart+1)& (0+255),b
   891  00018E  0E7F               	movlw	low _packetSendBuffer
   892  000190  0100               	movlb	0	; () banked
   893  000192  6F6D               	movwf	uartSendBuf@str& (0+255),b
   894  000194  0E02               	movlw	high _packetSendBuffer
   895  000196  0100               	movlb	0	; () banked
   896  000198  6F6E               	movwf	(uartSendBuf@str+1)& (0+255),b
   897  00019A  C09C  F06F         	movff	_packetSendLen,uartSendBuf@size
   898  00019E  EC54  F00A         	call	_uartSendBuf	;wreg free
   899                           
   900                           ;main.c: 323: uartSendByte(&uart,packetSendCrc);
   901  0001A2  0E9E               	movlw	low _uart
   902  0001A4  0100               	movlb	0	; () banked
   903  0001A6  6F66               	movwf	uartSendByte@uart& (0+255),b
   904  0001A8  0E00               	movlw	high _uart
   905  0001AA  0100               	movlb	0	; () banked
   906  0001AC  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
   907  0001AE  C098  F068         	movff	_packetSendCrc,uartSendByte@snd
   908  0001B2  EC94  F00A         	call	_uartSendByte	;wreg free
   909                           
   910                           ;main.c: 324: mode=(1);
   911  0001B6  0E01               	movlw	1
   912  0001B8  0100               	movlb	0	; () banked
   913  0001BA  6F9D               	movwf	_mode& (0+255),b
   914                           
   915                           ; BSR set to: 0
   916                           ;main.c: 325: packetSendEnable=0;
   917  0001BC  0E00               	movlw	0
   918  0001BE  0100               	movlb	0	; () banked
   919  0001C0  6F97               	movwf	_packetSendEnable& (0+255),b
   920                           
   921                           ;main.c: 326: continue;
   922  0001C2  D7A2               	goto	l4233
   923  0001C4                     l4251:
   924                           
   925                           ; BSR set to: 0
   926                           ;main.c: 327: }
   927                           ;main.c: 328: }
   928                           ;main.c: 330: if (!uartRecvByte(&uart,b))
   929  0001C4  0E9E               	movlw	low _uart
   930  0001C6  0100               	movlb	0	; () banked
   931  0001C8  6F67               	movwf	uartRecvByte@uart& (0+255),b
   932  0001CA  0E00               	movlw	high _uart
   933  0001CC  0100               	movlb	0	; () banked
   934  0001CE  6F68               	movwf	(uartRecvByte@uart+1)& (0+255),b
   935  0001D0  0100               	movlb	0	; () banked
   936  0001D2  5196               	movf	main@b& (0+255),w,b
   937  0001D4  0100               	movlb	0	; () banked
   938  0001D6  6F93               	movwf	??_main& (0+255),b
   939  0001D8  6B94               	clrf	(??_main+1)& (0+255),b
   940  0001DA  C093  F069         	movff	??_main,uartRecvByte@data
   941  0001DE  C094  F06A         	movff	??_main+1,uartRecvByte@data+1
   942  0001E2  EC11  F00B         	call	_uartRecvByte	;wreg free
   943  0001E6  0900               	iorlw	0
   944  0001E8  B4D8               	btfsc	status,2,c
   945  0001EA  D78E               	goto	l4233
   946                           
   947                           ;main.c: 333: ledFlash(&ledRx);
   948                           
   949                           ;main.c: 331: continue;
   950  0001EC  0E34               	movlw	low _ledRx
   951  0001EE  0100               	movlb	0	; () banked
   952  0001F0  6F60               	movwf	ledFlash@led& (0+255),b
   953  0001F2  0E00               	movlw	high _ledRx
   954  0001F4  0100               	movlb	0	; () banked
   955  0001F6  6F61               	movwf	(ledFlash@led+1)& (0+255),b
   956  0001F8  ECFF  F00A         	call	_ledFlash	;wreg free
   957                           
   958                           ;main.c: 335: if (b & 128)
   959  0001FC  0100               	movlb	0	; () banked
   960  0001FE  AF96               	btfss	main@b& (0+255),7,b
   961  000200  D009               	goto	l4267
   962                           
   963                           ; BSR set to: 0
   964                           ;main.c: 336: {
   965                           ;main.c: 338: packetCtrl=b;
   966  000202  C096  F09B         	movff	main@b,_packetCtrl
   967                           
   968                           ; BSR set to: 0
   969                           ;main.c: 339: mode=(3);
   970  000206  0E03               	movlw	3
   971  000208                     L1:
   972  000208  0100               	movlb	0	; () banked
   973  00020A  6F9D               	movwf	_mode& (0+255),b
   974  00020C  D77A               	goto	l4229
   975  00020E                     l4265:
   976                           
   977                           ; BSR set to: 0
   978                           ;main.c: 341: packetRecvLen=-1;
   979  00020E  0100               	movlb	0	; () banked
   980  000210  6999               	setf	_packetRecvLen& (0+255),b
   981                           
   982                           ;main.c: 342: continue;
   983  000212  D77A               	goto	l4233
   984  000214                     l4267:
   985                           
   986                           ; BSR set to: 0
   987                           ;main.c: 343: }
   988                           ;main.c: 345: if (mode==(3))
   989  000214  0E03               	movlw	3
   990  000216  0100               	movlb	0	; () banked
   991  000218  199D               	xorwf	_mode& (0+255),w,b
   992  00021A  A4D8               	btfss	status,2,c
   993  00021C  D003               	goto	l4271
   994                           
   995                           ; BSR set to: 0
   996                           ;main.c: 346: {
   997                           ;main.c: 347: packetAddress=b;
   998  00021E  C096  F09A         	movff	main@b,_packetAddress
   999                           
  1000                           ;main.c: 349: continue;
  1001  000222  D772               	goto	l4233
  1002  000224                     l4271:
  1003                           
  1004                           ; BSR set to: 0
  1005                           ;main.c: 350: }
  1006                           ;main.c: 351: if (mode==(4))
  1007  000224  0E04               	movlw	4
  1008  000226  0100               	movlb	0	; () banked
  1009  000228  199D               	xorwf	_mode& (0+255),w,b
  1010  00022A  A4D8               	btfss	status,2,c
  1011  00022C  D004               	goto	l4277
  1012                           
  1013                           ; BSR set to: 0
  1014                           ;main.c: 352: {
  1015                           ;main.c: 353: packetRecvLen=b;
  1016  00022E  C096  F099         	movff	main@b,_packetRecvLen
  1017                           
  1018                           ; BSR set to: 0
  1019                           ;main.c: 354: mode=(5);
  1020  000232  0E05               	movlw	5
  1021  000234  D113               	goto	L6
  1022  000236                     l4277:
  1023                           
  1024                           ; BSR set to: 0
  1025                           ;main.c: 356: }
  1026                           ;main.c: 357: if (mode==(5))
  1027  000236  0E05               	movlw	5
  1028  000238  0100               	movlb	0	; () banked
  1029  00023A  199D               	xorwf	_mode& (0+255),w,b
  1030  00023C  A4D8               	btfss	status,2,c
  1031  00023E  D0A5               	goto	l4311
  1032                           
  1033                           ; BSR set to: 0
  1034                           ;main.c: 358: {
  1035                           ;main.c: 359: if (packetCtrl==(0x82))
  1036  000240  0E82               	movlw	130
  1037  000242  0100               	movlb	0	; () banked
  1038  000244  199B               	xorwf	_packetCtrl& (0+255),w,b
  1039  000246  A4D8               	btfss	status,2,c
  1040  000248  D02F               	goto	l4293
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;main.c: 360: {
  1044                           ;main.c: 361: adr=packetAddress+1;
  1045  00024A  0100               	movlb	0	; () banked
  1046  00024C  299A               	incf	_packetAddress& (0+255),w,b
  1047  00024E  0100               	movlb	0	; () banked
  1048  000250  6FB8               	movwf	_adr& (0+255),b
  1049                           
  1050                           ; BSR set to: 0
  1051                           ;main.c: 362: uartSendByte(&uart,packetCtrl);
  1052  000252  0E9E               	movlw	low _uart
  1053  000254  0100               	movlb	0	; () banked
  1054  000256  6F66               	movwf	uartSendByte@uart& (0+255),b
  1055  000258  0E00               	movlw	high _uart
  1056  00025A  0100               	movlb	0	; () banked
  1057  00025C  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1058  00025E  C09B  F068         	movff	_packetCtrl,uartSendByte@snd
  1059  000262  EC94  F00A         	call	_uartSendByte	;wreg free
  1060                           
  1061                           ;main.c: 363: uartSendByte(&uart,adr);
  1062  000266  0E9E               	movlw	low _uart
  1063  000268  0100               	movlb	0	; () banked
  1064  00026A  6F66               	movwf	uartSendByte@uart& (0+255),b
  1065  00026C  0E00               	movlw	high _uart
  1066  00026E  0100               	movlb	0	; () banked
  1067  000270  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1068  000272  C0B8  F068         	movff	_adr,uartSendByte@snd
  1069  000276  EC94  F00A         	call	_uartSendByte	;wreg free
  1070                           
  1071                           ;main.c: 364: uartSendByte(&uart,(0));
  1072  00027A  0E9E               	movlw	low _uart
  1073  00027C  0100               	movlb	0	; () banked
  1074  00027E  6F66               	movwf	uartSendByte@uart& (0+255),b
  1075  000280  0E00               	movlw	high _uart
  1076  000282  0100               	movlb	0	; () banked
  1077  000284  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1078  000286  0E00               	movlw	0
  1079  000288  0100               	movlb	0	; () banked
  1080  00028A  6F68               	movwf	uartSendByte@snd& (0+255),b
  1081  00028C  EC94  F00A         	call	_uartSendByte	;wreg free
  1082                           
  1083                           ;main.c: 365: uartSendByte(&uart,(0));
  1084  000290  0E9E               	movlw	low _uart
  1085  000292  0100               	movlb	0	; () banked
  1086  000294  6F66               	movwf	uartSendByte@uart& (0+255),b
  1087  000296  0E00               	movlw	high _uart
  1088  000298  0100               	movlb	0	; () banked
  1089  00029A  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1090  00029C  0E00               	movlw	0
  1091  00029E  0100               	movlb	0	; () banked
  1092  0002A0  6F68               	movwf	uartSendByte@snd& (0+255),b
  1093  0002A2  EC94  F00A         	call	_uartSendByte	;wreg free
  1094  0002A6  D0D9               	goto	l4337
  1095  0002A8                     l4293:
  1096                           
  1097                           ; BSR set to: 0
  1098                           ;main.c: 368: }
  1099                           ;main.c: 370: if (adr!=packetAddress)
  1100  0002A8  0100               	movlb	0	; () banked
  1101  0002AA  519A               	movf	_packetAddress& (0+255),w,b
  1102  0002AC  0100               	movlb	0	; () banked
  1103  0002AE  19B8               	xorwf	_adr& (0+255),w,b
  1104  0002B0  B4D8               	btfsc	status,2,c
  1105  0002B2  D02A               	goto	l4299
  1106                           
  1107                           ; BSR set to: 0
  1108                           ;main.c: 371: {
  1109                           ;main.c: 372: uartSendByte(&uart,packetCtrl);
  1110  0002B4  0E9E               	movlw	low _uart
  1111  0002B6  0100               	movlb	0	; () banked
  1112  0002B8  6F66               	movwf	uartSendByte@uart& (0+255),b
  1113  0002BA  0E00               	movlw	high _uart
  1114  0002BC  0100               	movlb	0	; () banked
  1115  0002BE  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1116  0002C0  C09B  F068         	movff	_packetCtrl,uartSendByte@snd
  1117  0002C4  EC94  F00A         	call	_uartSendByte	;wreg free
  1118                           
  1119                           ;main.c: 373: uartSendByte(&uart,packetAddress);
  1120  0002C8  0E9E               	movlw	low _uart
  1121  0002CA  0100               	movlb	0	; () banked
  1122  0002CC  6F66               	movwf	uartSendByte@uart& (0+255),b
  1123  0002CE  0E00               	movlw	high _uart
  1124  0002D0  0100               	movlb	0	; () banked
  1125  0002D2  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1126  0002D4  C09A  F068         	movff	_packetAddress,uartSendByte@snd
  1127  0002D8  EC94  F00A         	call	_uartSendByte	;wreg free
  1128                           
  1129                           ;main.c: 374: uartSendByte(&uart,packetRecvLen);
  1130  0002DC  0E9E               	movlw	low _uart
  1131  0002DE  0100               	movlb	0	; () banked
  1132  0002E0  6F66               	movwf	uartSendByte@uart& (0+255),b
  1133  0002E2  0E00               	movlw	high _uart
  1134  0002E4  0100               	movlb	0	; () banked
  1135  0002E6  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1136  0002E8  C099  F068         	movff	_packetRecvLen,uartSendByte@snd
  1137  0002EC  EC94  F00A         	call	_uartSendByte	;wreg free
  1138                           
  1139                           ;main.c: 375: uartSendByte(&uart,b);
  1140  0002F0  0E9E               	movlw	low _uart
  1141  0002F2  0100               	movlb	0	; () banked
  1142  0002F4  6F66               	movwf	uartSendByte@uart& (0+255),b
  1143  0002F6  0E00               	movlw	high _uart
  1144  0002F8  0100               	movlb	0	; () banked
  1145  0002FA  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1146  0002FC  C096  F068         	movff	main@b,uartSendByte@snd
  1147  000300  EC94  F00A         	call	_uartSendByte	;wreg free
  1148                           
  1149                           ;main.c: 376: mode=(6);
  1150  000304  0E06               	movlw	6
  1151  000306  D0AA               	goto	L6
  1152  000308                     l4299:
  1153                           
  1154                           ; BSR set to: 0
  1155                           ;main.c: 378: }
  1156                           ;main.c: 380: if (packetCtrl==(0x83))
  1157  000308  0E83               	movlw	131
  1158  00030A  0100               	movlb	0	; () banked
  1159  00030C  199B               	xorwf	_packetCtrl& (0+255),w,b
  1160  00030E  A4D8               	btfss	status,2,c
  1161  000310  D02B               	goto	l4305
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;main.c: 381: {
  1165                           ;main.c: 382: uartSendByte(&uart,packetCtrl);
  1166  000312  0E9E               	movlw	low _uart
  1167  000314  0100               	movlb	0	; () banked
  1168  000316  6F66               	movwf	uartSendByte@uart& (0+255),b
  1169  000318  0E00               	movlw	high _uart
  1170  00031A  0100               	movlb	0	; () banked
  1171  00031C  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1172  00031E  C09B  F068         	movff	_packetCtrl,uartSendByte@snd
  1173  000322  EC94  F00A         	call	_uartSendByte	;wreg free
  1174                           
  1175                           ;main.c: 383: uartSendByte(&uart,adr);
  1176  000326  0E9E               	movlw	low _uart
  1177  000328  0100               	movlb	0	; () banked
  1178  00032A  6F66               	movwf	uartSendByte@uart& (0+255),b
  1179  00032C  0E00               	movlw	high _uart
  1180  00032E  0100               	movlb	0	; () banked
  1181  000330  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1182  000332  C0B8  F068         	movff	_adr,uartSendByte@snd
  1183  000336  EC94  F00A         	call	_uartSendByte	;wreg free
  1184                           
  1185                           ;main.c: 384: uartSendByte(&uart,(0));
  1186  00033A  0E9E               	movlw	low _uart
  1187  00033C  0100               	movlb	0	; () banked
  1188  00033E  6F66               	movwf	uartSendByte@uart& (0+255),b
  1189  000340  0E00               	movlw	high _uart
  1190  000342  0100               	movlb	0	; () banked
  1191  000344  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1192  000346  0E00               	movlw	0
  1193  000348  0100               	movlb	0	; () banked
  1194  00034A  6F68               	movwf	uartSendByte@snd& (0+255),b
  1195  00034C  EC94  F00A         	call	_uartSendByte	;wreg free
  1196                           
  1197                           ;main.c: 385: uartSendByte(&uart,(0));
  1198  000350  0E9E               	movlw	low _uart
  1199  000352  0100               	movlb	0	; () banked
  1200  000354  6F66               	movwf	uartSendByte@uart& (0+255),b
  1201  000356  0E00               	movlw	high _uart
  1202  000358  0100               	movlb	0	; () banked
  1203  00035A  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1204  00035C  0E00               	movlw	0
  1205  00035E  0100               	movlb	0	; () banked
  1206  000360  6F68               	movwf	uartSendByte@snd& (0+255),b
  1207  000362  EC94  F00A         	call	_uartSendByte	;wreg free
  1208  000366  D079               	goto	l4337
  1209  000368                     l4305:
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;main.c: 388: }
  1213                           ;main.c: 389: if (packetCtrl==(0x80) || packetCtrl==(0x81))
  1214  000368  0E80               	movlw	128
  1215  00036A  0100               	movlb	0	; () banked
  1216  00036C  199B               	xorwf	_packetCtrl& (0+255),w,b
  1217  00036E  B4D8               	btfsc	status,2,c
  1218  000370  D005               	goto	l4309
  1219                           
  1220                           ; BSR set to: 0
  1221  000372  0E81               	movlw	129
  1222  000374  0100               	movlb	0	; () banked
  1223  000376  199B               	xorwf	_packetCtrl& (0+255),w,b
  1224  000378  A4D8               	btfss	status,2,c
  1225  00037A  D007               	goto	l4311
  1226  00037C                     l4309:
  1227                           
  1228                           ; BSR set to: 0
  1229                           ;main.c: 390: {
  1230                           ;main.c: 391: mode=(7);
  1231  00037C  0E07               	movlw	7
  1232  00037E  0100               	movlb	0	; () banked
  1233  000380  6F9D               	movwf	_mode& (0+255),b
  1234                           
  1235                           ;main.c: 392: pckRecvPtr=0;
  1236  000382  0E00               	movlw	0
  1237  000384  0100               	movlb	0	; () banked
  1238  000386  6F95               	movwf	main@pckRecvPtr& (0+255),b
  1239                           
  1240                           ;main.c: 393: continue;
  1241  000388  D6BF               	goto	l4233
  1242  00038A                     l4311:
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;main.c: 394: }
  1246                           ;main.c: 395: }
  1247                           ;main.c: 397: if (mode==(6))
  1248  00038A  0E06               	movlw	6
  1249  00038C  0100               	movlb	0	; () banked
  1250  00038E  199D               	xorwf	_mode& (0+255),w,b
  1251  000390  A4D8               	btfss	status,2,c
  1252  000392  D00A               	goto	l4315
  1253                           
  1254                           ; BSR set to: 0
  1255                           ;main.c: 398: {
  1256                           ;main.c: 399: uartSendByte(&uart,b);
  1257  000394  0E9E               	movlw	low _uart
  1258  000396  0100               	movlb	0	; () banked
  1259  000398  6F66               	movwf	uartSendByte@uart& (0+255),b
  1260  00039A  0E00               	movlw	high _uart
  1261  00039C  0100               	movlb	0	; () banked
  1262  00039E  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1263  0003A0  C096  F068         	movff	main@b,uartSendByte@snd
  1264  0003A4  EC94  F00A         	call	_uartSendByte	;wreg free
  1265  0003A8                     l4315:
  1266                           
  1267                           ;main.c: 400: }
  1268                           ;main.c: 401: if (mode==(7))
  1269  0003A8  0E07               	movlw	7
  1270  0003AA  0100               	movlb	0	; () banked
  1271  0003AC  199D               	xorwf	_mode& (0+255),w,b
  1272  0003AE  A4D8               	btfss	status,2,c
  1273  0003B0  D015               	goto	l4325
  1274                           
  1275                           ; BSR set to: 0
  1276                           ;main.c: 402: {
  1277                           ;main.c: 403: packetRecvBuffer[pckRecvPtr++]=b;
  1278  0003B2  0100               	movlb	0	; () banked
  1279  0003B4  5195               	movf	main@pckRecvPtr& (0+255),w,b
  1280  0003B6  0D01               	mullw	1
  1281  0003B8  0E00               	movlw	low _packetRecvBuffer
  1282  0003BA  24F3               	addwf	prodl,w,c
  1283  0003BC  6ED9               	movwf	fsr2l,c
  1284  0003BE  0E02               	movlw	high _packetRecvBuffer
  1285  0003C0  20F4               	addwfc	prodh,w,c
  1286  0003C2  6EDA               	movwf	fsr2h,c
  1287  0003C4  C096  FFDF         	movff	main@b,indf2
  1288                           
  1289                           ; BSR set to: 0
  1290  0003C8  0100               	movlb	0	; () banked
  1291  0003CA  2B95               	incf	main@pckRecvPtr& (0+255),f,b
  1292                           
  1293                           ; BSR set to: 0
  1294                           ;main.c: 404: if (pckRecvPtr==packetRecvLen)
  1295  0003CC  0100               	movlb	0	; () banked
  1296  0003CE  5199               	movf	_packetRecvLen& (0+255),w,b
  1297  0003D0  0100               	movlb	0	; () banked
  1298  0003D2  1995               	xorwf	main@pckRecvPtr& (0+255),w,b
  1299  0003D4  A4D8               	btfss	status,2,c
  1300  0003D6  D698               	goto	l4233
  1301                           
  1302                           ; BSR set to: 0
  1303                           ;main.c: 405: mode=(8);
  1304  0003D8  0E08               	movlw	8
  1305  0003DA  D040               	goto	L6
  1306  0003DC                     l4325:
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;main.c: 407: }
  1310                           ;main.c: 408: if (mode==(8))
  1311  0003DC  0E08               	movlw	8
  1312  0003DE  0100               	movlb	0	; () banked
  1313  0003E0  199D               	xorwf	_mode& (0+255),w,b
  1314  0003E2  A4D8               	btfss	status,2,c
  1315  0003E4  D03E               	goto	l4339
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;main.c: 409: {
  1319                           ;main.c: 410: if(crcOk(b))
  1320  0003E6  0100               	movlb	0	; () banked
  1321  0003E8  5196               	movf	main@b& (0+255),w,b
  1322  0003EA  EC2A  F00B         	call	_crcOk
  1323  0003EE  0900               	iorlw	0
  1324  0003F0  B4D8               	btfsc	status,2,c
  1325  0003F2  D033               	goto	l4337
  1326                           
  1327                           ;main.c: 411: {
  1328                           ;main.c: 412: if (packetCtrl==(0x81))
  1329  0003F4  0E81               	movlw	129
  1330  0003F6  0100               	movlb	0	; () banked
  1331  0003F8  199B               	xorwf	_packetCtrl& (0+255),w,b
  1332  0003FA  A4D8               	btfss	status,2,c
  1333  0003FC  D02A               	goto	l4333
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;main.c: 413: {
  1337                           ;main.c: 414: uartSendByte(&uart,packetCtrl);
  1338  0003FE  0E9E               	movlw	low _uart
  1339  000400  0100               	movlb	0	; () banked
  1340  000402  6F66               	movwf	uartSendByte@uart& (0+255),b
  1341  000404  0E00               	movlw	high _uart
  1342  000406  0100               	movlb	0	; () banked
  1343  000408  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1344  00040A  C09B  F068         	movff	_packetCtrl,uartSendByte@snd
  1345  00040E  EC94  F00A         	call	_uartSendByte	;wreg free
  1346                           
  1347                           ;main.c: 415: uartSendByte(&uart,adr);
  1348  000412  0E9E               	movlw	low _uart
  1349  000414  0100               	movlb	0	; () banked
  1350  000416  6F66               	movwf	uartSendByte@uart& (0+255),b
  1351  000418  0E00               	movlw	high _uart
  1352  00041A  0100               	movlb	0	; () banked
  1353  00041C  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1354  00041E  C0B8  F068         	movff	_adr,uartSendByte@snd
  1355  000422  EC94  F00A         	call	_uartSendByte	;wreg free
  1356                           
  1357                           ;main.c: 416: uartSendByte(&uart,(0));
  1358  000426  0E9E               	movlw	low _uart
  1359  000428  0100               	movlb	0	; () banked
  1360  00042A  6F66               	movwf	uartSendByte@uart& (0+255),b
  1361  00042C  0E00               	movlw	high _uart
  1362  00042E  0100               	movlb	0	; () banked
  1363  000430  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1364  000432  0E00               	movlw	0
  1365  000434  0100               	movlb	0	; () banked
  1366  000436  6F68               	movwf	uartSendByte@snd& (0+255),b
  1367  000438  EC94  F00A         	call	_uartSendByte	;wreg free
  1368                           
  1369                           ;main.c: 417: uartSendByte(&uart,(0));
  1370  00043C  0E9E               	movlw	low _uart
  1371  00043E  0100               	movlb	0	; () banked
  1372  000440  6F66               	movwf	uartSendByte@uart& (0+255),b
  1373  000442  0E00               	movlw	high _uart
  1374  000444  0100               	movlb	0	; () banked
  1375  000446  6F67               	movwf	(uartSendByte@uart+1)& (0+255),b
  1376  000448  0E00               	movlw	0
  1377  00044A  0100               	movlb	0	; () banked
  1378  00044C  6F68               	movwf	uartSendByte@snd& (0+255),b
  1379  00044E  EC94  F00A         	call	_uartSendByte	;wreg free
  1380  000452                     l4333:
  1381                           
  1382                           ;main.c: 418: }
  1383                           ;main.c: 420: decodeRecvBuffer();
  1384  000452  EC2E  F00B         	call	_decodeRecvBuffer	;wreg free
  1385                           
  1386                           ;main.c: 421: setDataAvailable();
  1387  000456  EC28  F00B         	call	_setDataAvailable	;wreg free
  1388  00045A                     l4337:
  1389                           
  1390                           ;main.c: 422: }
  1391                           ;main.c: 423: mode=(2);
  1392  00045A  0E02               	movlw	2
  1393  00045C                     L6:
  1394  00045C  0100               	movlb	0	; () banked
  1395  00045E  6F9D               	movwf	_mode& (0+255),b
  1396                           
  1397                           ;main.c: 424: continue;
  1398  000460  D653               	goto	l4233
  1399  000462                     l4339:
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;main.c: 425: }
  1403                           ;main.c: 427: ledTact(&ledRx);
  1404  000462  0E34               	movlw	low _ledRx
  1405  000464  0100               	movlb	0	; () banked
  1406  000466  6F60               	movwf	ledTact@led& (0+255),b
  1407  000468  0E00               	movlw	high _ledRx
  1408  00046A  0100               	movlb	0	; () banked
  1409  00046C  6F61               	movwf	(ledTact@led+1)& (0+255),b
  1410  00046E  EC1E  F005         	call	_ledTact	;wreg free
  1411                           
  1412                           ;main.c: 428: ledTact(&ledTx);
  1413  000472  0E2B               	movlw	low _ledTx
  1414  000474  0100               	movlb	0	; () banked
  1415  000476  6F60               	movwf	ledTact@led& (0+255),b
  1416  000478  0E00               	movlw	high _ledTx
  1417  00047A  0100               	movlb	0	; () banked
  1418  00047C  6F61               	movwf	(ledTact@led+1)& (0+255),b
  1419  00047E  EC1E  F005         	call	_ledTact	;wreg free
  1420  000482  D642               	goto	l4233
  1421  000484                     __end_of_main:
  1422                           	opt stack 0
  1423                           tblptru	equ	0xFF8
  1424                           prodh	equ	0xFF4
  1425                           prodl	equ	0xFF3
  1426                           postinc0	equ	0xFEE
  1427                           wreg	equ	0xFE8
  1428                           indf2	equ	0xFDF
  1429                           fsr2h	equ	0xFDA
  1430                           fsr2l	equ	0xFD9
  1431                           status	equ	0xFD8
  1432                           
  1433 ;; *************** function _uartSendByte *****************
  1434 ;; Defined at:
  1435 ;;		line 160 in file "uart.c"
  1436 ;; Parameters:    Size  Location     Type
  1437 ;;  uart            2    6[BANK0 ] PTR struct .
  1438 ;;		 -> uart(26), 
  1439 ;;  snd             1    8[BANK0 ] unsigned char 
  1440 ;; Auto vars:     Size  Location     Type
  1441 ;;  res             1    9[BANK0 ] unsigned char 
  1442 ;; Return value:  Size  Location     Type
  1443 ;;                  1    wreg      unsigned char 
  1444 ;; Registers used:
  1445 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1446 ;; Tracked objects:
  1447 ;;		On entry : 0/0
  1448 ;;		On exit  : 0/0
  1449 ;;		Unchanged: 0/0
  1450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1451 ;;      Params:         0       3       0       0       0       0       0
  1452 ;;      Locals:         0       1       0       0       0       0       0
  1453 ;;      Temps:          0       0       0       0       0       0       0
  1454 ;;      Totals:         0       4       0       0       0       0       0
  1455 ;;Total ram usage:        4 bytes
  1456 ;; Hardware stack levels used:    1
  1457 ;; Hardware stack levels required when called:    4
  1458 ;; This function calls:
  1459 ;;		_fifoPut
  1460 ;;		_uartEnableSend
  1461 ;; This function is called by:
  1462 ;;		_main
  1463 ;; This function uses a non-reentrant model
  1464 ;;
  1465                           
  1466                           	psect	text1
  1467  001528                     __ptext1:
  1468                           	opt stack 0
  1469  001528                     _uartSendByte:
  1470                           	opt stack 26
  1471                           
  1472                           ;uart.c: 162: unsigned char res;
  1473                           ;uart.c: 163: uartEnableSend(uart,0);
  1474                           
  1475                           ;incstack = 0
  1476  001528  C066  F060         	movff	uartSendByte@uart,uartEnableSend@uart
  1477  00152C  C067  F061         	movff	uartSendByte@uart+1,uartEnableSend@uart+1
  1478  001530  0E00               	movlw	0
  1479  001532  0100               	movlb	0	; () banked
  1480  001534  6F62               	movwf	uartEnableSend@onoff& (0+255),b
  1481  001536  ECB0  F009         	call	_uartEnableSend	;wreg free
  1482                           
  1483                           ;uart.c: 164: res=fifoPut(&uart->sendFifo,snd);
  1484  00153A  C066  F060         	movff	uartSendByte@uart,fifoPut@fifo
  1485  00153E  C067  F061         	movff	uartSendByte@uart+1,fifoPut@fifo+1
  1486  001542  C068  F062         	movff	uartSendByte@snd,fifoPut@put
  1487  001546  EC30  F006         	call	_fifoPut	;wreg free
  1488  00154A  0100               	movlb	0	; () banked
  1489  00154C  6F69               	movwf	uartSendByte@res& (0+255),b
  1490                           
  1491                           ; BSR set to: 0
  1492                           ;uart.c: 165: uartEnableSend(uart,1);
  1493  00154E  C066  F060         	movff	uartSendByte@uart,uartEnableSend@uart
  1494  001552  C067  F061         	movff	uartSendByte@uart+1,uartEnableSend@uart+1
  1495  001556  0E01               	movlw	1
  1496  001558  0100               	movlb	0	; () banked
  1497  00155A  6F62               	movwf	uartEnableSend@onoff& (0+255),b
  1498  00155C  ECB0  F009         	call	_uartEnableSend	;wreg free
  1499  001560  0012               	return	
  1500  001562                     __end_of_uartSendByte:
  1501                           	opt stack 0
  1502                           tblptru	equ	0xFF8
  1503                           prodh	equ	0xFF4
  1504                           prodl	equ	0xFF3
  1505                           postinc0	equ	0xFEE
  1506                           wreg	equ	0xFE8
  1507                           indf2	equ	0xFDF
  1508                           fsr2h	equ	0xFDA
  1509                           fsr2l	equ	0xFD9
  1510                           status	equ	0xFD8
  1511                           
  1512 ;; *************** function _uartSendBuf *****************
  1513 ;; Defined at:
  1514 ;;		line 185 in file "uart.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;  uart            2   11[BANK0 ] PTR struct .
  1517 ;;		 -> uart(26), 
  1518 ;;  str             2   13[BANK0 ] PTR unsigned char 
  1519 ;;		 -> packetSendBuffer(127), 
  1520 ;;  size            1   15[BANK0 ] unsigned char 
  1521 ;; Auto vars:     Size  Location     Type
  1522 ;;  res             1   16[BANK0 ] unsigned char 
  1523 ;; Return value:  Size  Location     Type
  1524 ;;                  1    wreg      unsigned char 
  1525 ;; Registers used:
  1526 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1527 ;; Tracked objects:
  1528 ;;		On entry : 0/0
  1529 ;;		On exit  : 0/0
  1530 ;;		Unchanged: 0/0
  1531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1532 ;;      Params:         0       5       0       0       0       0       0
  1533 ;;      Locals:         0       1       0       0       0       0       0
  1534 ;;      Temps:          0       0       0       0       0       0       0
  1535 ;;      Totals:         0       6       0       0       0       0       0
  1536 ;;Total ram usage:        6 bytes
  1537 ;; Hardware stack levels used:    1
  1538 ;; Hardware stack levels required when called:    5
  1539 ;; This function calls:
  1540 ;;		_fifoPutBuf
  1541 ;;		_uartEnableSend
  1542 ;; This function is called by:
  1543 ;;		_main
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547                           	psect	text2
  1548  0014A8                     __ptext2:
  1549                           	opt stack 0
  1550  0014A8                     _uartSendBuf:
  1551                           	opt stack 25
  1552                           
  1553                           ;uart.c: 187: unsigned char res;
  1554                           ;uart.c: 188: uartEnableSend(uart,0);
  1555                           
  1556                           ;incstack = 0
  1557  0014A8  C06B  F060         	movff	uartSendBuf@uart,uartEnableSend@uart
  1558  0014AC  C06C  F061         	movff	uartSendBuf@uart+1,uartEnableSend@uart+1
  1559  0014B0  0E00               	movlw	0
  1560  0014B2  0100               	movlb	0	; () banked
  1561  0014B4  6F62               	movwf	uartEnableSend@onoff& (0+255),b
  1562  0014B6  ECB0  F009         	call	_uartEnableSend	;wreg free
  1563                           
  1564                           ;uart.c: 189: res=fifoPutBuf(&uart->sendFifo,str,size);
  1565  0014BA  C06B  F066         	movff	uartSendBuf@uart,fifoPutBuf@fifo
  1566  0014BE  C06C  F067         	movff	uartSendBuf@uart+1,fifoPutBuf@fifo+1
  1567  0014C2  C06D  F068         	movff	uartSendBuf@str,fifoPutBuf@buf
  1568  0014C6  C06E  F069         	movff	uartSendBuf@str+1,fifoPutBuf@buf+1
  1569  0014CA  C06F  F06A         	movff	uartSendBuf@size,fifoPutBuf@size
  1570  0014CE  EC75  F00A         	call	_fifoPutBuf	;wreg free
  1571  0014D2  0100               	movlb	0	; () banked
  1572  0014D4  6F70               	movwf	uartSendBuf@res& (0+255),b
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;uart.c: 190: uartEnableSend(uart,1);
  1576  0014D6  C06B  F060         	movff	uartSendBuf@uart,uartEnableSend@uart
  1577  0014DA  C06C  F061         	movff	uartSendBuf@uart+1,uartEnableSend@uart+1
  1578  0014DE  0E01               	movlw	1
  1579  0014E0  0100               	movlb	0	; () banked
  1580  0014E2  6F62               	movwf	uartEnableSend@onoff& (0+255),b
  1581  0014E4  ECB0  F009         	call	_uartEnableSend	;wreg free
  1582  0014E8  0012               	return	
  1583  0014EA                     __end_of_uartSendBuf:
  1584                           	opt stack 0
  1585                           tblptru	equ	0xFF8
  1586                           prodh	equ	0xFF4
  1587                           prodl	equ	0xFF3
  1588                           postinc0	equ	0xFEE
  1589                           wreg	equ	0xFE8
  1590                           indf2	equ	0xFDF
  1591                           fsr2h	equ	0xFDA
  1592                           fsr2l	equ	0xFD9
  1593                           status	equ	0xFD8
  1594                           
  1595 ;; *************** function _fifoPutBuf *****************
  1596 ;; Defined at:
  1597 ;;		line 60 in file "fifo.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;  fifo            2    6[BANK0 ] PTR struct .
  1600 ;;		 -> uart(26), 
  1601 ;;  buf             2    8[BANK0 ] PTR unsigned char 
  1602 ;;		 -> packetSendBuffer(127), 
  1603 ;;  size            1   10[BANK0 ] unsigned char 
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;		None
  1606 ;; Return value:  Size  Location     Type
  1607 ;;                  1    wreg      unsigned char 
  1608 ;; Registers used:
  1609 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1615 ;;      Params:         0       5       0       0       0       0       0
  1616 ;;      Locals:         0       0       0       0       0       0       0
  1617 ;;      Temps:          0       0       0       0       0       0       0
  1618 ;;      Totals:         0       5       0       0       0       0       0
  1619 ;;Total ram usage:        5 bytes
  1620 ;; Hardware stack levels used:    1
  1621 ;; Hardware stack levels required when called:    4
  1622 ;; This function calls:
  1623 ;;		_fifoPut
  1624 ;; This function is called by:
  1625 ;;		_uartSendBuf
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           	psect	text3
  1630  0014EA                     __ptext3:
  1631                           	opt stack 0
  1632  0014EA                     _fifoPutBuf:
  1633                           	opt stack 25
  1634                           
  1635                           ;fifo.c: 62: while (size)
  1636                           
  1637                           ;incstack = 0
  1638  0014EA  D017               	goto	l3901
  1639  0014EC                     l3893:
  1640                           
  1641                           ;fifo.c: 63: {
  1642                           ;fifo.c: 64: if (fifoPut(fifo,*buf)==0)
  1643  0014EC  C066  F060         	movff	fifoPutBuf@fifo,fifoPut@fifo
  1644  0014F0  C067  F061         	movff	fifoPutBuf@fifo+1,fifoPut@fifo+1
  1645  0014F4  C068  FFD9         	movff	fifoPutBuf@buf,fsr2l
  1646  0014F8  C069  FFDA         	movff	fifoPutBuf@buf+1,fsr2h
  1647  0014FC  50DF               	movf	indf2,w,c
  1648  0014FE  0100               	movlb	0	; () banked
  1649  001500  6F62               	movwf	fifoPut@put& (0+255),b
  1650  001502  EC30  F006         	call	_fifoPut	;wreg free
  1651  001506  0900               	iorlw	0
  1652  001508  A4D8               	btfss	status,2,c
  1653  00150A  D002               	goto	l3899
  1654                           
  1655                           ;fifo.c: 65: {
  1656                           ;fifo.c: 66: return 0;
  1657  00150C  0E00               	movlw	0
  1658  00150E  0012               	return	
  1659  001510                     l3899:
  1660                           
  1661                           ;fifo.c: 67: }
  1662                           ;fifo.c: 68: buf++;
  1663  001510  0100               	movlb	0	; () banked
  1664  001512  4B68               	infsnz	fifoPutBuf@buf& (0+255),f,b
  1665  001514  2B69               	incf	(fifoPutBuf@buf+1)& (0+255),f,b
  1666                           
  1667                           ;fifo.c: 69: size--;
  1668  001516  0100               	movlb	0	; () banked
  1669  001518  076A               	decf	fifoPutBuf@size& (0+255),f,b
  1670  00151A                     l3901:
  1671  00151A  0100               	movlb	0	; () banked
  1672  00151C  516A               	movf	fifoPutBuf@size& (0+255),w,b
  1673  00151E  0100               	movlb	0	; () banked
  1674  001520  A4D8               	btfss	status,2,c
  1675  001522  D7E4               	goto	l3893
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;fifo.c: 70: }
  1679                           ;fifo.c: 71: return 0;
  1680                           
  1681                           ; BSR set to: 0
  1682  001524  0E00               	movlw	0
  1683  001526  0012               	return	
  1684  001528                     __end_of_fifoPutBuf:
  1685                           	opt stack 0
  1686                           tblptru	equ	0xFF8
  1687                           prodh	equ	0xFF4
  1688                           prodl	equ	0xFF3
  1689                           postinc0	equ	0xFEE
  1690                           wreg	equ	0xFE8
  1691                           indf2	equ	0xFDF
  1692                           fsr2h	equ	0xFDA
  1693                           fsr2l	equ	0xFD9
  1694                           status	equ	0xFD8
  1695                           
  1696 ;; *************** function _fifoPut *****************
  1697 ;; Defined at:
  1698 ;;		line 12 in file "fifo.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;  fifo            2    0[BANK0 ] PTR struct .
  1701 ;;		 -> uart(26), 
  1702 ;;  put             1    2[BANK0 ] unsigned char 
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;		None
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  1    wreg      unsigned char 
  1707 ;; Registers used:
  1708 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1714 ;;      Params:         0       3       0       0       0       0       0
  1715 ;;      Locals:         0       0       0       0       0       0       0
  1716 ;;      Temps:          0       3       0       0       0       0       0
  1717 ;;      Totals:         0       6       0       0       0       0       0
  1718 ;;Total ram usage:        6 bytes
  1719 ;; Hardware stack levels used:    1
  1720 ;; Hardware stack levels required when called:    3
  1721 ;; This function calls:
  1722 ;;		Nothing
  1723 ;; This function is called by:
  1724 ;;		_fifoPutBuf
  1725 ;;		_uartSendByte
  1726 ;;		_fifoPutStr
  1727 ;;		_fifoPutStr0
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           	psect	text4
  1732  000C60                     __ptext4:
  1733                           	opt stack 0
  1734  000C60                     _fifoPut:
  1735                           	opt stack 26
  1736                           
  1737                           ;fifo.c: 14: if ((fifo->status & 1)==1)
  1738                           
  1739                           ;incstack = 0
  1740  000C60  0100               	movlb	0	; () banked
  1741  000C62  EE20 F003          	lfsr	2,3
  1742  000C66  5160               	movf	fifoPut@fifo& (0+255),w,b
  1743  000C68  26D9               	addwf	fsr2l,f,c
  1744  000C6A  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1745  000C6C  22DA               	addwfc	fsr2h,f,c
  1746  000C6E  0100               	movlb	0	; () banked
  1747  000C70  A0DF               	btfss	indf2,0,c
  1748  000C72  D002               	goto	l3853
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;fifo.c: 15: {
  1752                           ;fifo.c: 16: return 0;
  1753  000C74  0E00               	movlw	0
  1754                           
  1755                           ; BSR set to: 0
  1756  000C76  0012               	return	
  1757  000C78                     l3853:
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;fifo.c: 17: }
  1761                           ;fifo.c: 19: fifo->buf[fifo->putPtr]=put;
  1762  000C78  0100               	movlb	0	; () banked
  1763  000C7A  EE20 F004          	lfsr	2,4
  1764  000C7E  5160               	movf	fifoPut@fifo& (0+255),w,b
  1765  000C80  26D9               	addwf	fsr2l,f,c
  1766  000C82  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1767  000C84  22DA               	addwfc	fsr2h,f,c
  1768  000C86  50DF               	movf	indf2,w,c
  1769  000C88  0100               	movlb	0	; () banked
  1770  000C8A  6F63               	movwf	??_fifoPut& (0+255),b
  1771  000C8C  0100               	movlb	0	; () banked
  1772  000C8E  5163               	movf	??_fifoPut& (0+255),w,b
  1773  000C90  0D01               	mullw	1
  1774  000C92  C060  FFD9         	movff	fifoPut@fifo,fsr2l
  1775  000C96  C061  FFDA         	movff	fifoPut@fifo+1,fsr2h
  1776  000C9A  CFDE F064          	movff	postinc2,??_fifoPut+1
  1777  000C9E  CFDD F065          	movff	postdec2,??_fifoPut+2
  1778  000CA2  50F3               	movf	prodl,w,c
  1779  000CA4  0100               	movlb	0	; () banked
  1780  000CA6  2564               	addwf	(??_fifoPut+1)& (0+255),w,b
  1781  000CA8  6ED9               	movwf	fsr2l,c
  1782  000CAA  50F4               	movf	prodh,w,c
  1783  000CAC  0100               	movlb	0	; () banked
  1784  000CAE  2165               	addwfc	(??_fifoPut+2)& (0+255),w,b
  1785  000CB0  6EDA               	movwf	fsr2h,c
  1786  000CB2  C062  FFDF         	movff	fifoPut@put,indf2
  1787                           
  1788                           ; BSR set to: 0
  1789                           ;fifo.c: 20: fifo->status&=~2;
  1790  000CB6  0100               	movlb	0	; () banked
  1791  000CB8  EE20 F003          	lfsr	2,3
  1792  000CBC  5160               	movf	fifoPut@fifo& (0+255),w,b
  1793  000CBE  26D9               	addwf	fsr2l,f,c
  1794  000CC0  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1795  000CC2  22DA               	addwfc	fsr2h,f,c
  1796  000CC4  0EFD               	movlw	253
  1797  000CC6  16DF               	andwf	indf2,f,c
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;fifo.c: 22: fifo->putPtr--;
  1801  000CC8  0100               	movlb	0	; () banked
  1802  000CCA  EE20 F004          	lfsr	2,4
  1803  000CCE  5160               	movf	fifoPut@fifo& (0+255),w,b
  1804  000CD0  26D9               	addwf	fsr2l,f,c
  1805  000CD2  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1806  000CD4  22DA               	addwfc	fsr2h,f,c
  1807  000CD6  06DF               	decf	indf2,f,c
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;fifo.c: 23: if (fifo->putPtr > fifo->maxPtr)
  1811  000CD8  0100               	movlb	0	; () banked
  1812  000CDA  EE20 F004          	lfsr	2,4
  1813  000CDE  5160               	movf	fifoPut@fifo& (0+255),w,b
  1814  000CE0  26D9               	addwf	fsr2l,f,c
  1815  000CE2  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1816  000CE4  22DA               	addwfc	fsr2h,f,c
  1817  000CE6  0100               	movlb	0	; () banked
  1818  000CE8  EE10 F002          	lfsr	1,2
  1819  000CEC  5160               	movf	fifoPut@fifo& (0+255),w,b
  1820  000CEE  26E1               	addwf	fsr1l,f,c
  1821  000CF0  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1822  000CF2  22E2               	addwfc	fsr1h,f,c
  1823  000CF4  50DE               	movf	postinc2,w,c
  1824  000CF6  5CE6               	subwf	postinc1,w,c
  1825  000CF8  B0D8               	btfsc	status,0,c
  1826  000CFA  D010               	goto	l8
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;fifo.c: 24: {
  1830                           ;fifo.c: 25: fifo->putPtr=fifo->maxPtr;
  1831  000CFC  0100               	movlb	0	; () banked
  1832  000CFE  EE20 F002          	lfsr	2,2
  1833  000D02  5160               	movf	fifoPut@fifo& (0+255),w,b
  1834  000D04  26D9               	addwf	fsr2l,f,c
  1835  000D06  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1836  000D08  22DA               	addwfc	fsr2h,f,c
  1837  000D0A  0100               	movlb	0	; () banked
  1838  000D0C  EE10 F004          	lfsr	1,4
  1839  000D10  5160               	movf	fifoPut@fifo& (0+255),w,b
  1840  000D12  26E1               	addwf	fsr1l,f,c
  1841  000D14  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1842  000D16  22E2               	addwfc	fsr1h,f,c
  1843  000D18  CFDF FFE7          	movff	indf2,indf1
  1844  000D1C                     l8:
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;fifo.c: 26: }
  1848                           ;fifo.c: 28: if (fifo->putPtr==fifo->getPtr)
  1849  000D1C  0100               	movlb	0	; () banked
  1850  000D1E  EE20 F005          	lfsr	2,5
  1851  000D22  5160               	movf	fifoPut@fifo& (0+255),w,b
  1852  000D24  26D9               	addwf	fsr2l,f,c
  1853  000D26  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1854  000D28  22DA               	addwfc	fsr2h,f,c
  1855  000D2A  0100               	movlb	0	; () banked
  1856  000D2C  EE10 F004          	lfsr	1,4
  1857  000D30  5160               	movf	fifoPut@fifo& (0+255),w,b
  1858  000D32  26E1               	addwf	fsr1l,f,c
  1859  000D34  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1860  000D36  22E2               	addwfc	fsr1h,f,c
  1861  000D38  50DE               	movf	postinc2,w,c
  1862  000D3A  18E6               	xorwf	postinc1,w,c
  1863  000D3C  A4D8               	btfss	status,2,c
  1864  000D3E  D009               	goto	l3865
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;fifo.c: 29: {
  1868                           ;fifo.c: 30: fifo->status|=1;
  1869  000D40  0100               	movlb	0	; () banked
  1870  000D42  EE20 F003          	lfsr	2,3
  1871  000D46  5160               	movf	fifoPut@fifo& (0+255),w,b
  1872  000D48  26D9               	addwf	fsr2l,f,c
  1873  000D4A  5161               	movf	(fifoPut@fifo+1)& (0+255),w,b
  1874  000D4C  22DA               	addwfc	fsr2h,f,c
  1875  000D4E  0E00               	movlw	0
  1876  000D50  80DB               	bsf	plusw2,0,c
  1877  000D52                     l3865:
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;fifo.c: 31: }
  1881                           ;fifo.c: 32: return 1;
  1882  000D52  0E01               	movlw	1
  1883  000D54  0012               	return	
  1884  000D56                     __end_of_fifoPut:
  1885                           	opt stack 0
  1886                           tblptru	equ	0xFF8
  1887                           prodh	equ	0xFF4
  1888                           prodl	equ	0xFF3
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           indf1	equ	0xFE7
  1892                           postinc1	equ	0xFE6
  1893                           fsr1h	equ	0xFE2
  1894                           fsr1l	equ	0xFE1
  1895                           indf2	equ	0xFDF
  1896                           postinc2	equ	0xFDE
  1897                           postdec2	equ	0xFDD
  1898                           plusw2	equ	0xFDB
  1899                           fsr2h	equ	0xFDA
  1900                           fsr2l	equ	0xFD9
  1901                           status	equ	0xFD8
  1902                           
  1903 ;; *************** function _uartRecvByte *****************
  1904 ;; Defined at:
  1905 ;;		line 194 in file "uart.c"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;  uart            2    7[BANK0 ] PTR struct .
  1908 ;;		 -> uart(26), 
  1909 ;;  data            2    9[BANK0 ] PTR unsigned char 
  1910 ;;		 -> RAM(1535), 
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;		None
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  1    wreg      unsigned char 
  1915 ;; Registers used:
  1916 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1922 ;;      Params:         0       4       0       0       0       0       0
  1923 ;;      Locals:         0       0       0       0       0       0       0
  1924 ;;      Temps:          0       0       0       0       0       0       0
  1925 ;;      Totals:         0       4       0       0       0       0       0
  1926 ;;Total ram usage:        4 bytes
  1927 ;; Hardware stack levels used:    1
  1928 ;; Hardware stack levels required when called:    4
  1929 ;; This function calls:
  1930 ;;		_fifoGet
  1931 ;; This function is called by:
  1932 ;;		_main
  1933 ;; This function uses a non-reentrant model
  1934 ;;
  1935                           
  1936                           	psect	text5
  1937  001622                     __ptext5:
  1938                           	opt stack 0
  1939  001622                     _uartRecvByte:
  1940                           	opt stack 26
  1941                           
  1942                           ;uart.c: 196: return fifoGet(&uart->recvFifo,data);
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;incstack = 0
  1946  001622  0E06               	movlw	6
  1947  001624  0100               	movlb	0	; () banked
  1948  001626  2567               	addwf	uartRecvByte@uart& (0+255),w,b
  1949  001628  0100               	movlb	0	; () banked
  1950  00162A  6F60               	movwf	fifoGet@fifo& (0+255),b
  1951  00162C  0E00               	movlw	0
  1952  00162E  0100               	movlb	0	; () banked
  1953  001630  2168               	addwfc	(uartRecvByte@uart+1)& (0+255),w,b
  1954  001632  0100               	movlb	0	; () banked
  1955  001634  6F61               	movwf	(fifoGet@fifo+1)& (0+255),b
  1956  001636  C069  F062         	movff	uartRecvByte@data,fifoGet@get
  1957  00163A  C06A  F063         	movff	uartRecvByte@data+1,fifoGet@get+1
  1958  00163E  ECB1  F005         	call	_fifoGet	;wreg free
  1959  001642  0012               	return	
  1960  001644                     __end_of_uartRecvByte:
  1961                           	opt stack 0
  1962                           tblptru	equ	0xFF8
  1963                           prodh	equ	0xFF4
  1964                           prodl	equ	0xFF3
  1965                           postinc0	equ	0xFEE
  1966                           wreg	equ	0xFE8
  1967                           indf1	equ	0xFE7
  1968                           postinc1	equ	0xFE6
  1969                           fsr1h	equ	0xFE2
  1970                           fsr1l	equ	0xFE1
  1971                           indf2	equ	0xFDF
  1972                           postinc2	equ	0xFDE
  1973                           postdec2	equ	0xFDD
  1974                           plusw2	equ	0xFDB
  1975                           fsr2h	equ	0xFDA
  1976                           fsr2l	equ	0xFD9
  1977                           status	equ	0xFD8
  1978                           
  1979 ;; *************** function _fifoGet *****************
  1980 ;; Defined at:
  1981 ;;		line 74 in file "fifo.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;  fifo            2    0[BANK0 ] PTR struct .
  1984 ;;		 -> uart(26), 
  1985 ;;  get             2    2[BANK0 ] PTR unsigned char 
  1986 ;;		 -> uartTransmitAll@data(1), uartInterruptHandler@data(1), RAM(1535), fifoGetBuf@elem(1), 
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;		None
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  1    wreg      unsigned char 
  1991 ;; Registers used:
  1992 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1998 ;;      Params:         0       4       0       0       0       0       0
  1999 ;;      Locals:         0       0       0       0       0       0       0
  2000 ;;      Temps:          0       3       0       0       0       0       0
  2001 ;;      Totals:         0       7       0       0       0       0       0
  2002 ;;Total ram usage:        7 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; Hardware stack levels required when called:    3
  2005 ;; This function calls:
  2006 ;;		Nothing
  2007 ;; This function is called by:
  2008 ;;		_uartRecvByte
  2009 ;;		_fifoGetBuf
  2010 ;;		_uartTransmitAll
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	text6
  2015  000B62                     __ptext6:
  2016                           	opt stack 0
  2017  000B62                     _fifoGet:
  2018                           	opt stack 26
  2019                           
  2020                           ;fifo.c: 76: if ((fifo->status & 2)==2)
  2021                           
  2022                           ;incstack = 0
  2023  000B62  0100               	movlb	0	; () banked
  2024  000B64  EE20 F003          	lfsr	2,3
  2025  000B68  5160               	movf	fifoGet@fifo& (0+255),w,b
  2026  000B6A  26D9               	addwf	fsr2l,f,c
  2027  000B6C  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2028  000B6E  22DA               	addwfc	fsr2h,f,c
  2029  000B70  0100               	movlb	0	; () banked
  2030  000B72  A2DF               	btfss	indf2,1,c
  2031  000B74  D002               	goto	l3913
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;fifo.c: 77: {
  2035                           ;fifo.c: 78: return 0;
  2036  000B76  0E00               	movlw	0
  2037                           
  2038                           ; BSR set to: 0
  2039  000B78  0012               	return	
  2040  000B7A                     l3913:
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;fifo.c: 79: }
  2044                           ;fifo.c: 80: *get=fifo->buf[fifo->getPtr];
  2045  000B7A  0100               	movlb	0	; () banked
  2046  000B7C  EE20 F005          	lfsr	2,5
  2047  000B80  5160               	movf	fifoGet@fifo& (0+255),w,b
  2048  000B82  26D9               	addwf	fsr2l,f,c
  2049  000B84  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2050  000B86  22DA               	addwfc	fsr2h,f,c
  2051  000B88  50DF               	movf	indf2,w,c
  2052  000B8A  0100               	movlb	0	; () banked
  2053  000B8C  6F64               	movwf	??_fifoGet& (0+255),b
  2054  000B8E  0100               	movlb	0	; () banked
  2055  000B90  5164               	movf	??_fifoGet& (0+255),w,b
  2056  000B92  0D01               	mullw	1
  2057  000B94  C060  FFD9         	movff	fifoGet@fifo,fsr2l
  2058  000B98  C061  FFDA         	movff	fifoGet@fifo+1,fsr2h
  2059  000B9C  CFDE F065          	movff	postinc2,??_fifoGet+1
  2060  000BA0  CFDD F066          	movff	postdec2,??_fifoGet+2
  2061  000BA4  50F3               	movf	prodl,w,c
  2062  000BA6  0100               	movlb	0	; () banked
  2063  000BA8  2565               	addwf	(??_fifoGet+1)& (0+255),w,b
  2064  000BAA  6ED9               	movwf	fsr2l,c
  2065  000BAC  50F4               	movf	prodh,w,c
  2066  000BAE  0100               	movlb	0	; () banked
  2067  000BB0  2166               	addwfc	(??_fifoGet+2)& (0+255),w,b
  2068  000BB2  6EDA               	movwf	fsr2h,c
  2069  000BB4  C062  FFE1         	movff	fifoGet@get,fsr1l
  2070  000BB8  C063  FFE2         	movff	fifoGet@get+1,fsr1h
  2071  000BBC  CFDF FFE7          	movff	indf2,indf1
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;fifo.c: 81: fifo->status&=~1;
  2075  000BC0  0100               	movlb	0	; () banked
  2076  000BC2  EE20 F003          	lfsr	2,3
  2077  000BC6  5160               	movf	fifoGet@fifo& (0+255),w,b
  2078  000BC8  26D9               	addwf	fsr2l,f,c
  2079  000BCA  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2080  000BCC  22DA               	addwfc	fsr2h,f,c
  2081  000BCE  0EFE               	movlw	254
  2082  000BD0  16DF               	andwf	indf2,f,c
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;fifo.c: 83: fifo->getPtr--;
  2086  000BD2  0100               	movlb	0	; () banked
  2087  000BD4  EE20 F005          	lfsr	2,5
  2088  000BD8  5160               	movf	fifoGet@fifo& (0+255),w,b
  2089  000BDA  26D9               	addwf	fsr2l,f,c
  2090  000BDC  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2091  000BDE  22DA               	addwfc	fsr2h,f,c
  2092  000BE0  06DF               	decf	indf2,f,c
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;fifo.c: 84: if (fifo->getPtr > fifo->maxPtr)
  2096  000BE2  0100               	movlb	0	; () banked
  2097  000BE4  EE20 F005          	lfsr	2,5
  2098  000BE8  5160               	movf	fifoGet@fifo& (0+255),w,b
  2099  000BEA  26D9               	addwf	fsr2l,f,c
  2100  000BEC  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2101  000BEE  22DA               	addwfc	fsr2h,f,c
  2102  000BF0  0100               	movlb	0	; () banked
  2103  000BF2  EE10 F002          	lfsr	1,2
  2104  000BF6  5160               	movf	fifoGet@fifo& (0+255),w,b
  2105  000BF8  26E1               	addwf	fsr1l,f,c
  2106  000BFA  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2107  000BFC  22E2               	addwfc	fsr1h,f,c
  2108  000BFE  50DE               	movf	postinc2,w,c
  2109  000C00  5CE6               	subwf	postinc1,w,c
  2110  000C02  B0D8               	btfsc	status,0,c
  2111  000C04  D010               	goto	l34
  2112                           
  2113                           ; BSR set to: 0
  2114                           ;fifo.c: 85: {
  2115                           ;fifo.c: 86: fifo->getPtr=fifo->maxPtr;
  2116  000C06  0100               	movlb	0	; () banked
  2117  000C08  EE20 F002          	lfsr	2,2
  2118  000C0C  5160               	movf	fifoGet@fifo& (0+255),w,b
  2119  000C0E  26D9               	addwf	fsr2l,f,c
  2120  000C10  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2121  000C12  22DA               	addwfc	fsr2h,f,c
  2122  000C14  0100               	movlb	0	; () banked
  2123  000C16  EE10 F005          	lfsr	1,5
  2124  000C1A  5160               	movf	fifoGet@fifo& (0+255),w,b
  2125  000C1C  26E1               	addwf	fsr1l,f,c
  2126  000C1E  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2127  000C20  22E2               	addwfc	fsr1h,f,c
  2128  000C22  CFDF FFE7          	movff	indf2,indf1
  2129  000C26                     l34:
  2130                           
  2131                           ; BSR set to: 0
  2132                           ;fifo.c: 87: }
  2133                           ;fifo.c: 89: if (fifo->getPtr==fifo->putPtr)
  2134  000C26  0100               	movlb	0	; () banked
  2135  000C28  EE20 F004          	lfsr	2,4
  2136  000C2C  5160               	movf	fifoGet@fifo& (0+255),w,b
  2137  000C2E  26D9               	addwf	fsr2l,f,c
  2138  000C30  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2139  000C32  22DA               	addwfc	fsr2h,f,c
  2140  000C34  0100               	movlb	0	; () banked
  2141  000C36  EE10 F005          	lfsr	1,5
  2142  000C3A  5160               	movf	fifoGet@fifo& (0+255),w,b
  2143  000C3C  26E1               	addwf	fsr1l,f,c
  2144  000C3E  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2145  000C40  22E2               	addwfc	fsr1h,f,c
  2146  000C42  50DE               	movf	postinc2,w,c
  2147  000C44  18E6               	xorwf	postinc1,w,c
  2148  000C46  A4D8               	btfss	status,2,c
  2149  000C48  D009               	goto	l3925
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;fifo.c: 90: {
  2153                           ;fifo.c: 91: fifo->status|=2;
  2154  000C4A  0100               	movlb	0	; () banked
  2155  000C4C  EE20 F003          	lfsr	2,3
  2156  000C50  5160               	movf	fifoGet@fifo& (0+255),w,b
  2157  000C52  26D9               	addwf	fsr2l,f,c
  2158  000C54  5161               	movf	(fifoGet@fifo+1)& (0+255),w,b
  2159  000C56  22DA               	addwfc	fsr2h,f,c
  2160  000C58  0E00               	movlw	0
  2161  000C5A  82DB               	bsf	plusw2,1,c
  2162  000C5C                     l3925:
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;fifo.c: 92: }
  2166                           ;fifo.c: 93: return 1;
  2167  000C5C  0E01               	movlw	1
  2168  000C5E  0012               	return	
  2169  000C60                     __end_of_fifoGet:
  2170                           	opt stack 0
  2171                           tblptru	equ	0xFF8
  2172                           prodh	equ	0xFF4
  2173                           prodl	equ	0xFF3
  2174                           postinc0	equ	0xFEE
  2175                           wreg	equ	0xFE8
  2176                           indf1	equ	0xFE7
  2177                           postinc1	equ	0xFE6
  2178                           fsr1h	equ	0xFE2
  2179                           fsr1l	equ	0xFE1
  2180                           indf2	equ	0xFDF
  2181                           postinc2	equ	0xFDE
  2182                           postdec2	equ	0xFDD
  2183                           plusw2	equ	0xFDB
  2184                           fsr2h	equ	0xFDA
  2185                           fsr2l	equ	0xFD9
  2186                           status	equ	0xFD8
  2187                           
  2188 ;; *************** function _setDataAvailable *****************
  2189 ;; Defined at:
  2190 ;;		line 274 in file "main.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;		None
  2193 ;; Auto vars:     Size  Location     Type
  2194 ;;		None
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  1    wreg      void 
  2197 ;; Registers used:
  2198 ;;		None
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2204 ;;      Params:         0       0       0       0       0       0       0
  2205 ;;      Locals:         0       0       0       0       0       0       0
  2206 ;;      Temps:          0       0       0       0       0       0       0
  2207 ;;      Totals:         0       0       0       0       0       0       0
  2208 ;;Total ram usage:        0 bytes
  2209 ;; Hardware stack levels used:    1
  2210 ;; Hardware stack levels required when called:    3
  2211 ;; This function calls:
  2212 ;;		Nothing
  2213 ;; This function is called by:
  2214 ;;		_main
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           	psect	text7
  2219  001650                     __ptext7:
  2220                           	opt stack 0
  2221  001650                     _setDataAvailable:
  2222                           	opt stack 27
  2223                           
  2224                           ;main.c: 276: LATB2=1;
  2225                           
  2226                           ; BSR set to: 0
  2227                           ;incstack = 0
  2228  001650  848A               	bsf	3978,2,c	;volatile
  2229  001652  0012               	return		;funcret
  2230  001654                     __end_of_setDataAvailable:
  2231                           	opt stack 0
  2232                           tblptru	equ	0xFF8
  2233                           prodh	equ	0xFF4
  2234                           prodl	equ	0xFF3
  2235                           postinc0	equ	0xFEE
  2236                           wreg	equ	0xFE8
  2237                           indf1	equ	0xFE7
  2238                           postinc1	equ	0xFE6
  2239                           fsr1h	equ	0xFE2
  2240                           fsr1l	equ	0xFE1
  2241                           indf2	equ	0xFDF
  2242                           postinc2	equ	0xFDE
  2243                           postdec2	equ	0xFDD
  2244                           plusw2	equ	0xFDB
  2245                           fsr2h	equ	0xFDA
  2246                           fsr2l	equ	0xFD9
  2247                           status	equ	0xFD8
  2248                           
  2249 ;; *************** function _myDelay *****************
  2250 ;; Defined at:
  2251 ;;		line 264 in file "main.c"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;  per             4    0[BANK0 ] long 
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;  i               2    4[BANK0 ] int 
  2256 ;; Return value:  Size  Location     Type
  2257 ;;                  1    wreg      void 
  2258 ;; Registers used:
  2259 ;;		wreg, status,2, status,0
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : 0/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2265 ;;      Params:         0       4       0       0       0       0       0
  2266 ;;      Locals:         0       2       0       0       0       0       0
  2267 ;;      Temps:          0       0       0       0       0       0       0
  2268 ;;      Totals:         0       6       0       0       0       0       0
  2269 ;;Total ram usage:        6 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; Hardware stack levels required when called:    3
  2272 ;; This function calls:
  2273 ;;		Nothing
  2274 ;; This function is called by:
  2275 ;;		_main
  2276 ;; This function uses a non-reentrant model
  2277 ;;
  2278                           
  2279                           	psect	text8
  2280  00140E                     __ptext8:
  2281                           	opt stack 0
  2282  00140E                     _myDelay:
  2283                           	opt stack 27
  2284                           
  2285                           ;main.c: 266: int i;
  2286                           ;main.c: 267: while (per--!=0)
  2287                           
  2288                           ;incstack = 0
  2289  00140E  D010               	goto	l4151
  2290  001410                     l4147:
  2291                           
  2292                           ;main.c: 268: {
  2293                           ;main.c: 269: i=16000000/4000;
  2294  001410  0E0F               	movlw	15
  2295  001412  0100               	movlb	0	; () banked
  2296  001414  6F65               	movwf	(myDelay@i+1)& (0+255),b
  2297  001416  0EA0               	movlw	160
  2298  001418  6F64               	movwf	myDelay@i& (0+255),b
  2299  00141A                     l4149:
  2300                           
  2301                           ; BSR set to: 0
  2302  00141A  0100               	movlb	0	; () banked
  2303  00141C  0764               	decf	myDelay@i& (0+255),f,b
  2304  00141E  A0D8               	btfss	status,0,c
  2305  001420  0765               	decf	(myDelay@i+1)& (0+255),f,b
  2306  001422  0100               	movlb	0	; () banked
  2307  001424  2964               	incf	myDelay@i& (0+255),w,b
  2308  001426  E1F9               	bnz	l4149
  2309  001428  0100               	movlb	0	; () banked
  2310  00142A  2965               	incf	(myDelay@i+1)& (0+255),w,b
  2311  00142C  A4D8               	btfss	status,2,c
  2312  00142E  D7F5               	goto	l4149
  2313  001430                     l4151:
  2314  001430  0EFF               	movlw	255
  2315  001432  0100               	movlb	0	; () banked
  2316  001434  2760               	addwf	myDelay@per& (0+255),f,b
  2317  001436  0EFF               	movlw	255
  2318  001438  2361               	addwfc	(myDelay@per+1)& (0+255),f,b
  2319  00143A  0EFF               	movlw	255
  2320  00143C  2362               	addwfc	(myDelay@per+2)& (0+255),f,b
  2321  00143E  0EFF               	movlw	255
  2322  001440  2363               	addwfc	(myDelay@per+3)& (0+255),f,b
  2323  001442  0100               	movlb	0	; () banked
  2324  001444  2960               	incf	myDelay@per& (0+255),w,b
  2325  001446  E1E4               	bnz	l4147
  2326  001448  0100               	movlb	0	; () banked
  2327  00144A  2961               	incf	(myDelay@per+1)& (0+255),w,b
  2328  00144C  E1E1               	bnz	l4147
  2329  00144E  0100               	movlb	0	; () banked
  2330  001450  2962               	incf	(myDelay@per+2)& (0+255),w,b
  2331  001452  E1DE               	bnz	l4147
  2332  001454  0100               	movlb	0	; () banked
  2333  001456  2963               	incf	(myDelay@per+3)& (0+255),w,b
  2334  001458  B4D8               	btfsc	status,2,c
  2335  00145A  0012               	return	
  2336  00145C  D7D9               	goto	l4147
  2337  00145E                     __end_of_myDelay:
  2338                           	opt stack 0
  2339                           tblptru	equ	0xFF8
  2340                           prodh	equ	0xFF4
  2341                           prodl	equ	0xFF3
  2342                           postinc0	equ	0xFEE
  2343                           wreg	equ	0xFE8
  2344                           indf1	equ	0xFE7
  2345                           postinc1	equ	0xFE6
  2346                           fsr1h	equ	0xFE2
  2347                           fsr1l	equ	0xFE1
  2348                           indf2	equ	0xFDF
  2349                           postinc2	equ	0xFDE
  2350                           postdec2	equ	0xFDD
  2351                           plusw2	equ	0xFDB
  2352                           fsr2h	equ	0xFDA
  2353                           fsr2l	equ	0xFD9
  2354                           status	equ	0xFD8
  2355                           
  2356 ;; *************** function _ledTact *****************
  2357 ;; Defined at:
  2358 ;;		line 52 in file "blink.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;  led             2    0[BANK0 ] PTR struct .
  2361 ;;		 -> ledTx(9), ledRx(9), 
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;		None
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  1    wreg      void 
  2366 ;; Registers used:
  2367 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2373 ;;      Params:         0       2       0       0       0       0       0
  2374 ;;      Locals:         0       0       0       0       0       0       0
  2375 ;;      Temps:          0       2       0       0       0       0       0
  2376 ;;      Totals:         0       4       0       0       0       0       0
  2377 ;;Total ram usage:        4 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; Hardware stack levels required when called:    3
  2380 ;; This function calls:
  2381 ;;		Nothing
  2382 ;; This function is called by:
  2383 ;;		_main
  2384 ;; This function uses a non-reentrant model
  2385 ;;
  2386                           
  2387                           	psect	text9
  2388  000A3C                     __ptext9:
  2389                           	opt stack 0
  2390  000A3C                     _ledTact:
  2391                           	opt stack 27
  2392                           
  2393                           ;blink.c: 54: if (led->count>0) led->count--;
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;incstack = 0
  2397  000A3C  C060  FFD9         	movff	ledTact@led,fsr2l
  2398  000A40  C061  FFDA         	movff	ledTact@led+1,fsr2h
  2399  000A44  0E01               	movlw	1
  2400  000A46  BEDB               	btfsc	plusw2,7,c
  2401  000A48  D00D               	goto	l483
  2402  000A4A  0E01               	movlw	1
  2403  000A4C  50DB               	movf	plusw2,w,c
  2404  000A4E  E103               	bnz	u1930
  2405  000A50  04DE               	decf	postinc2,w,c
  2406  000A52  A0D8               	btfss	status,0,c
  2407  000A54  D007               	goto	l483
  2408  000A56                     u1930:
  2409  000A56  C060  FFD9         	movff	ledTact@led,fsr2l
  2410  000A5A  C061  FFDA         	movff	ledTact@led+1,fsr2h
  2411  000A5E  06DE               	decf	postinc2,f,c
  2412  000A60  0E00               	movlw	0
  2413  000A62  5ADD               	subwfb	postdec2,f,c
  2414  000A64                     l483:
  2415                           
  2416                           ;blink.c: 55: if (led->count==0)
  2417  000A64  C060  FFD9         	movff	ledTact@led,fsr2l
  2418  000A68  C061  FFDA         	movff	ledTact@led+1,fsr2h
  2419  000A6C  50DE               	movf	postinc2,w,c
  2420  000A6E  10DE               	iorwf	postinc2,w,c
  2421  000A70  A4D8               	btfss	status,2,c
  2422  000A72  0012               	return	
  2423                           
  2424                           ;blink.c: 56: {
  2425                           ;blink.c: 57: if (led->on)
  2426  000A74  0100               	movlb	0	; () banked
  2427  000A76  EE20 F002          	lfsr	2,2
  2428  000A7A  5160               	movf	ledTact@led& (0+255),w,b
  2429  000A7C  26D9               	addwf	fsr2l,f,c
  2430  000A7E  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2431  000A80  22DA               	addwfc	fsr2h,f,c
  2432  000A82  50DF               	movf	indf2,w,c
  2433  000A84  B4D8               	btfsc	status,2,c
  2434  000A86  D023               	goto	l4195
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;blink.c: 58: {
  2438                           ;blink.c: 59: LATA&=~led->bitMask;
  2439  000A88  0100               	movlb	0	; () banked
  2440  000A8A  EE20 F007          	lfsr	2,7
  2441  000A8E  5160               	movf	ledTact@led& (0+255),w,b
  2442  000A90  26D9               	addwf	fsr2l,f,c
  2443  000A92  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2444  000A94  22DA               	addwfc	fsr2h,f,c
  2445  000A96  50DF               	movf	indf2,w,c
  2446  000A98  0AFF               	xorlw	255
  2447  000A9A  1689               	andwf	3977,f,c	;volatile
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;blink.c: 60: led->count=led->offTime;
  2451  000A9C  0100               	movlb	0	; () banked
  2452  000A9E  EE20 F005          	lfsr	2,5
  2453  000AA2  5160               	movf	ledTact@led& (0+255),w,b
  2454  000AA4  26D9               	addwf	fsr2l,f,c
  2455  000AA6  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2456  000AA8  22DA               	addwfc	fsr2h,f,c
  2457  000AAA  C060  FFE1         	movff	ledTact@led,fsr1l
  2458  000AAE  C061  FFE2         	movff	ledTact@led+1,fsr1h
  2459  000AB2  CFDE FFE6          	movff	postinc2,postinc1
  2460  000AB6  CFDD FFE5          	movff	postdec2,postdec1
  2461                           
  2462                           ; BSR set to: 0
  2463                           ;blink.c: 61: led->on=0;
  2464  000ABA  0100               	movlb	0	; () banked
  2465  000ABC  EE20 F002          	lfsr	2,2
  2466  000AC0  5160               	movf	ledTact@led& (0+255),w,b
  2467  000AC2  26D9               	addwf	fsr2l,f,c
  2468  000AC4  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2469  000AC6  22DA               	addwfc	fsr2h,f,c
  2470  000AC8  0E00               	movlw	0
  2471  000ACA  6EDF               	movwf	indf2,c
  2472                           
  2473                           ;blink.c: 62: }
  2474  000ACC  0012               	return	
  2475  000ACE                     l4195:
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;blink.c: 63: else
  2479                           ;blink.c: 64: {
  2480                           ;blink.c: 65: if (led->mode==1 || led->mode==2) LATA|=led->bitMask;
  2481  000ACE  0100               	movlb	0	; () banked
  2482  000AD0  EE20 F008          	lfsr	2,8
  2483  000AD4  5160               	movf	ledTact@led& (0+255),w,b
  2484  000AD6  26D9               	addwf	fsr2l,f,c
  2485  000AD8  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2486  000ADA  22DA               	addwfc	fsr2h,f,c
  2487  000ADC  04DE               	decf	postinc2,w,c
  2488  000ADE  B4D8               	btfsc	status,2,c
  2489  000AE0  D00B               	goto	l4199
  2490                           
  2491                           ; BSR set to: 0
  2492  000AE2  0100               	movlb	0	; () banked
  2493  000AE4  EE20 F008          	lfsr	2,8
  2494  000AE8  5160               	movf	ledTact@led& (0+255),w,b
  2495  000AEA  26D9               	addwf	fsr2l,f,c
  2496  000AEC  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2497  000AEE  22DA               	addwfc	fsr2h,f,c
  2498  000AF0  0E02               	movlw	2
  2499  000AF2  18DE               	xorwf	postinc2,w,c
  2500  000AF4  A4D8               	btfss	status,2,c
  2501  000AF6  D009               	goto	l4201
  2502  000AF8                     l4199:
  2503                           
  2504                           ; BSR set to: 0
  2505  000AF8  0100               	movlb	0	; () banked
  2506  000AFA  EE20 F007          	lfsr	2,7
  2507  000AFE  5160               	movf	ledTact@led& (0+255),w,b
  2508  000B00  26D9               	addwf	fsr2l,f,c
  2509  000B02  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2510  000B04  22DA               	addwfc	fsr2h,f,c
  2511  000B06  50DF               	movf	indf2,w,c
  2512  000B08  1289               	iorwf	3977,f,c	;volatile
  2513  000B0A                     l4201:
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;blink.c: 66: led->count=led->onTime;
  2517  000B0A  0100               	movlb	0	; () banked
  2518  000B0C  EE20 F003          	lfsr	2,3
  2519  000B10  5160               	movf	ledTact@led& (0+255),w,b
  2520  000B12  26D9               	addwf	fsr2l,f,c
  2521  000B14  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2522  000B16  22DA               	addwfc	fsr2h,f,c
  2523  000B18  C060  FFE1         	movff	ledTact@led,fsr1l
  2524  000B1C  C061  FFE2         	movff	ledTact@led+1,fsr1h
  2525  000B20  CFDE FFE6          	movff	postinc2,postinc1
  2526  000B24  CFDD FFE5          	movff	postdec2,postdec1
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;blink.c: 67: led->on=1;
  2530  000B28  0100               	movlb	0	; () banked
  2531  000B2A  EE20 F002          	lfsr	2,2
  2532  000B2E  5160               	movf	ledTact@led& (0+255),w,b
  2533  000B30  26D9               	addwf	fsr2l,f,c
  2534  000B32  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2535  000B34  22DA               	addwfc	fsr2h,f,c
  2536  000B36  0E01               	movlw	1
  2537  000B38  6EDF               	movwf	indf2,c
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;blink.c: 68: if (led->mode==1) led->mode=0;
  2541  000B3A  0100               	movlb	0	; () banked
  2542  000B3C  EE20 F008          	lfsr	2,8
  2543  000B40  5160               	movf	ledTact@led& (0+255),w,b
  2544  000B42  26D9               	addwf	fsr2l,f,c
  2545  000B44  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2546  000B46  22DA               	addwfc	fsr2h,f,c
  2547  000B48  04DE               	decf	postinc2,w,c
  2548  000B4A  A4D8               	btfss	status,2,c
  2549  000B4C  0012               	return	
  2550                           
  2551                           ; BSR set to: 0
  2552  000B4E  0100               	movlb	0	; () banked
  2553  000B50  EE20 F008          	lfsr	2,8
  2554  000B54  5160               	movf	ledTact@led& (0+255),w,b
  2555  000B56  26D9               	addwf	fsr2l,f,c
  2556  000B58  5161               	movf	(ledTact@led+1)& (0+255),w,b
  2557  000B5A  22DA               	addwfc	fsr2h,f,c
  2558  000B5C  0E00               	movlw	0
  2559  000B5E  6EDF               	movwf	indf2,c
  2560                           
  2561                           ; BSR set to: 0
  2562                           
  2563                           ; BSR set to: 0
  2564  000B60  0012               	return	
  2565  000B62                     __end_of_ledTact:
  2566                           	opt stack 0
  2567                           tblptru	equ	0xFF8
  2568                           prodh	equ	0xFF4
  2569                           prodl	equ	0xFF3
  2570                           postinc0	equ	0xFEE
  2571                           wreg	equ	0xFE8
  2572                           indf1	equ	0xFE7
  2573                           postinc1	equ	0xFE6
  2574                           postdec1	equ	0xFE5
  2575                           fsr1h	equ	0xFE2
  2576                           fsr1l	equ	0xFE1
  2577                           indf2	equ	0xFDF
  2578                           postinc2	equ	0xFDE
  2579                           postdec2	equ	0xFDD
  2580                           plusw2	equ	0xFDB
  2581                           fsr2h	equ	0xFDA
  2582                           fsr2l	equ	0xFD9
  2583                           status	equ	0xFD8
  2584                           
  2585 ;; *************** function _ledOn *****************
  2586 ;; Defined at:
  2587 ;;		line 21 in file "blink.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;  led             2    0[BANK0 ] PTR struct .
  2590 ;;		 -> ledTx(9), ledRx(9), 
  2591 ;; Auto vars:     Size  Location     Type
  2592 ;;		None
  2593 ;; Return value:  Size  Location     Type
  2594 ;;                  1    wreg      void 
  2595 ;; Registers used:
  2596 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2597 ;; Tracked objects:
  2598 ;;		On entry : 0/0
  2599 ;;		On exit  : 0/0
  2600 ;;		Unchanged: 0/0
  2601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2602 ;;      Params:         0       2       0       0       0       0       0
  2603 ;;      Locals:         0       0       0       0       0       0       0
  2604 ;;      Temps:          0       0       0       0       0       0       0
  2605 ;;      Totals:         0       2       0       0       0       0       0
  2606 ;;Total ram usage:        2 bytes
  2607 ;; Hardware stack levels used:    1
  2608 ;; Hardware stack levels required when called:    3
  2609 ;; This function calls:
  2610 ;;		Nothing
  2611 ;; This function is called by:
  2612 ;;		_main
  2613 ;; This function uses a non-reentrant model
  2614 ;;
  2615                           
  2616                           	psect	text10
  2617  00159C                     __ptext10:
  2618                           	opt stack 0
  2619  00159C                     _ledOn:
  2620                           	opt stack 27
  2621                           
  2622                           ;blink.c: 23: LATA|=led->bitMask;
  2623                           
  2624                           ;incstack = 0
  2625  00159C  0100               	movlb	0	; () banked
  2626  00159E  EE20 F007          	lfsr	2,7
  2627  0015A2  5160               	movf	ledOn@led& (0+255),w,b
  2628  0015A4  26D9               	addwf	fsr2l,f,c
  2629  0015A6  5161               	movf	(ledOn@led+1)& (0+255),w,b
  2630  0015A8  22DA               	addwfc	fsr2h,f,c
  2631  0015AA  50DF               	movf	indf2,w,c
  2632  0015AC  1289               	iorwf	3977,f,c	;volatile
  2633                           
  2634                           ;blink.c: 24: led->on=1;
  2635  0015AE  0100               	movlb	0	; () banked
  2636  0015B0  EE20 F002          	lfsr	2,2
  2637  0015B4  5160               	movf	ledOn@led& (0+255),w,b
  2638  0015B6  26D9               	addwf	fsr2l,f,c
  2639  0015B8  5161               	movf	(ledOn@led+1)& (0+255),w,b
  2640  0015BA  22DA               	addwfc	fsr2h,f,c
  2641  0015BC  0E01               	movlw	1
  2642  0015BE  6EDF               	movwf	indf2,c
  2643                           
  2644                           ;blink.c: 25: led->mode=0;
  2645  0015C0  0100               	movlb	0	; () banked
  2646  0015C2  EE20 F008          	lfsr	2,8
  2647  0015C6  5160               	movf	ledOn@led& (0+255),w,b
  2648  0015C8  26D9               	addwf	fsr2l,f,c
  2649  0015CA  5161               	movf	(ledOn@led+1)& (0+255),w,b
  2650  0015CC  22DA               	addwfc	fsr2h,f,c
  2651  0015CE  0E00               	movlw	0
  2652  0015D0  6EDF               	movwf	indf2,c
  2653                           
  2654                           ; BSR set to: 0
  2655  0015D2  0012               	return		;funcret
  2656  0015D4                     __end_of_ledOn:
  2657                           	opt stack 0
  2658                           tblptru	equ	0xFF8
  2659                           prodh	equ	0xFF4
  2660                           prodl	equ	0xFF3
  2661                           postinc0	equ	0xFEE
  2662                           wreg	equ	0xFE8
  2663                           indf1	equ	0xFE7
  2664                           postinc1	equ	0xFE6
  2665                           postdec1	equ	0xFE5
  2666                           fsr1h	equ	0xFE2
  2667                           fsr1l	equ	0xFE1
  2668                           indf2	equ	0xFDF
  2669                           postinc2	equ	0xFDE
  2670                           postdec2	equ	0xFDD
  2671                           plusw2	equ	0xFDB
  2672                           fsr2h	equ	0xFDA
  2673                           fsr2l	equ	0xFD9
  2674                           status	equ	0xFD8
  2675                           
  2676 ;; *************** function _ledOff *****************
  2677 ;; Defined at:
  2678 ;;		line 28 in file "blink.c"
  2679 ;; Parameters:    Size  Location     Type
  2680 ;;  led             2    0[BANK0 ] PTR struct .
  2681 ;;		 -> ledTx(9), ledRx(9), 
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;		None
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  1    wreg      void 
  2686 ;; Registers used:
  2687 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2693 ;;      Params:         0       2       0       0       0       0       0
  2694 ;;      Locals:         0       0       0       0       0       0       0
  2695 ;;      Temps:          0       0       0       0       0       0       0
  2696 ;;      Totals:         0       2       0       0       0       0       0
  2697 ;;Total ram usage:        2 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; Hardware stack levels required when called:    3
  2700 ;; This function calls:
  2701 ;;		Nothing
  2702 ;; This function is called by:
  2703 ;;		_main
  2704 ;; This function uses a non-reentrant model
  2705 ;;
  2706                           
  2707                           	psect	text11
  2708  001562                     __ptext11:
  2709                           	opt stack 0
  2710  001562                     _ledOff:
  2711                           	opt stack 27
  2712                           
  2713                           ;blink.c: 30: LATA&=~led->bitMask;
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;incstack = 0
  2717  001562  0100               	movlb	0	; () banked
  2718  001564  EE20 F007          	lfsr	2,7
  2719  001568  5160               	movf	ledOff@led& (0+255),w,b
  2720  00156A  26D9               	addwf	fsr2l,f,c
  2721  00156C  5161               	movf	(ledOff@led+1)& (0+255),w,b
  2722  00156E  22DA               	addwfc	fsr2h,f,c
  2723  001570  50DF               	movf	indf2,w,c
  2724  001572  0AFF               	xorlw	255
  2725  001574  1689               	andwf	3977,f,c	;volatile
  2726                           
  2727                           ;blink.c: 31: led->on=0;
  2728  001576  0100               	movlb	0	; () banked
  2729  001578  EE20 F002          	lfsr	2,2
  2730  00157C  5160               	movf	ledOff@led& (0+255),w,b
  2731  00157E  26D9               	addwf	fsr2l,f,c
  2732  001580  5161               	movf	(ledOff@led+1)& (0+255),w,b
  2733  001582  22DA               	addwfc	fsr2h,f,c
  2734  001584  0E00               	movlw	0
  2735  001586  6EDF               	movwf	indf2,c
  2736                           
  2737                           ;blink.c: 32: led->mode=0;
  2738  001588  0100               	movlb	0	; () banked
  2739  00158A  EE20 F008          	lfsr	2,8
  2740  00158E  5160               	movf	ledOff@led& (0+255),w,b
  2741  001590  26D9               	addwf	fsr2l,f,c
  2742  001592  5161               	movf	(ledOff@led+1)& (0+255),w,b
  2743  001594  22DA               	addwfc	fsr2h,f,c
  2744  001596  0E00               	movlw	0
  2745  001598  6EDF               	movwf	indf2,c
  2746                           
  2747                           ; BSR set to: 0
  2748  00159A  0012               	return		;funcret
  2749  00159C                     __end_of_ledOff:
  2750                           	opt stack 0
  2751                           tblptru	equ	0xFF8
  2752                           prodh	equ	0xFF4
  2753                           prodl	equ	0xFF3
  2754                           postinc0	equ	0xFEE
  2755                           wreg	equ	0xFE8
  2756                           indf1	equ	0xFE7
  2757                           postinc1	equ	0xFE6
  2758                           postdec1	equ	0xFE5
  2759                           fsr1h	equ	0xFE2
  2760                           fsr1l	equ	0xFE1
  2761                           indf2	equ	0xFDF
  2762                           postinc2	equ	0xFDE
  2763                           postdec2	equ	0xFDD
  2764                           plusw2	equ	0xFDB
  2765                           fsr2h	equ	0xFDA
  2766                           fsr2l	equ	0xFD9
  2767                           status	equ	0xFD8
  2768                           
  2769 ;; *************** function _ledFlash *****************
  2770 ;; Defined at:
  2771 ;;		line 46 in file "blink.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;  led             2    0[BANK0 ] PTR struct .
  2774 ;;		 -> ledTx(9), ledRx(9), 
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;		None
  2777 ;; Return value:  Size  Location     Type
  2778 ;;                  1    wreg      void 
  2779 ;; Registers used:
  2780 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2781 ;; Tracked objects:
  2782 ;;		On entry : 0/0
  2783 ;;		On exit  : 0/0
  2784 ;;		Unchanged: 0/0
  2785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2786 ;;      Params:         0       2       0       0       0       0       0
  2787 ;;      Locals:         0       0       0       0       0       0       0
  2788 ;;      Temps:          0       0       0       0       0       0       0
  2789 ;;      Totals:         0       2       0       0       0       0       0
  2790 ;;Total ram usage:        2 bytes
  2791 ;; Hardware stack levels used:    1
  2792 ;; Hardware stack levels required when called:    3
  2793 ;; This function calls:
  2794 ;;		Nothing
  2795 ;; This function is called by:
  2796 ;;		_main
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           	psect	text12
  2801  0015FE                     __ptext12:
  2802                           	opt stack 0
  2803  0015FE                     _ledFlash:
  2804                           	opt stack 27
  2805                           
  2806                           ;blink.c: 48: led->mode=1;
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;incstack = 0
  2810  0015FE  0100               	movlb	0	; () banked
  2811  001600  EE20 F008          	lfsr	2,8
  2812  001604  5160               	movf	ledFlash@led& (0+255),w,b
  2813  001606  26D9               	addwf	fsr2l,f,c
  2814  001608  5161               	movf	(ledFlash@led+1)& (0+255),w,b
  2815  00160A  22DA               	addwfc	fsr2h,f,c
  2816  00160C  0E01               	movlw	1
  2817  00160E  6EDF               	movwf	indf2,c
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;blink.c: 49: led->count=0;
  2821  001610  C060  FFD9         	movff	ledFlash@led,fsr2l
  2822  001614  C061  FFDA         	movff	ledFlash@led+1,fsr2h
  2823  001618  0E00               	movlw	0
  2824  00161A  6EDE               	movwf	postinc2,c
  2825  00161C  0E00               	movlw	0
  2826  00161E  6EDD               	movwf	postdec2,c
  2827                           
  2828                           ; BSR set to: 0
  2829  001620  0012               	return		;funcret
  2830  001622                     __end_of_ledFlash:
  2831                           	opt stack 0
  2832                           tblptru	equ	0xFF8
  2833                           prodh	equ	0xFF4
  2834                           prodl	equ	0xFF3
  2835                           postinc0	equ	0xFEE
  2836                           wreg	equ	0xFE8
  2837                           indf1	equ	0xFE7
  2838                           postinc1	equ	0xFE6
  2839                           postdec1	equ	0xFE5
  2840                           fsr1h	equ	0xFE2
  2841                           fsr1l	equ	0xFE1
  2842                           indf2	equ	0xFDF
  2843                           postinc2	equ	0xFDE
  2844                           postdec2	equ	0xFDD
  2845                           plusw2	equ	0xFDB
  2846                           fsr2h	equ	0xFDA
  2847                           fsr2l	equ	0xFD9
  2848                           status	equ	0xFD8
  2849                           
  2850 ;; *************** function _decodeRecvBuffer *****************
  2851 ;; Defined at:
  2852 ;;		line 185 in file "main.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;		None
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;		None
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  1    wreg      unsigned char 
  2859 ;; Registers used:
  2860 ;;		None
  2861 ;; Tracked objects:
  2862 ;;		On entry : 0/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2866 ;;      Params:         0       0       0       0       0       0       0
  2867 ;;      Locals:         0       0       0       0       0       0       0
  2868 ;;      Temps:          0       0       0       0       0       0       0
  2869 ;;      Totals:         0       0       0       0       0       0       0
  2870 ;;Total ram usage:        0 bytes
  2871 ;; Hardware stack levels used:    1
  2872 ;; Hardware stack levels required when called:    3
  2873 ;; This function calls:
  2874 ;;		Nothing
  2875 ;; This function is called by:
  2876 ;;		_main
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           	psect	text13
  2881  00165C                     __ptext13:
  2882                           	opt stack 0
  2883  00165C                     _decodeRecvBuffer:
  2884                           	opt stack 27
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;incstack = 0
  2888  00165C  0012               	return		;funcret
  2889  00165E                     __end_of_decodeRecvBuffer:
  2890                           	opt stack 0
  2891                           tblptru	equ	0xFF8
  2892                           prodh	equ	0xFF4
  2893                           prodl	equ	0xFF3
  2894                           postinc0	equ	0xFEE
  2895                           wreg	equ	0xFE8
  2896                           indf1	equ	0xFE7
  2897                           postinc1	equ	0xFE6
  2898                           postdec1	equ	0xFE5
  2899                           fsr1h	equ	0xFE2
  2900                           fsr1l	equ	0xFE1
  2901                           indf2	equ	0xFDF
  2902                           postinc2	equ	0xFDE
  2903                           postdec2	equ	0xFDD
  2904                           plusw2	equ	0xFDB
  2905                           fsr2h	equ	0xFDA
  2906                           fsr2l	equ	0xFD9
  2907                           status	equ	0xFD8
  2908                           
  2909 ;; *************** function _crcOk *****************
  2910 ;; Defined at:
  2911 ;;		line 171 in file "main.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;  crc             1    wreg     unsigned char 
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;  crc             1    0[COMRAM] unsigned char 
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      unsigned char 
  2918 ;; Registers used:
  2919 ;;		wreg
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2925 ;;      Params:         0       0       0       0       0       0       0
  2926 ;;      Locals:         0       0       0       0       0       0       0
  2927 ;;      Temps:          0       0       0       0       0       0       0
  2928 ;;      Totals:         0       0       0       0       0       0       0
  2929 ;;Total ram usage:        0 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    3
  2932 ;; This function calls:
  2933 ;;		Nothing
  2934 ;; This function is called by:
  2935 ;;		_main
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           	psect	text14
  2940  001654                     __ptext14:
  2941                           	opt stack 0
  2942  001654                     _crcOk:
  2943                           	opt stack 27
  2944                           
  2945                           ;main.c: 173: return 1;
  2946                           
  2947                           ;incstack = 0
  2948  001654  0E01               	movlw	1
  2949  001656  0012               	return	
  2950  001658                     __end_of_crcOk:
  2951                           	opt stack 0
  2952                           tblptru	equ	0xFF8
  2953                           prodh	equ	0xFF4
  2954                           prodl	equ	0xFF3
  2955                           postinc0	equ	0xFEE
  2956                           wreg	equ	0xFE8
  2957                           indf1	equ	0xFE7
  2958                           postinc1	equ	0xFE6
  2959                           postdec1	equ	0xFE5
  2960                           fsr1h	equ	0xFE2
  2961                           fsr1l	equ	0xFE1
  2962                           indf2	equ	0xFDF
  2963                           postinc2	equ	0xFDE
  2964                           postdec2	equ	0xFDD
  2965                           plusw2	equ	0xFDB
  2966                           fsr2h	equ	0xFDA
  2967                           fsr2l	equ	0xFD9
  2968                           status	equ	0xFD8
  2969                           
  2970 ;; *************** function _InitUart *****************
  2971 ;; Defined at:
  2972 ;;		line 154 in file "main.c"
  2973 ;; Parameters:    Size  Location     Type
  2974 ;;		None
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;		None
  2977 ;; Return value:  Size  Location     Type
  2978 ;;                  1    wreg      void 
  2979 ;; Registers used:
  2980 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2981 ;; Tracked objects:
  2982 ;;		On entry : 0/0
  2983 ;;		On exit  : 0/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2986 ;;      Params:         0       0       0       0       0       0       0
  2987 ;;      Locals:         0       0       0       0       0       0       0
  2988 ;;      Temps:          0       0       0       0       0       0       0
  2989 ;;      Totals:         0       0       0       0       0       0       0
  2990 ;;Total ram usage:        0 bytes
  2991 ;; Hardware stack levels used:    1
  2992 ;; Hardware stack levels required when called:    6
  2993 ;; This function calls:
  2994 ;;		_uartEnableRecv
  2995 ;;		_uartEnableSend
  2996 ;;		_uartInit
  2997 ;; This function is called by:
  2998 ;;		_main
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           	psect	text15
  3003  00111E                     __ptext15:
  3004                           	opt stack 0
  3005  00111E                     _InitUart:
  3006                           	opt stack 24
  3007                           
  3008                           ;main.c: 156: uartInit(&(uart),1,9600,64000000,uartSendBuffer,160,uartRecvBuffer,160);
  3009                           
  3010                           ;incstack = 0
  3011  00111E  0E9E               	movlw	low _uart
  3012  001120  0100               	movlb	0	; () banked
  3013  001122  6F82               	movwf	uartInit@uart& (0+255),b
  3014  001124  0E00               	movlw	high _uart
  3015  001126  0100               	movlb	0	; () banked
  3016  001128  6F83               	movwf	(uartInit@uart+1)& (0+255),b
  3017  00112A  0E01               	movlw	1
  3018  00112C  0100               	movlb	0	; () banked
  3019  00112E  6F84               	movwf	uartInit@num& (0+255),b
  3020  001130  0E80               	movlw	128
  3021  001132  0100               	movlb	0	; () banked
  3022  001134  6F85               	movwf	uartInit@baud& (0+255),b
  3023  001136  0E25               	movlw	37
  3024  001138  6F86               	movwf	(uartInit@baud+1)& (0+255),b
  3025  00113A  0E00               	movlw	0
  3026  00113C  6F87               	movwf	(uartInit@baud+2)& (0+255),b
  3027  00113E  0E00               	movlw	0
  3028  001140  6F88               	movwf	(uartInit@baud+3)& (0+255),b
  3029  001142  0E00               	movlw	0
  3030  001144  0100               	movlb	0	; () banked
  3031  001146  6F89               	movwf	uartInit@osc& (0+255),b
  3032  001148  0E90               	movlw	144
  3033  00114A  6F8A               	movwf	(uartInit@osc+1)& (0+255),b
  3034  00114C  0ED0               	movlw	208
  3035  00114E  6F8B               	movwf	(uartInit@osc+2)& (0+255),b
  3036  001150  0E03               	movlw	3
  3037  001152  6F8C               	movwf	(uartInit@osc+3)& (0+255),b
  3038  001154  0E00               	movlw	low _uartSendBuffer
  3039  001156  0100               	movlb	0	; () banked
  3040  001158  6F8D               	movwf	uartInit@sendbuf& (0+255),b
  3041  00115A  0E03               	movlw	high _uartSendBuffer
  3042  00115C  0100               	movlb	0	; () banked
  3043  00115E  6F8E               	movwf	(uartInit@sendbuf+1)& (0+255),b
  3044  001160  0EA0               	movlw	160
  3045  001162  0100               	movlb	0	; () banked
  3046  001164  6F8F               	movwf	uartInit@sendSize& (0+255),b
  3047  001166  0E00               	movlw	low _uartRecvBuffer
  3048  001168  0100               	movlb	0	; () banked
  3049  00116A  6F90               	movwf	uartInit@recvbuf& (0+255),b
  3050  00116C  0E04               	movlw	high _uartRecvBuffer
  3051  00116E  0100               	movlb	0	; () banked
  3052  001170  6F91               	movwf	(uartInit@recvbuf+1)& (0+255),b
  3053  001172  0EA0               	movlw	160
  3054  001174  0100               	movlb	0	; () banked
  3055  001176  6F92               	movwf	uartInit@recvSize& (0+255),b
  3056  001178  EC72  F004         	call	_uartInit	;wreg free
  3057                           
  3058                           ;main.c: 159: uartEnableSend(&(uart),1);
  3059  00117C  0E9E               	movlw	low _uart
  3060  00117E  0100               	movlb	0	; () banked
  3061  001180  6F60               	movwf	uartEnableSend@uart& (0+255),b
  3062  001182  0E00               	movlw	high _uart
  3063  001184  0100               	movlb	0	; () banked
  3064  001186  6F61               	movwf	(uartEnableSend@uart+1)& (0+255),b
  3065  001188  0E01               	movlw	1
  3066  00118A  0100               	movlb	0	; () banked
  3067  00118C  6F62               	movwf	uartEnableSend@onoff& (0+255),b
  3068  00118E  ECB0  F009         	call	_uartEnableSend	;wreg free
  3069                           
  3070                           ;main.c: 160: uartEnableRecv(&(uart),1);
  3071  001192  0E9E               	movlw	low _uart
  3072  001194  0100               	movlb	0	; () banked
  3073  001196  6F60               	movwf	uartEnableRecv@uart& (0+255),b
  3074  001198  0E00               	movlw	high _uart
  3075  00119A  0100               	movlb	0	; () banked
  3076  00119C  6F61               	movwf	(uartEnableRecv@uart+1)& (0+255),b
  3077  00119E  0E01               	movlw	1
  3078  0011A0  0100               	movlb	0	; () banked
  3079  0011A2  6F62               	movwf	uartEnableRecv@onoff& (0+255),b
  3080  0011A4  EC82  F009         	call	_uartEnableRecv	;wreg free
  3081  0011A8  0012               	return		;funcret
  3082  0011AA                     __end_of_InitUart:
  3083                           	opt stack 0
  3084                           tblptru	equ	0xFF8
  3085                           prodh	equ	0xFF4
  3086                           prodl	equ	0xFF3
  3087                           postinc0	equ	0xFEE
  3088                           wreg	equ	0xFE8
  3089                           indf1	equ	0xFE7
  3090                           postinc1	equ	0xFE6
  3091                           postdec1	equ	0xFE5
  3092                           fsr1h	equ	0xFE2
  3093                           fsr1l	equ	0xFE1
  3094                           indf2	equ	0xFDF
  3095                           postinc2	equ	0xFDE
  3096                           postdec2	equ	0xFDD
  3097                           plusw2	equ	0xFDB
  3098                           fsr2h	equ	0xFDA
  3099                           fsr2l	equ	0xFD9
  3100                           status	equ	0xFD8
  3101                           
  3102 ;; *************** function _uartInit *****************
  3103 ;; Defined at:
  3104 ;;		line 4 in file "uart.c"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;  uart            2   34[BANK0 ] PTR struct .
  3107 ;;		 -> uart(26), 
  3108 ;;  num             1   36[BANK0 ] unsigned char 
  3109 ;;  baud            4   37[BANK0 ] long 
  3110 ;;  osc             4   41[BANK0 ] long 
  3111 ;;  sendbuf         2   45[BANK0 ] PTR unsigned char 
  3112 ;;		 -> uartSendBuffer(132), 
  3113 ;;  sendSize        1   47[BANK0 ] unsigned char 
  3114 ;;  recvbuf         2   48[BANK0 ] PTR unsigned char 
  3115 ;;		 -> uartRecvBuffer(132), 
  3116 ;;  recvSize        1   50[BANK0 ] unsigned char 
  3117 ;; Auto vars:     Size  Location     Type
  3118 ;;  b16             1    0        unsigned char 
  3119 ;;  h               1    0        unsigned char 
  3120 ;;  l               1    0        unsigned char 
  3121 ;; Return value:  Size  Location     Type
  3122 ;;                  1    wreg      void 
  3123 ;; Registers used:
  3124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3125 ;; Tracked objects:
  3126 ;;		On entry : 0/0
  3127 ;;		On exit  : 0/0
  3128 ;;		Unchanged: 0/0
  3129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3130 ;;      Params:         0      17       0       0       0       0       0
  3131 ;;      Locals:         0       0       0       0       0       0       0
  3132 ;;      Temps:          0       0       0       0       0       0       0
  3133 ;;      Totals:         0      17       0       0       0       0       0
  3134 ;;Total ram usage:       17 bytes
  3135 ;; Hardware stack levels used:    1
  3136 ;; Hardware stack levels required when called:    5
  3137 ;; This function calls:
  3138 ;;		_SetBaudRate
  3139 ;;		_fifoInit
  3140 ;; This function is called by:
  3141 ;;		_InitUart
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           	psect	text16
  3146  0008E4                     __ptext16:
  3147                           	opt stack 0
  3148  0008E4                     _uartInit:
  3149                           	opt stack 24
  3150                           
  3151                           ;uart.c: 6: uart->number=num;
  3152                           
  3153                           ;incstack = 0
  3154  0008E4  0100               	movlb	0	; () banked
  3155  0008E6  EE20 F013          	lfsr	2,19
  3156  0008EA  5182               	movf	uartInit@uart& (0+255),w,b
  3157  0008EC  26D9               	addwf	fsr2l,f,c
  3158  0008EE  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  3159  0008F0  22DA               	addwfc	fsr2h,f,c
  3160  0008F2  C084  FFDF         	movff	uartInit@num,indf2
  3161                           
  3162                           ;uart.c: 7: char l;
  3163                           ;uart.c: 8: char h;
  3164                           ;uart.c: 9: char b16;
  3165                           ;uart.c: 11: switch (num)
  3166  0008F6  D072               	goto	l4001
  3167  0008F8                     l3947:
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;uart.c: 15: uart->txReg=&TXREG1;
  3171  0008F8  0100               	movlb	0	; () banked
  3172  0008FA  EE20 F00E          	lfsr	2,14
  3173  0008FE  5182               	movf	uartInit@uart& (0+255),w,b
  3174  000900  26D9               	addwf	fsr2l,f,c
  3175  000902  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  3176  000904  22DA               	addwfc	fsr2h,f,c
  3177  000906  0EAD               	movlw	173
  3178  000908  6EDE               	movwf	postinc2,c
  3179  00090A  0E0F               	movlw	15
  3180  00090C  6EDD               	movwf	postdec2,c
  3181                           
  3182                           ;uart.c: 16: uart->rxReg=&RCREG1;
  3183  00090E  0100               	movlb	0	; () banked
  3184  000910  EE20 F010          	lfsr	2,16
  3185  000914  5182               	movf	uartInit@uart& (0+255),w,b
  3186  000916  26D9               	addwf	fsr2l,f,c
  3187  000918  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  3188  00091A  22DA               	addwfc	fsr2h,f,c
  3189  00091C  0EAE               	movlw	174
  3190  00091E  6EDE               	movwf	postinc2,c
  3191  000920  0E0F               	movlw	15
  3192  000922  6EDD               	movwf	postdec2,c
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;uart.c: 18: ANSELCbits.ANSC6=0;
  3196  000924  010F               	movlb	15	; () banked
  3197  000926  9D3A               	bcf	58,6,b	;volatile
  3198                           
  3199                           ; BSR set to: 15
  3200                           ;uart.c: 19: ANSELCbits.ANSC7=0;
  3201  000928  010F               	movlb	15	; () banked
  3202  00092A  9F3A               	bcf	58,7,b	;volatile
  3203                           
  3204                           ; BSR set to: 15
  3205                           ;uart.c: 20: TRISCbits.RC6=1;
  3206  00092C  8C94               	bsf	3988,6,c	;volatile
  3207                           
  3208                           ; BSR set to: 15
  3209                           ;uart.c: 21: TRISCbits.RC7=1;
  3210  00092E  8E94               	bsf	3988,7,c	;volatile
  3211                           
  3212                           ; BSR set to: 15
  3213                           ;uart.c: 24: TXSTA1bits.BRGH=0;
  3214  000930  94AC               	bcf	4012,2,c	;volatile
  3215                           
  3216                           ; BSR set to: 15
  3217                           ;uart.c: 25: TXSTA1bits.SYNC=0;
  3218  000932  98AC               	bcf	4012,4,c	;volatile
  3219                           
  3220                           ; BSR set to: 15
  3221                           ;uart.c: 26: TXSTA1bits.TX9=0;
  3222  000934  9CAC               	bcf	4012,6,c	;volatile
  3223                           
  3224                           ; BSR set to: 15
  3225                           ;uart.c: 27: TXSTA1bits.TXEN=1;
  3226  000936  8AAC               	bsf	4012,5,c	;volatile
  3227                           
  3228                           ; BSR set to: 15
  3229                           ;uart.c: 28: RCSTA1bits.SPEN=1;
  3230  000938  8EAB               	bsf	4011,7,c	;volatile
  3231                           
  3232                           ; BSR set to: 15
  3233                           ;uart.c: 29: RCSTA1bits.CREN=1;
  3234  00093A  88AB               	bsf	4011,4,c	;volatile
  3235                           
  3236                           ; BSR set to: 15
  3237                           ;uart.c: 31: SetBaudRate(uart,baud,osc);
  3238  00093C  C082  F074         	movff	uartInit@uart,SetBaudRate@uart
  3239  000940  C083  F075         	movff	uartInit@uart+1,SetBaudRate@uart+1
  3240  000944  C085  F076         	movff	uartInit@baud,SetBaudRate@rate
  3241  000948  C086  F077         	movff	uartInit@baud+1,SetBaudRate@rate+1
  3242  00094C  C087  F078         	movff	uartInit@baud+2,SetBaudRate@rate+2
  3243  000950  C088  F079         	movff	uartInit@baud+3,SetBaudRate@rate+3
  3244  000954  C089  F07A         	movff	uartInit@osc,SetBaudRate@osc
  3245  000958  C08A  F07B         	movff	uartInit@osc+1,SetBaudRate@osc+1
  3246  00095C  C08B  F07C         	movff	uartInit@osc+2,SetBaudRate@osc+2
  3247  000960  C08C  F07D         	movff	uartInit@osc+3,SetBaudRate@osc+3
  3248  000964  EC3E  F008         	call	_SetBaudRate	;wreg free
  3249                           
  3250                           ;uart.c: 33: IPR1bits.TXIP=1;
  3251  000968  889F               	bsf	3999,4,c	;volatile
  3252                           
  3253                           ;uart.c: 34: IPR1bits.RCIP=1;
  3254  00096A  8A9F               	bsf	3999,5,c	;volatile
  3255                           
  3256                           ;uart.c: 35: break;
  3257  00096C  D03F               	goto	l4003
  3258  00096E                     l3975:
  3259                           
  3260                           ;uart.c: 38: uart->txReg=&TXREG2;
  3261  00096E  0100               	movlb	0	; () banked
  3262  000970  EE20 F00E          	lfsr	2,14
  3263  000974  5182               	movf	uartInit@uart& (0+255),w,b
  3264  000976  26D9               	addwf	fsr2l,f,c
  3265  000978  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  3266  00097A  22DA               	addwfc	fsr2h,f,c
  3267  00097C  0E73               	movlw	115
  3268  00097E  6EDE               	movwf	postinc2,c
  3269  000980  0E0F               	movlw	15
  3270  000982  6EDD               	movwf	postdec2,c
  3271                           
  3272                           ;uart.c: 39: uart->rxReg=&RCREG2;
  3273  000984  0100               	movlb	0	; () banked
  3274  000986  EE20 F010          	lfsr	2,16
  3275  00098A  5182               	movf	uartInit@uart& (0+255),w,b
  3276  00098C  26D9               	addwf	fsr2l,f,c
  3277  00098E  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  3278  000990  22DA               	addwfc	fsr2h,f,c
  3279  000992  0E74               	movlw	116
  3280  000994  6EDE               	movwf	postinc2,c
  3281  000996  0E0F               	movlw	15
  3282  000998  6EDD               	movwf	postdec2,c
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;uart.c: 41: TRISBbits.RB6=1;
  3286  00099A  8C93               	bsf	3987,6,c	;volatile
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;uart.c: 42: TRISBbits.RB7=1;
  3290  00099C  8E93               	bsf	3987,7,c	;volatile
  3291                           
  3292                           ; BSR set to: 0
  3293                           ;uart.c: 44: TXSTA2bits.BRGH=0;
  3294  00099E  9472               	bcf	3954,2,c	;volatile
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;uart.c: 45: TXSTA2bits.SYNC=0;
  3298  0009A0  9872               	bcf	3954,4,c	;volatile
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;uart.c: 46: TXSTA2bits.TX9=0;
  3302  0009A2  9C72               	bcf	3954,6,c	;volatile
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;uart.c: 47: TXSTA2bits.TXEN=1;
  3306  0009A4  8A72               	bsf	3954,5,c	;volatile
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;uart.c: 48: RCSTA2bits.SPEN=1;
  3310  0009A6  8E71               	bsf	3953,7,c	;volatile
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;uart.c: 49: RCSTA2bits.CREN=1;
  3314  0009A8  8871               	bsf	3953,4,c	;volatile
  3315                           
  3316                           ; BSR set to: 0
  3317                           ;uart.c: 51: SetBaudRate(uart,baud,osc);
  3318  0009AA  C082  F074         	movff	uartInit@uart,SetBaudRate@uart
  3319  0009AE  C083  F075         	movff	uartInit@uart+1,SetBaudRate@uart+1
  3320  0009B2  C085  F076         	movff	uartInit@baud,SetBaudRate@rate
  3321  0009B6  C086  F077         	movff	uartInit@baud+1,SetBaudRate@rate+1
  3322  0009BA  C087  F078         	movff	uartInit@baud+2,SetBaudRate@rate+2
  3323  0009BE  C088  F079         	movff	uartInit@baud+3,SetBaudRate@rate+3
  3324  0009C2  C089  F07A         	movff	uartInit@osc,SetBaudRate@osc
  3325  0009C6  C08A  F07B         	movff	uartInit@osc+1,SetBaudRate@osc+1
  3326  0009CA  C08B  F07C         	movff	uartInit@osc+2,SetBaudRate@osc+2
  3327  0009CE  C08C  F07D         	movff	uartInit@osc+3,SetBaudRate@osc+3
  3328  0009D2  EC3E  F008         	call	_SetBaudRate	;wreg free
  3329                           
  3330                           ;uart.c: 53: IPR3bits.TX2IP=1;
  3331  0009D6  88A5               	bsf	4005,4,c	;volatile
  3332                           
  3333                           ;uart.c: 54: IPR3bits.RC2IP=1;
  3334  0009D8  8AA5               	bsf	4005,5,c	;volatile
  3335                           
  3336                           ;uart.c: 56: }
  3337                           
  3338                           ;uart.c: 55: break;
  3339  0009DA  D008               	goto	l4003
  3340  0009DC                     l4001:
  3341  0009DC  0100               	movlb	0	; () banked
  3342  0009DE  5184               	movf	uartInit@num& (0+255),w,b
  3343                           
  3344                           ; Switch size 1, requested type "space"
  3345                           ; Number of cases is 2, Range of values is 1 to 2
  3346                           ; switch strategies available:
  3347                           ; Name         Instructions Cycles
  3348                           ; simple_byte            7     4 (average)
  3349                           ;	Chosen strategy is simple_byte
  3350  0009E0  0A01               	xorlw	1	; case 1
  3351  0009E2  B4D8               	btfsc	status,2,c
  3352  0009E4  D789               	goto	l3947
  3353  0009E6  0A03               	xorlw	3	; case 2
  3354  0009E8  B4D8               	btfsc	status,2,c
  3355  0009EA  D7C1               	goto	l3975
  3356  0009EC                     l4003:
  3357                           
  3358                           ;uart.c: 58: uart->status=0;
  3359  0009EC  0100               	movlb	0	; () banked
  3360  0009EE  EE20 F012          	lfsr	2,18
  3361  0009F2  5182               	movf	uartInit@uart& (0+255),w,b
  3362  0009F4  26D9               	addwf	fsr2l,f,c
  3363  0009F6  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  3364  0009F8  22DA               	addwfc	fsr2h,f,c
  3365  0009FA  0E00               	movlw	0
  3366  0009FC  6EDF               	movwf	indf2,c
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;uart.c: 60: fifoInit(&uart->sendFifo,sendbuf,sendSize);
  3370  0009FE  C082  F060         	movff	uartInit@uart,fifoInit@fifo
  3371  000A02  C083  F061         	movff	uartInit@uart+1,fifoInit@fifo+1
  3372  000A06  C08D  F062         	movff	uartInit@sendbuf,fifoInit@buf
  3373  000A0A  C08E  F063         	movff	uartInit@sendbuf+1,fifoInit@buf+1
  3374  000A0E  C08F  F064         	movff	uartInit@sendSize,fifoInit@size
  3375  000A12  EC15  F009         	call	_fifoInit	;wreg free
  3376                           
  3377                           ;uart.c: 61: fifoInit(&uart->recvFifo,recvbuf,recvSize);
  3378  000A16  0E06               	movlw	6
  3379  000A18  0100               	movlb	0	; () banked
  3380  000A1A  2582               	addwf	uartInit@uart& (0+255),w,b
  3381  000A1C  0100               	movlb	0	; () banked
  3382  000A1E  6F60               	movwf	fifoInit@fifo& (0+255),b
  3383  000A20  0E00               	movlw	0
  3384  000A22  0100               	movlb	0	; () banked
  3385  000A24  2183               	addwfc	(uartInit@uart+1)& (0+255),w,b
  3386  000A26  0100               	movlb	0	; () banked
  3387  000A28  6F61               	movwf	(fifoInit@fifo+1)& (0+255),b
  3388  000A2A  C090  F062         	movff	uartInit@recvbuf,fifoInit@buf
  3389  000A2E  C091  F063         	movff	uartInit@recvbuf+1,fifoInit@buf+1
  3390  000A32  C092  F064         	movff	uartInit@recvSize,fifoInit@size
  3391  000A36  EC15  F009         	call	_fifoInit	;wreg free
  3392  000A3A  0012               	return		;funcret
  3393  000A3C                     __end_of_uartInit:
  3394                           	opt stack 0
  3395                           tblptru	equ	0xFF8
  3396                           prodh	equ	0xFF4
  3397                           prodl	equ	0xFF3
  3398                           postinc0	equ	0xFEE
  3399                           wreg	equ	0xFE8
  3400                           indf1	equ	0xFE7
  3401                           postinc1	equ	0xFE6
  3402                           postdec1	equ	0xFE5
  3403                           fsr1h	equ	0xFE2
  3404                           fsr1l	equ	0xFE1
  3405                           indf2	equ	0xFDF
  3406                           postinc2	equ	0xFDE
  3407                           postdec2	equ	0xFDD
  3408                           plusw2	equ	0xFDB
  3409                           fsr2h	equ	0xFDA
  3410                           fsr2l	equ	0xFD9
  3411                           status	equ	0xFD8
  3412                           
  3413 ;; *************** function _fifoInit *****************
  3414 ;; Defined at:
  3415 ;;		line 3 in file "fifo.c"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;  fifo            2    0[BANK0 ] PTR struct .
  3418 ;;		 -> uart(26), 
  3419 ;;  buf             2    2[BANK0 ] PTR unsigned char 
  3420 ;;		 -> uartRecvBuffer(132), uartSendBuffer(132), 
  3421 ;;  size            1    4[BANK0 ] unsigned char 
  3422 ;; Auto vars:     Size  Location     Type
  3423 ;;		None
  3424 ;; Return value:  Size  Location     Type
  3425 ;;                  1    wreg      void 
  3426 ;; Registers used:
  3427 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3433 ;;      Params:         0       5       0       0       0       0       0
  3434 ;;      Locals:         0       0       0       0       0       0       0
  3435 ;;      Temps:          0       0       0       0       0       0       0
  3436 ;;      Totals:         0       5       0       0       0       0       0
  3437 ;;Total ram usage:        5 bytes
  3438 ;; Hardware stack levels used:    1
  3439 ;; Hardware stack levels required when called:    3
  3440 ;; This function calls:
  3441 ;;		Nothing
  3442 ;; This function is called by:
  3443 ;;		_uartInit
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           	psect	text17
  3448  00122A                     __ptext17:
  3449                           	opt stack 0
  3450  00122A                     _fifoInit:
  3451                           	opt stack 25
  3452                           
  3453                           ;fifo.c: 5: fifo->buf=buf;
  3454                           
  3455                           ;incstack = 0
  3456  00122A  C060  FFD9         	movff	fifoInit@fifo,fsr2l
  3457  00122E  C061  FFDA         	movff	fifoInit@fifo+1,fsr2h
  3458  001232  C062  FFDE         	movff	fifoInit@buf,postinc2
  3459  001236  C063  FFDD         	movff	fifoInit@buf+1,postdec2
  3460                           
  3461                           ;fifo.c: 6: fifo->maxPtr=size-1;
  3462  00123A  0100               	movlb	0	; () banked
  3463  00123C  EE20 F002          	lfsr	2,2
  3464  001240  5160               	movf	fifoInit@fifo& (0+255),w,b
  3465  001242  26D9               	addwf	fsr2l,f,c
  3466  001244  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  3467  001246  22DA               	addwfc	fsr2h,f,c
  3468  001248  0100               	movlb	0	; () banked
  3469  00124A  0564               	decf	fifoInit@size& (0+255),w,b
  3470  00124C  6EDF               	movwf	indf2,c
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;fifo.c: 7: fifo->status=2;
  3474  00124E  0100               	movlb	0	; () banked
  3475  001250  EE20 F003          	lfsr	2,3
  3476  001254  5160               	movf	fifoInit@fifo& (0+255),w,b
  3477  001256  26D9               	addwf	fsr2l,f,c
  3478  001258  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  3479  00125A  22DA               	addwfc	fsr2h,f,c
  3480  00125C  0E02               	movlw	2
  3481  00125E  6EDF               	movwf	indf2,c
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;fifo.c: 8: fifo->getPtr=fifo->maxPtr;
  3485  001260  0100               	movlb	0	; () banked
  3486  001262  EE20 F002          	lfsr	2,2
  3487  001266  5160               	movf	fifoInit@fifo& (0+255),w,b
  3488  001268  26D9               	addwf	fsr2l,f,c
  3489  00126A  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  3490  00126C  22DA               	addwfc	fsr2h,f,c
  3491  00126E  0100               	movlb	0	; () banked
  3492  001270  EE10 F005          	lfsr	1,5
  3493  001274  5160               	movf	fifoInit@fifo& (0+255),w,b
  3494  001276  26E1               	addwf	fsr1l,f,c
  3495  001278  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  3496  00127A  22E2               	addwfc	fsr1h,f,c
  3497  00127C  CFDF FFE7          	movff	indf2,indf1
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;fifo.c: 9: fifo->putPtr=fifo->maxPtr;
  3501  001280  0100               	movlb	0	; () banked
  3502  001282  EE20 F002          	lfsr	2,2
  3503  001286  5160               	movf	fifoInit@fifo& (0+255),w,b
  3504  001288  26D9               	addwf	fsr2l,f,c
  3505  00128A  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  3506  00128C  22DA               	addwfc	fsr2h,f,c
  3507  00128E  0100               	movlb	0	; () banked
  3508  001290  EE10 F004          	lfsr	1,4
  3509  001294  5160               	movf	fifoInit@fifo& (0+255),w,b
  3510  001296  26E1               	addwf	fsr1l,f,c
  3511  001298  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  3512  00129A  22E2               	addwfc	fsr1h,f,c
  3513  00129C  CFDF FFE7          	movff	indf2,indf1
  3514                           
  3515                           ; BSR set to: 0
  3516  0012A0  0012               	return		;funcret
  3517  0012A2                     __end_of_fifoInit:
  3518                           	opt stack 0
  3519                           tblptru	equ	0xFF8
  3520                           prodh	equ	0xFF4
  3521                           prodl	equ	0xFF3
  3522                           postinc0	equ	0xFEE
  3523                           wreg	equ	0xFE8
  3524                           indf1	equ	0xFE7
  3525                           postinc1	equ	0xFE6
  3526                           postdec1	equ	0xFE5
  3527                           fsr1h	equ	0xFE2
  3528                           fsr1l	equ	0xFE1
  3529                           indf2	equ	0xFDF
  3530                           postinc2	equ	0xFDE
  3531                           postdec2	equ	0xFDD
  3532                           plusw2	equ	0xFDB
  3533                           fsr2h	equ	0xFDA
  3534                           fsr2l	equ	0xFD9
  3535                           status	equ	0xFD8
  3536                           
  3537 ;; *************** function _SetBaudRate *****************
  3538 ;; Defined at:
  3539 ;;		line 105 in file "uart.c"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;  uart            2   20[BANK0 ] PTR struct .
  3542 ;;		 -> uart(26), 
  3543 ;;  rate            4   22[BANK0 ] long 
  3544 ;;  osc             4   26[BANK0 ] long 
  3545 ;; Auto vars:     Size  Location     Type
  3546 ;;  brg16           1   33[BANK0 ] unsigned char 
  3547 ;;  l               1   32[BANK0 ] unsigned char 
  3548 ;;  h               1   31[BANK0 ] unsigned char 
  3549 ;;  o               1   30[BANK0 ] unsigned char 
  3550 ;; Return value:  Size  Location     Type
  3551 ;;                  1    wreg      unsigned char 
  3552 ;; Registers used:
  3553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3554 ;; Tracked objects:
  3555 ;;		On entry : 0/0
  3556 ;;		On exit  : 0/0
  3557 ;;		Unchanged: 0/0
  3558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3559 ;;      Params:         0      10       0       0       0       0       0
  3560 ;;      Locals:         0       4       0       0       0       0       0
  3561 ;;      Temps:          0       0       0       0       0       0       0
  3562 ;;      Totals:         0      14       0       0       0       0       0
  3563 ;;Total ram usage:       14 bytes
  3564 ;; Hardware stack levels used:    1
  3565 ;; Hardware stack levels required when called:    4
  3566 ;; This function calls:
  3567 ;;		_GetBaudRateConfig
  3568 ;; This function is called by:
  3569 ;;		_uartInit
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text18
  3574  00107C                     __ptext18:
  3575                           	opt stack 0
  3576  00107C                     _SetBaudRate:
  3577                           	opt stack 24
  3578                           
  3579                           ;uart.c: 107: char brg16;
  3580                           ;uart.c: 108: char h;
  3581                           ;uart.c: 109: char l;
  3582                           ;uart.c: 110: char o;
  3583                           ;uart.c: 111: o=GetBaudRateConfig(rate,osc,&brg16,&h,&l);
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;incstack = 0
  3587  00107C  C076  F060         	movff	SetBaudRate@rate,GetBaudRateConfig@rate
  3588  001080  C077  F061         	movff	SetBaudRate@rate+1,GetBaudRateConfig@rate+1
  3589  001084  C078  F062         	movff	SetBaudRate@rate+2,GetBaudRateConfig@rate+2
  3590  001088  C079  F063         	movff	SetBaudRate@rate+3,GetBaudRateConfig@rate+3
  3591  00108C  C07A  F064         	movff	SetBaudRate@osc,GetBaudRateConfig@osc
  3592  001090  C07B  F065         	movff	SetBaudRate@osc+1,GetBaudRateConfig@osc+1
  3593  001094  C07C  F066         	movff	SetBaudRate@osc+2,GetBaudRateConfig@osc+2
  3594  001098  C07D  F067         	movff	SetBaudRate@osc+3,GetBaudRateConfig@osc+3
  3595  00109C  0E81               	movlw	low SetBaudRate@brg16
  3596  00109E  0100               	movlb	0	; () banked
  3597  0010A0  6F68               	movwf	GetBaudRateConfig@setBRG16& (0+255),b
  3598  0010A2  0E00               	movlw	high SetBaudRate@brg16
  3599  0010A4  0100               	movlb	0	; () banked
  3600  0010A6  6F69               	movwf	(GetBaudRateConfig@setBRG16+1)& (0+255),b
  3601  0010A8  0E7F               	movlw	low SetBaudRate@h
  3602  0010AA  0100               	movlb	0	; () banked
  3603  0010AC  6F6A               	movwf	GetBaudRateConfig@brgh& (0+255),b
  3604  0010AE  0E00               	movlw	high SetBaudRate@h
  3605  0010B0  0100               	movlb	0	; () banked
  3606  0010B2  6F6B               	movwf	(GetBaudRateConfig@brgh+1)& (0+255),b
  3607  0010B4  0E80               	movlw	low SetBaudRate@l
  3608  0010B6  0100               	movlb	0	; () banked
  3609  0010B8  6F6C               	movwf	GetBaudRateConfig@brgl& (0+255),b
  3610  0010BA  0E00               	movlw	high SetBaudRate@l
  3611  0010BC  0100               	movlb	0	; () banked
  3612  0010BE  6F6D               	movwf	(GetBaudRateConfig@brgl+1)& (0+255),b
  3613  0010C0  EC5B  F003         	call	_GetBaudRateConfig	;wreg free
  3614  0010C4  0100               	movlb	0	; () banked
  3615  0010C6  6F7E               	movwf	SetBaudRate@o& (0+255),b
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;uart.c: 112: if (o==0) return 0;
  3619  0010C8  0100               	movlb	0	; () banked
  3620  0010CA  517E               	movf	SetBaudRate@o& (0+255),w,b
  3621  0010CC  0100               	movlb	0	; () banked
  3622  0010CE  B4D8               	btfsc	status,2,c
  3623  0010D0  0012               	return	
  3624  0010D2  D016               	goto	l3889
  3625  0010D4                     l368:
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;uart.c: 117: BAUDCON1bits.BRG16=brg16;
  3629  0010D4  0100               	movlb	0	; () banked
  3630  0010D6  B181               	btfsc	SetBaudRate@brg16& (0+255),0,b
  3631  0010D8  D002               	bra	u1765
  3632  0010DA  96B8               	bcf	4024,3,c	;volatile
  3633  0010DC  D001               	bra	u1766
  3634  0010DE                     u1765:
  3635  0010DE  86B8               	bsf	4024,3,c	;volatile
  3636  0010E0                     u1766:
  3637                           
  3638                           ;uart.c: 118: SPBRGH1=h;
  3639  0010E0  C07F  FFB0         	movff	SetBaudRate@h,4016	;volatile
  3640                           
  3641                           ;uart.c: 119: SPBRG1=l;
  3642  0010E4  C080  FFAF         	movff	SetBaudRate@l,4015	;volatile
  3643                           
  3644                           ;uart.c: 120: break;
  3645  0010E8  0012               	return	
  3646  0010EA                     l370:
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;uart.c: 122: BAUDCON2bits.BRG16=brg16;
  3650  0010EA  0100               	movlb	0	; () banked
  3651  0010EC  B181               	btfsc	SetBaudRate@brg16& (0+255),0,b
  3652  0010EE  D002               	bra	u1775
  3653  0010F0  9670               	bcf	3952,3,c	;volatile
  3654  0010F2  D001               	bra	u1776
  3655  0010F4                     u1775:
  3656  0010F4  8670               	bsf	3952,3,c	;volatile
  3657  0010F6                     u1776:
  3658                           
  3659                           ;uart.c: 123: SPBRGH2=h;
  3660  0010F6  C07F  FF76         	movff	SetBaudRate@h,3958	;volatile
  3661                           
  3662                           ;uart.c: 124: SPBRG2=l;
  3663  0010FA  C080  FF75         	movff	SetBaudRate@l,3957	;volatile
  3664                           
  3665                           ;uart.c: 126: }
  3666                           
  3667                           ;uart.c: 125: break;
  3668  0010FE  0012               	return	
  3669  001100                     l3889:
  3670  001100  0100               	movlb	0	; () banked
  3671  001102  EE20 F013          	lfsr	2,19
  3672  001106  5174               	movf	SetBaudRate@uart& (0+255),w,b
  3673  001108  26D9               	addwf	fsr2l,f,c
  3674  00110A  5175               	movf	(SetBaudRate@uart+1)& (0+255),w,b
  3675  00110C  22DA               	addwfc	fsr2h,f,c
  3676  00110E  50DF               	movf	indf2,w,c
  3677                           
  3678                           ; Switch size 1, requested type "space"
  3679                           ; Number of cases is 2, Range of values is 1 to 2
  3680                           ; switch strategies available:
  3681                           ; Name         Instructions Cycles
  3682                           ; simple_byte            7     4 (average)
  3683                           ;	Chosen strategy is simple_byte
  3684  001110  0A01               	xorlw	1	; case 1
  3685  001112  B4D8               	btfsc	status,2,c
  3686  001114  D7DF               	goto	l368
  3687  001116  0A03               	xorlw	3	; case 2
  3688  001118  A4D8               	btfss	status,2,c
  3689  00111A  0012               	return	
  3690  00111C  D7E6               	goto	l370
  3691  00111E                     __end_of_SetBaudRate:
  3692                           	opt stack 0
  3693                           tblptru	equ	0xFF8
  3694                           prodh	equ	0xFF4
  3695                           prodl	equ	0xFF3
  3696                           postinc0	equ	0xFEE
  3697                           wreg	equ	0xFE8
  3698                           indf1	equ	0xFE7
  3699                           postinc1	equ	0xFE6
  3700                           postdec1	equ	0xFE5
  3701                           fsr1h	equ	0xFE2
  3702                           fsr1l	equ	0xFE1
  3703                           indf2	equ	0xFDF
  3704                           postinc2	equ	0xFDE
  3705                           postdec2	equ	0xFDD
  3706                           plusw2	equ	0xFDB
  3707                           fsr2h	equ	0xFDA
  3708                           fsr2l	equ	0xFD9
  3709                           status	equ	0xFD8
  3710                           
  3711 ;; *************** function _GetBaudRateConfig *****************
  3712 ;; Defined at:
  3713 ;;		line 64 in file "uart.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;  rate            4    0[BANK0 ] long 
  3716 ;;  osc             4    4[BANK0 ] long 
  3717 ;;  setBRG16        2    8[BANK0 ] PTR unsigned char 
  3718 ;;		 -> SetBaudRate@brg16(1), 
  3719 ;;  brgh            2   10[BANK0 ] PTR unsigned char 
  3720 ;;		 -> SetBaudRate@h(1), 
  3721 ;;  brgl            2   12[BANK0 ] PTR unsigned char 
  3722 ;;		 -> SetBaudRate@l(1), 
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;  brg             2   18[BANK0 ] int 
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  1    wreg      unsigned char 
  3727 ;; Registers used:
  3728 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3729 ;; Tracked objects:
  3730 ;;		On entry : 0/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3734 ;;      Params:         0      14       0       0       0       0       0
  3735 ;;      Locals:         0       2       0       0       0       0       0
  3736 ;;      Temps:          0       4       0       0       0       0       0
  3737 ;;      Totals:         0      20       0       0       0       0       0
  3738 ;;Total ram usage:       20 bytes
  3739 ;; Hardware stack levels used:    1
  3740 ;; Hardware stack levels required when called:    3
  3741 ;; This function calls:
  3742 ;;		Nothing
  3743 ;; This function is called by:
  3744 ;;		_SetBaudRate
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           	psect	text19
  3749  0006B6                     __ptext19:
  3750                           	opt stack 0
  3751  0006B6                     _GetBaudRateConfig:
  3752                           	opt stack 24
  3753                           
  3754                           ;uart.c: 66: int brg=0;
  3755                           
  3756                           ;incstack = 0
  3757  0006B6  0E00               	movlw	0
  3758  0006B8  0100               	movlb	0	; () banked
  3759  0006BA  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3760  0006BC  0E00               	movlw	0
  3761  0006BE  6F72               	movwf	GetBaudRateConfig@brg& (0+255),b
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;uart.c: 68: if (osc==64000000)
  3765  0006C0  0E90               	movlw	144
  3766  0006C2  0100               	movlb	0	; () banked
  3767  0006C4  1965               	xorwf	(GetBaudRateConfig@osc+1)& (0+255),w,b
  3768  0006C6  E10A               	bnz	u1691
  3769  0006C8  0ED0               	movlw	208
  3770  0006CA  0100               	movlb	0	; () banked
  3771  0006CC  1966               	xorwf	(GetBaudRateConfig@osc+2)& (0+255),w,b
  3772  0006CE  E106               	bnz	u1691
  3773  0006D0  0E03               	movlw	3
  3774  0006D2  0100               	movlb	0	; () banked
  3775  0006D4  1967               	xorwf	(GetBaudRateConfig@osc+3)& (0+255),w,b
  3776  0006D6  0100               	movlb	0	; () banked
  3777  0006D8  1164               	iorwf	GetBaudRateConfig@osc& (0+255),w,b
  3778  0006DA  A4D8               	btfss	status,2,c
  3779  0006DC                     u1691:
  3780  0006DC  D095               	goto	l3703
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;uart.c: 69: {
  3784                           ;uart.c: 70: *setBRG16=1;
  3785  0006DE  C068  FFD9         	movff	GetBaudRateConfig@setBRG16,fsr2l
  3786  0006E2  C069  FFDA         	movff	GetBaudRateConfig@setBRG16+1,fsr2h
  3787  0006E6  0E01               	movlw	1
  3788  0006E8  6EDF               	movwf	indf2,c
  3789                           
  3790                           ;uart.c: 71: switch (rate)
  3791  0006EA  D02A               	goto	l3701
  3792  0006EC                     l3679:
  3793                           
  3794                           ; BSR set to: 0
  3795  0006EC  0E34               	movlw	52
  3796  0006EE  0100               	movlb	0	; () banked
  3797  0006F0  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3798  0006F2  0E14               	movlw	20
  3799  0006F4  D0AD               	goto	L17
  3800  0006F6                     l3681:
  3801                           
  3802                           ; BSR set to: 0
  3803  0006F6  0E0D               	movlw	13
  3804  0006F8  0100               	movlb	0	; () banked
  3805  0006FA  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3806  0006FC  0E04               	movlw	4
  3807  0006FE  D0A8               	goto	L17
  3808  000700                     l3683:
  3809                           
  3810                           ; BSR set to: 0
  3811  000700  0E06               	movlw	6
  3812  000702  0100               	movlb	0	; () banked
  3813  000704  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3814  000706  0E82               	movlw	130
  3815  000708  D0A3               	goto	L17
  3816  00070A                     l3685:
  3817                           
  3818                           ; BSR set to: 0
  3819  00070A  0E01               	movlw	1
  3820  00070C  0100               	movlb	0	; () banked
  3821  00070E  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3822  000710  0EA0               	movlw	160
  3823  000712  D09E               	goto	L17
  3824  000714                     l3687:
  3825                           
  3826                           ; BSR set to: 0
  3827  000714  0E01               	movlw	1
  3828  000716  0100               	movlb	0	; () banked
  3829  000718  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3830  00071A  0E7F               	movlw	127
  3831  00071C  D099               	goto	L17
  3832  00071E                     l3689:
  3833                           
  3834                           ; BSR set to: 0
  3835  00071E  0E00               	movlw	0
  3836  000720  0100               	movlb	0	; () banked
  3837  000722  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3838  000724  0ECF               	movlw	207
  3839  000726  D094               	goto	L17
  3840  000728                     l3691:
  3841                           
  3842                           ; BSR set to: 0
  3843  000728  0E00               	movlw	0
  3844  00072A  0100               	movlb	0	; () banked
  3845  00072C  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3846  00072E  0E44               	movlw	68
  3847  000730  D08F               	goto	L17
  3848  000732                     l3693:
  3849                           
  3850                           ; BSR set to: 0
  3851  000732  0E00               	movlw	0
  3852  000734  0100               	movlb	0	; () banked
  3853  000736  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  3854  000738  0E22               	movlw	34
  3855  00073A  D08A               	goto	L17
  3856  00073C                     l3695:
  3857                           
  3858                           ; BSR set to: 0
  3859  00073C  0E00               	movlw	0
  3860                           
  3861                           ; BSR set to: 0
  3862  00073E  0012               	return	
  3863  000740                     l3701:
  3864                           
  3865                           ; BSR set to: 0
  3866  000740  C060  F06E         	movff	GetBaudRateConfig@rate,??_GetBaudRateConfig
  3867  000744  C061  F06F         	movff	GetBaudRateConfig@rate+1,??_GetBaudRateConfig+1
  3868  000748  C062  F070         	movff	GetBaudRateConfig@rate+2,??_GetBaudRateConfig+2
  3869  00074C  C063  F071         	movff	GetBaudRateConfig@rate+3,??_GetBaudRateConfig+3
  3870                           
  3871                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  3872                           ; Switch size 1, requested type "space"
  3873                           ; Number of cases is 1, Range of values is 0 to 0
  3874                           ; switch strategies available:
  3875                           ; Name         Instructions Cycles
  3876                           ; simple_byte            4     3 (average)
  3877                           ;	Chosen strategy is simple_byte
  3878  000750  0100               	movlb	0	; () banked
  3879  000752  5171               	movf	(??_GetBaudRateConfig+3)& (0+255),w,b
  3880  000754  0A00               	xorlw	0	; case 0
  3881  000756  B4D8               	btfsc	status,2,c
  3882  000758  D04E               	goto	l4907
  3883  00075A  D7F0               	goto	l3695
  3884  00075C                     l4903:
  3885                           
  3886                           ; BSR set to: 0
  3887                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 7 sub-sw
      +                          itches
  3888                           ; Switch size 1, requested type "space"
  3889                           ; Number of cases is 7, Range of values is 1 to 225
  3890                           ; switch strategies available:
  3891                           ; Name         Instructions Cycles
  3892                           ; simple_byte           22    12 (average)
  3893                           ;	Chosen strategy is simple_byte
  3894  00075C  0100               	movlb	0	; () banked
  3895  00075E  516F               	movf	(??_GetBaudRateConfig+1)& (0+255),w,b
  3896  000760  0A01               	xorlw	1	; case 1
  3897  000762  B4D8               	btfsc	status,2,c
  3898  000764  D013               	goto	l4909
  3899  000766  0A05               	xorlw	5	; case 4
  3900  000768  B4D8               	btfsc	status,2,c
  3901  00076A  D016               	goto	l4911
  3902  00076C  0A0D               	xorlw	13	; case 9
  3903  00076E  B4D8               	btfsc	status,2,c
  3904  000770  D019               	goto	l4913
  3905  000772  0A2C               	xorlw	44	; case 37
  3906  000774  B4D8               	btfsc	status,2,c
  3907  000776  D01C               	goto	l4915
  3908  000778  0A0D               	xorlw	13	; case 40
  3909  00077A  B4D8               	btfsc	status,2,c
  3910  00077C  D01F               	goto	l4917
  3911  00077E  0A63               	xorlw	99	; case 75
  3912  000780  B4D8               	btfsc	status,2,c
  3913  000782  D022               	goto	l4919
  3914  000784  0AAA               	xorlw	170	; case 225
  3915  000786  B4D8               	btfsc	status,2,c
  3916  000788  D025               	goto	l4921
  3917  00078A  D7D8               	goto	l3695
  3918  00078C                     l4909:
  3919                           
  3920                           ; BSR set to: 0
  3921                           ; Switch size 1, requested type "space"
  3922                           ; Number of cases is 1, Range of values is 44 to 44
  3923                           ; switch strategies available:
  3924                           ; Name         Instructions Cycles
  3925                           ; simple_byte            4     3 (average)
  3926                           ;	Chosen strategy is simple_byte
  3927  00078C  0100               	movlb	0	; () banked
  3928  00078E  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  3929  000790  0A2C               	xorlw	44	; case 44
  3930  000792  B4D8               	btfsc	status,2,c
  3931  000794  D7AB               	goto	l3679
  3932  000796  D7D2               	goto	l3695
  3933  000798                     l4911:
  3934                           
  3935                           ; BSR set to: 0
  3936                           ; Switch size 1, requested type "space"
  3937                           ; Number of cases is 1, Range of values is 176 to 176
  3938                           ; switch strategies available:
  3939                           ; Name         Instructions Cycles
  3940                           ; simple_byte            4     3 (average)
  3941                           ;	Chosen strategy is simple_byte
  3942  000798  0100               	movlb	0	; () banked
  3943  00079A  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  3944  00079C  0AB0               	xorlw	176	; case 176
  3945  00079E  B4D8               	btfsc	status,2,c
  3946  0007A0  D7AA               	goto	l3681
  3947  0007A2  D7CC               	goto	l3695
  3948  0007A4                     l4913:
  3949                           
  3950                           ; BSR set to: 0
  3951                           ; Switch size 1, requested type "space"
  3952                           ; Number of cases is 1, Range of values is 96 to 96
  3953                           ; switch strategies available:
  3954                           ; Name         Instructions Cycles
  3955                           ; simple_byte            4     3 (average)
  3956                           ;	Chosen strategy is simple_byte
  3957  0007A4  0100               	movlb	0	; () banked
  3958  0007A6  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  3959  0007A8  0A60               	xorlw	96	; case 96
  3960  0007AA  B4D8               	btfsc	status,2,c
  3961  0007AC  D7A9               	goto	l3683
  3962  0007AE  D7C6               	goto	l3695
  3963  0007B0                     l4915:
  3964                           
  3965                           ; BSR set to: 0
  3966                           ; Switch size 1, requested type "space"
  3967                           ; Number of cases is 1, Range of values is 128 to 128
  3968                           ; switch strategies available:
  3969                           ; Name         Instructions Cycles
  3970                           ; simple_byte            4     3 (average)
  3971                           ;	Chosen strategy is simple_byte
  3972  0007B0  0100               	movlb	0	; () banked
  3973  0007B2  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  3974  0007B4  0A80               	xorlw	128	; case 128
  3975  0007B6  B4D8               	btfsc	status,2,c
  3976  0007B8  D7A8               	goto	l3685
  3977  0007BA  D7C0               	goto	l3695
  3978  0007BC                     l4917:
  3979                           
  3980                           ; BSR set to: 0
  3981                           ; Switch size 1, requested type "space"
  3982                           ; Number of cases is 1, Range of values is 177 to 177
  3983                           ; switch strategies available:
  3984                           ; Name         Instructions Cycles
  3985                           ; simple_byte            4     3 (average)
  3986                           ;	Chosen strategy is simple_byte
  3987  0007BC  0100               	movlb	0	; () banked
  3988  0007BE  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  3989  0007C0  0AB1               	xorlw	177	; case 177
  3990  0007C2  B4D8               	btfsc	status,2,c
  3991  0007C4  D7A7               	goto	l3687
  3992  0007C6  D7BA               	goto	l3695
  3993  0007C8                     l4919:
  3994                           
  3995                           ; BSR set to: 0
  3996                           ; Switch size 1, requested type "space"
  3997                           ; Number of cases is 1, Range of values is 0 to 0
  3998                           ; switch strategies available:
  3999                           ; Name         Instructions Cycles
  4000                           ; simple_byte            4     3 (average)
  4001                           ;	Chosen strategy is simple_byte
  4002  0007C8  0100               	movlb	0	; () banked
  4003  0007CA  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4004  0007CC  0A00               	xorlw	0	; case 0
  4005  0007CE  B4D8               	btfsc	status,2,c
  4006  0007D0  D7A6               	goto	l3689
  4007  0007D2  D7B4               	goto	l3695
  4008  0007D4                     l4921:
  4009                           
  4010                           ; BSR set to: 0
  4011                           ; Switch size 1, requested type "space"
  4012                           ; Number of cases is 1, Range of values is 0 to 0
  4013                           ; switch strategies available:
  4014                           ; Name         Instructions Cycles
  4015                           ; simple_byte            4     3 (average)
  4016                           ;	Chosen strategy is simple_byte
  4017  0007D4  0100               	movlb	0	; () banked
  4018  0007D6  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4019  0007D8  0A00               	xorlw	0	; case 0
  4020  0007DA  B4D8               	btfsc	status,2,c
  4021  0007DC  D7A5               	goto	l3691
  4022  0007DE  D7AE               	goto	l3695
  4023  0007E0                     l4905:
  4024                           
  4025                           ; BSR set to: 0
  4026                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4027                           ; Switch size 1, requested type "space"
  4028                           ; Number of cases is 1, Range of values is 194 to 194
  4029                           ; switch strategies available:
  4030                           ; Name         Instructions Cycles
  4031                           ; simple_byte            4     3 (average)
  4032                           ;	Chosen strategy is simple_byte
  4033  0007E0  0100               	movlb	0	; () banked
  4034  0007E2  516F               	movf	(??_GetBaudRateConfig+1)& (0+255),w,b
  4035  0007E4  0AC2               	xorlw	194	; case 194
  4036  0007E6  A4D8               	btfss	status,2,c
  4037  0007E8  D7A9               	goto	l3695
  4038                           
  4039                           ; BSR set to: 0
  4040                           ; Switch size 1, requested type "space"
  4041                           ; Number of cases is 1, Range of values is 0 to 0
  4042                           ; switch strategies available:
  4043                           ; Name         Instructions Cycles
  4044                           ; simple_byte            4     3 (average)
  4045                           ;	Chosen strategy is simple_byte
  4046  0007EA  0100               	movlb	0	; () banked
  4047  0007EC  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4048  0007EE  0A00               	xorlw	0	; case 0
  4049  0007F0  B4D8               	btfsc	status,2,c
  4050  0007F2  D79F               	goto	l3693
  4051  0007F4  D7A3               	goto	l3695
  4052  0007F6                     l4907:
  4053                           
  4054                           ; BSR set to: 0
  4055                           ; Switch size 1, requested type "space"
  4056                           ; Number of cases is 2, Range of values is 0 to 1
  4057                           ; switch strategies available:
  4058                           ; Name         Instructions Cycles
  4059                           ; simple_byte            7     4 (average)
  4060                           ;	Chosen strategy is simple_byte
  4061  0007F6  0100               	movlb	0	; () banked
  4062  0007F8  5170               	movf	(??_GetBaudRateConfig+2)& (0+255),w,b
  4063  0007FA  0A00               	xorlw	0	; case 0
  4064  0007FC  B4D8               	btfsc	status,2,c
  4065  0007FE  D7AE               	goto	l4903
  4066  000800  0A01               	xorlw	1	; case 1
  4067  000802  B4D8               	btfsc	status,2,c
  4068  000804  D7ED               	goto	l4905
  4069  000806  D79A               	goto	l3695
  4070  000808                     l3703:
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;uart.c: 84: else if (osc==1000000)
  4074  000808  0E40               	movlw	64
  4075  00080A  0100               	movlb	0	; () banked
  4076  00080C  1964               	xorwf	GetBaudRateConfig@osc& (0+255),w,b
  4077  00080E  E196               	bnz	l3695
  4078  000810  0E42               	movlw	66
  4079  000812  0100               	movlb	0	; () banked
  4080  000814  1965               	xorwf	(GetBaudRateConfig@osc+1)& (0+255),w,b
  4081  000816  E192               	bnz	l3695
  4082  000818  0E0F               	movlw	15
  4083  00081A  0100               	movlb	0	; () banked
  4084  00081C  1966               	xorwf	(GetBaudRateConfig@osc+2)& (0+255),w,b
  4085  00081E  0100               	movlb	0	; () banked
  4086  000820  1167               	iorwf	(GetBaudRateConfig@osc+3)& (0+255),w,b
  4087  000822  A4D8               	btfss	status,2,c
  4088  000824  D78B               	goto	l3695
  4089                           
  4090                           ; BSR set to: 0
  4091                           ;uart.c: 85: {
  4092                           ;uart.c: 86: *setBRG16=1;
  4093  000826  C068  FFD9         	movff	GetBaudRateConfig@setBRG16,fsr2l
  4094  00082A  C069  FFDA         	movff	GetBaudRateConfig@setBRG16+1,fsr2h
  4095  00082E  0E01               	movlw	1
  4096  000830  6EDF               	movwf	indf2,c
  4097                           
  4098                           ;uart.c: 87: switch (rate)
  4099  000832  D010               	goto	l3721
  4100  000834                     l3709:
  4101                           
  4102                           ; BSR set to: 0
  4103  000834  0E00               	movlw	0
  4104  000836  0100               	movlb	0	; () banked
  4105  000838  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  4106  00083A  0E33               	movlw	51
  4107  00083C  D009               	goto	L17
  4108  00083E                     l3711:
  4109                           
  4110                           ; BSR set to: 0
  4111  00083E  0E00               	movlw	0
  4112  000840  0100               	movlb	0	; () banked
  4113  000842  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  4114  000844  0E19               	movlw	25
  4115  000846  D004               	goto	L17
  4116  000848                     l3713:
  4117                           
  4118                           ; BSR set to: 0
  4119  000848  0E00               	movlw	0
  4120  00084A  0100               	movlb	0	; () banked
  4121  00084C  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  4122  00084E  0E05               	movlw	5
  4123  000850                     L17:
  4124  000850  6F72               	movwf	GetBaudRateConfig@brg& (0+255),b
  4125  000852  D039               	goto	l3727
  4126  000854                     l3721:
  4127                           
  4128                           ; BSR set to: 0
  4129  000854  C060  F06E         	movff	GetBaudRateConfig@rate,??_GetBaudRateConfig
  4130  000858  C061  F06F         	movff	GetBaudRateConfig@rate+1,??_GetBaudRateConfig+1
  4131  00085C  C062  F070         	movff	GetBaudRateConfig@rate+2,??_GetBaudRateConfig+2
  4132  000860  C063  F071         	movff	GetBaudRateConfig@rate+3,??_GetBaudRateConfig+3
  4133                           
  4134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4135                           ; Switch size 1, requested type "space"
  4136                           ; Number of cases is 1, Range of values is 0 to 0
  4137                           ; switch strategies available:
  4138                           ; Name         Instructions Cycles
  4139                           ; simple_byte            4     3 (average)
  4140                           ;	Chosen strategy is simple_byte
  4141  000864  0100               	movlb	0	; () banked
  4142  000866  5171               	movf	(??_GetBaudRateConfig+3)& (0+255),w,b
  4143  000868  0A00               	xorlw	0	; case 0
  4144  00086A  B4D8               	btfsc	status,2,c
  4145  00086C  D026               	goto	l4927
  4146  00086E  D766               	goto	l3695
  4147  000870                     l4925:
  4148                           
  4149                           ; BSR set to: 0
  4150                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  4151                           ; Switch size 1, requested type "space"
  4152                           ; Number of cases is 4, Range of values is 1 to 40
  4153                           ; switch strategies available:
  4154                           ; Name         Instructions Cycles
  4155                           ; simple_byte           13     7 (average)
  4156                           ;	Chosen strategy is simple_byte
  4157  000870  0100               	movlb	0	; () banked
  4158  000872  516F               	movf	(??_GetBaudRateConfig+1)& (0+255),w,b
  4159  000874  0A01               	xorlw	1	; case 1
  4160  000876  B4D8               	btfsc	status,2,c
  4161  000878  D00A               	goto	l4929
  4162  00087A  0A05               	xorlw	5	; case 4
  4163  00087C  B4D8               	btfsc	status,2,c
  4164  00087E  D00B               	goto	l4931
  4165  000880  0A0D               	xorlw	13	; case 9
  4166  000882  B4D8               	btfsc	status,2,c
  4167  000884  D00E               	goto	l4933
  4168  000886  0A21               	xorlw	33	; case 40
  4169  000888  B4D8               	btfsc	status,2,c
  4170  00088A  D011               	goto	l4935
  4171  00088C  D757               	goto	l3695
  4172  00088E                     l4929:
  4173                           
  4174                           ; BSR set to: 0
  4175                           ; Switch size 1, requested type "space"
  4176                           ; Number of cases is 1, Range of values is 44 to 44
  4177                           ; switch strategies available:
  4178                           ; Name         Instructions Cycles
  4179                           ; simple_byte            4     3 (average)
  4180                           ;	Chosen strategy is simple_byte
  4181  00088E  0100               	movlb	0	; () banked
  4182  000890  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4183  000892  0A2C               	xorlw	44	; case 44
  4184  000894  D79C               	goto	L18
  4185  000896                     l4931:
  4186                           
  4187                           ; BSR set to: 0
  4188                           ; Switch size 1, requested type "space"
  4189                           ; Number of cases is 1, Range of values is 176 to 176
  4190                           ; switch strategies available:
  4191                           ; Name         Instructions Cycles
  4192                           ; simple_byte            4     3 (average)
  4193                           ;	Chosen strategy is simple_byte
  4194  000896  0100               	movlb	0	; () banked
  4195  000898  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4196  00089A  0AB0               	xorlw	176	; case 176
  4197  00089C  B4D8               	btfsc	status,2,c
  4198  00089E  D7CA               	goto	l3709
  4199  0008A0  D74D               	goto	l3695
  4200  0008A2                     l4933:
  4201                           
  4202                           ; BSR set to: 0
  4203                           ; Switch size 1, requested type "space"
  4204                           ; Number of cases is 1, Range of values is 96 to 96
  4205                           ; switch strategies available:
  4206                           ; Name         Instructions Cycles
  4207                           ; simple_byte            4     3 (average)
  4208                           ;	Chosen strategy is simple_byte
  4209  0008A2  0100               	movlb	0	; () banked
  4210  0008A4  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4211  0008A6  0A60               	xorlw	96	; case 96
  4212  0008A8  B4D8               	btfsc	status,2,c
  4213  0008AA  D7C9               	goto	l3711
  4214  0008AC  D747               	goto	l3695
  4215  0008AE                     l4935:
  4216                           
  4217                           ; BSR set to: 0
  4218                           ; Switch size 1, requested type "space"
  4219                           ; Number of cases is 1, Range of values is 177 to 177
  4220                           ; switch strategies available:
  4221                           ; Name         Instructions Cycles
  4222                           ; simple_byte            4     3 (average)
  4223                           ;	Chosen strategy is simple_byte
  4224  0008AE  0100               	movlb	0	; () banked
  4225  0008B0  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  4226  0008B2  0AB1               	xorlw	177	; case 177
  4227  0008B4  B4D8               	btfsc	status,2,c
  4228  0008B6  D7C8               	goto	l3713
  4229  0008B8  D741               	goto	l3695
  4230  0008BA                     l4927:
  4231                           
  4232                           ; BSR set to: 0
  4233                           ; Switch size 1, requested type "space"
  4234                           ; Number of cases is 1, Range of values is 0 to 0
  4235                           ; switch strategies available:
  4236                           ; Name         Instructions Cycles
  4237                           ; simple_byte            4     3 (average)
  4238                           ;	Chosen strategy is simple_byte
  4239  0008BA  0100               	movlb	0	; () banked
  4240  0008BC  5170               	movf	(??_GetBaudRateConfig+2)& (0+255),w,b
  4241  0008BE  0A00               	xorlw	0	; case 0
  4242  0008C0  B4D8               	btfsc	status,2,c
  4243  0008C2  D7D6               	goto	l4925
  4244  0008C4  D73B               	goto	l3695
  4245  0008C6                     l3727:
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;uart.c: 99: }
  4249                           ;uart.c: 100: *brgh=(char)((brg >> 8) & 0xff);
  4250  0008C6  0100               	movlb	0	; () banked
  4251  0008C8  5173               	movf	(GetBaudRateConfig@brg+1)& (0+255),w,b
  4252  0008CA  C06A  FFD9         	movff	GetBaudRateConfig@brgh,fsr2l
  4253  0008CE  C06B  FFDA         	movff	GetBaudRateConfig@brgh+1,fsr2h
  4254  0008D2  6EDF               	movwf	indf2,c
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;uart.c: 101: *brgl=(char)(brg & 0xff);
  4258  0008D4  C06C  FFD9         	movff	GetBaudRateConfig@brgl,fsr2l
  4259  0008D8  C06D  FFDA         	movff	GetBaudRateConfig@brgl+1,fsr2h
  4260  0008DC  C072  FFDF         	movff	GetBaudRateConfig@brg,indf2
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;uart.c: 102: return 1;
  4264  0008E0  0E01               	movlw	1
  4265  0008E2  0012               	return	
  4266  0008E4                     __end_of_GetBaudRateConfig:
  4267                           	opt stack 0
  4268                           tblptru	equ	0xFF8
  4269                           prodh	equ	0xFF4
  4270                           prodl	equ	0xFF3
  4271                           postinc0	equ	0xFEE
  4272                           wreg	equ	0xFE8
  4273                           indf1	equ	0xFE7
  4274                           postinc1	equ	0xFE6
  4275                           postdec1	equ	0xFE5
  4276                           fsr1h	equ	0xFE2
  4277                           fsr1l	equ	0xFE1
  4278                           indf2	equ	0xFDF
  4279                           postinc2	equ	0xFDE
  4280                           postdec2	equ	0xFDD
  4281                           plusw2	equ	0xFDB
  4282                           fsr2h	equ	0xFDA
  4283                           fsr2l	equ	0xFD9
  4284                           status	equ	0xFD8
  4285                           
  4286 ;; *************** function _uartEnableSend *****************
  4287 ;; Defined at:
  4288 ;;		line 139 in file "uart.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;  uart            2    0[BANK0 ] PTR struct .
  4291 ;;		 -> uart(26), 
  4292 ;;  onoff           1    2[BANK0 ] unsigned char 
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;		None
  4295 ;; Return value:  Size  Location     Type
  4296 ;;                  1    wreg      void 
  4297 ;; Registers used:
  4298 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4299 ;; Tracked objects:
  4300 ;;		On entry : 0/0
  4301 ;;		On exit  : 0/0
  4302 ;;		Unchanged: 0/0
  4303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4304 ;;      Params:         0       3       0       0       0       0       0
  4305 ;;      Locals:         0       0       0       0       0       0       0
  4306 ;;      Temps:          0       1       0       0       0       0       0
  4307 ;;      Totals:         0       4       0       0       0       0       0
  4308 ;;Total ram usage:        4 bytes
  4309 ;; Hardware stack levels used:    1
  4310 ;; Hardware stack levels required when called:    3
  4311 ;; This function calls:
  4312 ;;		Nothing
  4313 ;; This function is called by:
  4314 ;;		_InitUart
  4315 ;;		_uartSendByte
  4316 ;;		_uartSendBuf
  4317 ;;		_uartSendString
  4318 ;;		_uartSendString0
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322                           	psect	text20
  4323  001360                     __ptext20:
  4324                           	opt stack 0
  4325  001360                     _uartEnableSend:
  4326                           	opt stack 26
  4327                           
  4328                           ;uart.c: 141: switch (uart->number)
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;incstack = 0
  4332  001360  D01C               	goto	l4017
  4333  001362                     l4011:
  4334  001362  C062  F063         	movff	uartEnableSend@onoff,??_uartEnableSend
  4335  001366  0E01               	movlw	1
  4336  001368  0100               	movlb	0	; () banked
  4337  00136A  1763               	andwf	??_uartEnableSend& (0+255),f,b
  4338  00136C  0100               	movlb	0	; () banked
  4339  00136E  3B63               	swapf	??_uartEnableSend& (0+255),f,b
  4340  001370  509D               	movf	3997,w,c	;volatile
  4341  001372  0100               	movlb	0	; () banked
  4342  001374  1963               	xorwf	??_uartEnableSend& (0+255),w,b
  4343  001376  0BEF               	andlw	-17
  4344  001378  1963               	xorwf	??_uartEnableSend& (0+255),w,b
  4345  00137A  6E9D               	movwf	3997,c	;volatile
  4346  00137C  0012               	return	
  4347  00137E                     l4013:
  4348                           
  4349                           ; BSR set to: 0
  4350  00137E  C062  F063         	movff	uartEnableSend@onoff,??_uartEnableSend
  4351  001382  0E01               	movlw	1
  4352  001384  0100               	movlb	0	; () banked
  4353  001386  1763               	andwf	??_uartEnableSend& (0+255),f,b
  4354  001388  0100               	movlb	0	; () banked
  4355  00138A  3B63               	swapf	??_uartEnableSend& (0+255),f,b
  4356  00138C  50A3               	movf	4003,w,c	;volatile
  4357  00138E  0100               	movlb	0	; () banked
  4358  001390  1963               	xorwf	??_uartEnableSend& (0+255),w,b
  4359  001392  0BEF               	andlw	-17
  4360  001394  1963               	xorwf	??_uartEnableSend& (0+255),w,b
  4361  001396  6EA3               	movwf	4003,c	;volatile
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;uart.c: 145: }
  4365  001398  0012               	return	
  4366  00139A                     l4017:
  4367  00139A  0100               	movlb	0	; () banked
  4368  00139C  EE20 F013          	lfsr	2,19
  4369  0013A0  5160               	movf	uartEnableSend@uart& (0+255),w,b
  4370  0013A2  26D9               	addwf	fsr2l,f,c
  4371  0013A4  5161               	movf	(uartEnableSend@uart+1)& (0+255),w,b
  4372  0013A6  22DA               	addwfc	fsr2h,f,c
  4373  0013A8  50DF               	movf	indf2,w,c
  4374                           
  4375                           ; Switch size 1, requested type "space"
  4376                           ; Number of cases is 2, Range of values is 1 to 2
  4377                           ; switch strategies available:
  4378                           ; Name         Instructions Cycles
  4379                           ; simple_byte            7     4 (average)
  4380                           ;	Chosen strategy is simple_byte
  4381  0013AA  0A01               	xorlw	1	; case 1
  4382  0013AC  B4D8               	btfsc	status,2,c
  4383  0013AE  D7D9               	goto	l4011
  4384  0013B0  0A03               	xorlw	3	; case 2
  4385  0013B2  A4D8               	btfss	status,2,c
  4386  0013B4  0012               	return	
  4387  0013B6  D7E3               	goto	l4013
  4388  0013B8                     __end_of_uartEnableSend:
  4389                           	opt stack 0
  4390                           tblptru	equ	0xFF8
  4391                           prodh	equ	0xFF4
  4392                           prodl	equ	0xFF3
  4393                           postinc0	equ	0xFEE
  4394                           wreg	equ	0xFE8
  4395                           indf1	equ	0xFE7
  4396                           postinc1	equ	0xFE6
  4397                           postdec1	equ	0xFE5
  4398                           fsr1h	equ	0xFE2
  4399                           fsr1l	equ	0xFE1
  4400                           indf2	equ	0xFDF
  4401                           postinc2	equ	0xFDE
  4402                           postdec2	equ	0xFDD
  4403                           plusw2	equ	0xFDB
  4404                           fsr2h	equ	0xFDA
  4405                           fsr2l	equ	0xFD9
  4406                           status	equ	0xFD8
  4407                           
  4408 ;; *************** function _uartEnableRecv *****************
  4409 ;; Defined at:
  4410 ;;		line 148 in file "uart.c"
  4411 ;; Parameters:    Size  Location     Type
  4412 ;;  uart            2    0[BANK0 ] PTR struct .
  4413 ;;		 -> uart(26), 
  4414 ;;  onoff           1    2[BANK0 ] unsigned char 
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;		None
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      void 
  4419 ;; Registers used:
  4420 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4426 ;;      Params:         0       3       0       0       0       0       0
  4427 ;;      Locals:         0       0       0       0       0       0       0
  4428 ;;      Temps:          0       1       0       0       0       0       0
  4429 ;;      Totals:         0       4       0       0       0       0       0
  4430 ;;Total ram usage:        4 bytes
  4431 ;; Hardware stack levels used:    1
  4432 ;; Hardware stack levels required when called:    3
  4433 ;; This function calls:
  4434 ;;		Nothing
  4435 ;; This function is called by:
  4436 ;;		_InitUart
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           	psect	text21
  4441  001304                     __ptext21:
  4442                           	opt stack 0
  4443  001304                     _uartEnableRecv:
  4444                           	opt stack 26
  4445                           
  4446                           ;uart.c: 150: switch (uart->number)
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;incstack = 0
  4450  001304  D01E               	goto	l4027
  4451  001306                     l4021:
  4452  001306  C062  F063         	movff	uartEnableRecv@onoff,??_uartEnableRecv
  4453  00130A  0E01               	movlw	1
  4454  00130C  0100               	movlb	0	; () banked
  4455  00130E  1763               	andwf	??_uartEnableRecv& (0+255),f,b
  4456  001310  0100               	movlb	0	; () banked
  4457  001312  3B63               	swapf	??_uartEnableRecv& (0+255),f,b
  4458  001314  4763               	rlncf	??_uartEnableRecv& (0+255),f,b
  4459  001316  509D               	movf	3997,w,c	;volatile
  4460  001318  0100               	movlb	0	; () banked
  4461  00131A  1963               	xorwf	??_uartEnableRecv& (0+255),w,b
  4462  00131C  0BDF               	andlw	-33
  4463  00131E  1963               	xorwf	??_uartEnableRecv& (0+255),w,b
  4464  001320  6E9D               	movwf	3997,c	;volatile
  4465  001322  0012               	return	
  4466  001324                     l4023:
  4467                           
  4468                           ; BSR set to: 0
  4469  001324  C062  F063         	movff	uartEnableRecv@onoff,??_uartEnableRecv
  4470  001328  0E01               	movlw	1
  4471  00132A  0100               	movlb	0	; () banked
  4472  00132C  1763               	andwf	??_uartEnableRecv& (0+255),f,b
  4473  00132E  0100               	movlb	0	; () banked
  4474  001330  3B63               	swapf	??_uartEnableRecv& (0+255),f,b
  4475  001332  4763               	rlncf	??_uartEnableRecv& (0+255),f,b
  4476  001334  50A3               	movf	4003,w,c	;volatile
  4477  001336  0100               	movlb	0	; () banked
  4478  001338  1963               	xorwf	??_uartEnableRecv& (0+255),w,b
  4479  00133A  0BDF               	andlw	-33
  4480  00133C  1963               	xorwf	??_uartEnableRecv& (0+255),w,b
  4481  00133E  6EA3               	movwf	4003,c	;volatile
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;uart.c: 154: }
  4485  001340  0012               	return	
  4486  001342                     l4027:
  4487  001342  0100               	movlb	0	; () banked
  4488  001344  EE20 F013          	lfsr	2,19
  4489  001348  5160               	movf	uartEnableRecv@uart& (0+255),w,b
  4490  00134A  26D9               	addwf	fsr2l,f,c
  4491  00134C  5161               	movf	(uartEnableRecv@uart+1)& (0+255),w,b
  4492  00134E  22DA               	addwfc	fsr2h,f,c
  4493  001350  50DF               	movf	indf2,w,c
  4494                           
  4495                           ; Switch size 1, requested type "space"
  4496                           ; Number of cases is 2, Range of values is 1 to 2
  4497                           ; switch strategies available:
  4498                           ; Name         Instructions Cycles
  4499                           ; simple_byte            7     4 (average)
  4500                           ;	Chosen strategy is simple_byte
  4501  001352  0A01               	xorlw	1	; case 1
  4502  001354  B4D8               	btfsc	status,2,c
  4503  001356  D7D7               	goto	l4021
  4504  001358  0A03               	xorlw	3	; case 2
  4505  00135A  A4D8               	btfss	status,2,c
  4506  00135C  0012               	return	
  4507  00135E  D7E2               	goto	l4023
  4508  001360                     __end_of_uartEnableRecv:
  4509                           	opt stack 0
  4510                           tblptru	equ	0xFF8
  4511                           prodh	equ	0xFF4
  4512                           prodl	equ	0xFF3
  4513                           postinc0	equ	0xFEE
  4514                           wreg	equ	0xFE8
  4515                           indf1	equ	0xFE7
  4516                           postinc1	equ	0xFE6
  4517                           postdec1	equ	0xFE5
  4518                           fsr1h	equ	0xFE2
  4519                           fsr1l	equ	0xFE1
  4520                           indf2	equ	0xFDF
  4521                           postinc2	equ	0xFDE
  4522                           postdec2	equ	0xFDD
  4523                           plusw2	equ	0xFDB
  4524                           fsr2h	equ	0xFDA
  4525                           fsr2l	equ	0xFD9
  4526                           status	equ	0xFD8
  4527                           
  4528 ;; *************** function _InitSystem *****************
  4529 ;; Defined at:
  4530 ;;		line 109 in file "main.c"
  4531 ;; Parameters:    Size  Location     Type
  4532 ;;		None
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;		None
  4535 ;; Return value:  Size  Location     Type
  4536 ;;                  1    wreg      void 
  4537 ;; Registers used:
  4538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4539 ;; Tracked objects:
  4540 ;;		On entry : 0/0
  4541 ;;		On exit  : 0/0
  4542 ;;		Unchanged: 0/0
  4543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4544 ;;      Params:         0       0       0       0       0       0       0
  4545 ;;      Locals:         0       0       0       0       0       0       0
  4546 ;;      Temps:          0       0       0       0       0       0       0
  4547 ;;      Totals:         0       0       0       0       0       0       0
  4548 ;;Total ram usage:        0 bytes
  4549 ;; Hardware stack levels used:    1
  4550 ;; Hardware stack levels required when called:    5
  4551 ;; This function calls:
  4552 ;;		_LoadConfigData
  4553 ;;		_SetupInternalOscillator
  4554 ;;		_ledInit
  4555 ;; This function is called by:
  4556 ;;		_main
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           	psect	text22
  4561  000FCA                     __ptext22:
  4562                           	opt stack 0
  4563  000FCA                     _InitSystem:
  4564                           	opt stack 25
  4565                           
  4566                           ;main.c: 112: SetupInternalOscillator((0b00111),(0b1));
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;incstack = 0
  4570  000FCA  0E01               	movlw	1
  4571  000FCC  0100               	movlb	0	; () banked
  4572  000FCE  6F60               	movwf	SetupInternalOscillator@enpll& (0+255),b
  4573  000FD0  0E07               	movlw	7
  4574  000FD2  ECD5  F008         	call	_SetupInternalOscillator
  4575                           
  4576                           ;main.c: 115: LoadConfigData();
  4577  000FD6  EC22  F00B         	call	_LoadConfigData	;wreg free
  4578                           
  4579                           ;main.c: 118: INTCON=0;
  4580  000FDA  0E00               	movlw	0
  4581  000FDC  6EF2               	movwf	intcon,c	;volatile
  4582                           
  4583                           ;main.c: 119: INTCON3=0;
  4584  000FDE  0E00               	movlw	0
  4585  000FE0  6EF0               	movwf	intcon3,c	;volatile
  4586                           
  4587                           ;main.c: 120: PIE1=0;
  4588  000FE2  0E00               	movlw	0
  4589  000FE4  6E9D               	movwf	3997,c	;volatile
  4590                           
  4591                           ;main.c: 121: PIE2=0;
  4592  000FE6  0E00               	movlw	0
  4593  000FE8  6EA0               	movwf	4000,c	;volatile
  4594                           
  4595                           ;main.c: 122: PIE3=0;
  4596  000FEA  0E00               	movlw	0
  4597  000FEC  6EA3               	movwf	4003,c	;volatile
  4598                           
  4599                           ;main.c: 123: PIE4=0;
  4600  000FEE  0E00               	movlw	0
  4601  000FF0  6E7A               	movwf	3962,c	;volatile
  4602                           
  4603                           ;main.c: 124: PIE5=0;
  4604  000FF2  0E00               	movlw	0
  4605  000FF4  6E7D               	movwf	3965,c	;volatile
  4606                           
  4607                           ;main.c: 126: RCONbits.IPEN = 0;
  4608  000FF6  9ED0               	bcf	4048,7,c	;volatile
  4609                           
  4610                           ;main.c: 127: INTCONbits.PEIE = 1;
  4611  000FF8  8CF2               	bsf	intcon,6,c	;volatile
  4612                           
  4613                           ;main.c: 128: INTCONbits.GIE = 1;
  4614  000FFA  8EF2               	bsf	intcon,7,c	;volatile
  4615                           
  4616                           ;main.c: 129: INTCONbits.RBIE = 1;
  4617  000FFC  86F2               	bsf	intcon,3,c	;volatile
  4618                           
  4619                           ;main.c: 130: IOCB4=1;
  4620  000FFE  8862               	bsf	3938,4,c	;volatile
  4621                           
  4622                           ;main.c: 133: TRISAbits.RA0=0;
  4623  001000  9092               	bcf	3986,0,c	;volatile
  4624                           
  4625                           ;main.c: 134: TRISAbits.RA1=0;
  4626  001002  9292               	bcf	3986,1,c	;volatile
  4627                           
  4628                           ;main.c: 135: TRISAbits.RA2=0;
  4629  001004  9492               	bcf	3986,2,c	;volatile
  4630                           
  4631                           ;main.c: 136: TRISAbits.RA3=0;
  4632  001006  9692               	bcf	3986,3,c	;volatile
  4633                           
  4634                           ;main.c: 137: TRISAbits.RA4=0;
  4635  001008  9892               	bcf	3986,4,c	;volatile
  4636                           
  4637                           ;main.c: 138: TRISAbits.RA5=0;
  4638  00100A  9A92               	bcf	3986,5,c	;volatile
  4639                           
  4640                           ;main.c: 139: ANSELAbits.ANSA0=0;
  4641  00100C  010F               	movlb	15	; () banked
  4642  00100E  9138               	bcf	56,0,b	;volatile
  4643                           
  4644                           ; BSR set to: 15
  4645                           ;main.c: 140: ANSELAbits.ANSA1=0;
  4646  001010  010F               	movlb	15	; () banked
  4647  001012  9338               	bcf	56,1,b	;volatile
  4648                           
  4649                           ; BSR set to: 15
  4650                           ;main.c: 141: ANSELAbits.ANSA2=0;
  4651  001014  010F               	movlb	15	; () banked
  4652  001016  9538               	bcf	56,2,b	;volatile
  4653                           
  4654                           ; BSR set to: 15
  4655                           ;main.c: 142: ANSELAbits.ANSA3=0;
  4656  001018  010F               	movlb	15	; () banked
  4657  00101A  9738               	bcf	56,3,b	;volatile
  4658                           
  4659                           ; BSR set to: 15
  4660                           ;main.c: 143: ANSELAbits.ANSA5=0;
  4661  00101C  010F               	movlb	15	; () banked
  4662  00101E  9B38               	bcf	56,5,b	;volatile
  4663                           
  4664                           ; BSR set to: 15
  4665                           ;main.c: 145: TRISBbits.RB2=0;
  4666  001020  9493               	bcf	3987,2,c	;volatile
  4667                           
  4668                           ; BSR set to: 15
  4669                           ;main.c: 146: TRISBbits.RB3=1;
  4670  001022  8693               	bsf	3987,3,c	;volatile
  4671                           
  4672                           ; BSR set to: 15
  4673                           ;main.c: 147: TRISBbits.RB4=1;
  4674  001024  8893               	bsf	3987,4,c	;volatile
  4675                           
  4676                           ; BSR set to: 15
  4677                           ;main.c: 150: ledInit(&(ledRx),(5),(5),0b00000001);
  4678  001026  0E34               	movlw	low _ledRx
  4679  001028  0100               	movlb	0	; () banked
  4680  00102A  6F60               	movwf	ledInit@led& (0+255),b
  4681  00102C  0E00               	movlw	high _ledRx
  4682  00102E  0100               	movlb	0	; () banked
  4683  001030  6F61               	movwf	(ledInit@led+1)& (0+255),b
  4684  001032  0E00               	movlw	0
  4685  001034  0100               	movlb	0	; () banked
  4686  001036  6F63               	movwf	(ledInit@on+1)& (0+255),b
  4687  001038  0E05               	movlw	5
  4688  00103A  6F62               	movwf	ledInit@on& (0+255),b
  4689  00103C  0E00               	movlw	0
  4690  00103E  0100               	movlb	0	; () banked
  4691  001040  6F65               	movwf	(ledInit@off+1)& (0+255),b
  4692  001042  0E05               	movlw	5
  4693  001044  6F64               	movwf	ledInit@off& (0+255),b
  4694  001046  0E01               	movlw	1
  4695  001048  0100               	movlb	0	; () banked
  4696  00104A  6F66               	movwf	ledInit@bm& (0+255),b
  4697  00104C  EC51  F009         	call	_ledInit	;wreg free
  4698                           
  4699                           ;main.c: 151: ledInit(&(ledTx),(5),(5),0b00000010);
  4700  001050  0E2B               	movlw	low _ledTx
  4701  001052  0100               	movlb	0	; () banked
  4702  001054  6F60               	movwf	ledInit@led& (0+255),b
  4703  001056  0E00               	movlw	high _ledTx
  4704  001058  0100               	movlb	0	; () banked
  4705  00105A  6F61               	movwf	(ledInit@led+1)& (0+255),b
  4706  00105C  0E00               	movlw	0
  4707  00105E  0100               	movlb	0	; () banked
  4708  001060  6F63               	movwf	(ledInit@on+1)& (0+255),b
  4709  001062  0E05               	movlw	5
  4710  001064  6F62               	movwf	ledInit@on& (0+255),b
  4711  001066  0E00               	movlw	0
  4712  001068  0100               	movlb	0	; () banked
  4713  00106A  6F65               	movwf	(ledInit@off+1)& (0+255),b
  4714  00106C  0E05               	movlw	5
  4715  00106E  6F64               	movwf	ledInit@off& (0+255),b
  4716  001070  0E02               	movlw	2
  4717  001072  0100               	movlb	0	; () banked
  4718  001074  6F66               	movwf	ledInit@bm& (0+255),b
  4719  001076  EC51  F009         	call	_ledInit	;wreg free
  4720  00107A  0012               	return		;funcret
  4721  00107C                     __end_of_InitSystem:
  4722                           	opt stack 0
  4723                           tblptru	equ	0xFF8
  4724                           prodh	equ	0xFF4
  4725                           prodl	equ	0xFF3
  4726                           intcon	equ	0xFF2
  4727                           intcon3	equ	0xFF0
  4728                           postinc0	equ	0xFEE
  4729                           wreg	equ	0xFE8
  4730                           indf1	equ	0xFE7
  4731                           postinc1	equ	0xFE6
  4732                           postdec1	equ	0xFE5
  4733                           fsr1h	equ	0xFE2
  4734                           fsr1l	equ	0xFE1
  4735                           indf2	equ	0xFDF
  4736                           postinc2	equ	0xFDE
  4737                           postdec2	equ	0xFDD
  4738                           plusw2	equ	0xFDB
  4739                           fsr2h	equ	0xFDA
  4740                           fsr2l	equ	0xFD9
  4741                           status	equ	0xFD8
  4742                           
  4743 ;; *************** function _ledInit *****************
  4744 ;; Defined at:
  4745 ;;		line 12 in file "blink.c"
  4746 ;; Parameters:    Size  Location     Type
  4747 ;;  led             2    0[BANK0 ] PTR struct .
  4748 ;;		 -> ledTx(9), ledRx(9), 
  4749 ;;  on              2    2[BANK0 ] int 
  4750 ;;  off             2    4[BANK0 ] int 
  4751 ;;  bm              1    6[BANK0 ] unsigned char 
  4752 ;; Auto vars:     Size  Location     Type
  4753 ;;		None
  4754 ;; Return value:  Size  Location     Type
  4755 ;;                  1    wreg      void 
  4756 ;; Registers used:
  4757 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4758 ;; Tracked objects:
  4759 ;;		On entry : 0/0
  4760 ;;		On exit  : 0/0
  4761 ;;		Unchanged: 0/0
  4762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4763 ;;      Params:         0       7       0       0       0       0       0
  4764 ;;      Locals:         0       0       0       0       0       0       0
  4765 ;;      Temps:          0       0       0       0       0       0       0
  4766 ;;      Totals:         0       7       0       0       0       0       0
  4767 ;;Total ram usage:        7 bytes
  4768 ;; Hardware stack levels used:    1
  4769 ;; Hardware stack levels required when called:    3
  4770 ;; This function calls:
  4771 ;;		Nothing
  4772 ;; This function is called by:
  4773 ;;		_InitSystem
  4774 ;; This function uses a non-reentrant model
  4775 ;;
  4776                           
  4777                           	psect	text23
  4778  0012A2                     __ptext23:
  4779                           	opt stack 0
  4780  0012A2                     _ledInit:
  4781                           	opt stack 26
  4782                           
  4783                           ;blink.c: 14: led->onTime=on;
  4784                           
  4785                           ;incstack = 0
  4786  0012A2  0100               	movlb	0	; () banked
  4787  0012A4  EE20 F003          	lfsr	2,3
  4788  0012A8  5160               	movf	ledInit@led& (0+255),w,b
  4789  0012AA  26D9               	addwf	fsr2l,f,c
  4790  0012AC  5161               	movf	(ledInit@led+1)& (0+255),w,b
  4791  0012AE  22DA               	addwfc	fsr2h,f,c
  4792  0012B0  C062  FFDE         	movff	ledInit@on,postinc2
  4793  0012B4  C063  FFDD         	movff	ledInit@on+1,postdec2
  4794                           
  4795                           ;blink.c: 15: led->offTime=off;
  4796  0012B8  0100               	movlb	0	; () banked
  4797  0012BA  EE20 F005          	lfsr	2,5
  4798  0012BE  5160               	movf	ledInit@led& (0+255),w,b
  4799  0012C0  26D9               	addwf	fsr2l,f,c
  4800  0012C2  5161               	movf	(ledInit@led+1)& (0+255),w,b
  4801  0012C4  22DA               	addwfc	fsr2h,f,c
  4802  0012C6  C064  FFDE         	movff	ledInit@off,postinc2
  4803  0012CA  C065  FFDD         	movff	ledInit@off+1,postdec2
  4804                           
  4805                           ;blink.c: 16: led->bitMask=bm;
  4806  0012CE  0100               	movlb	0	; () banked
  4807  0012D0  EE20 F007          	lfsr	2,7
  4808  0012D4  5160               	movf	ledInit@led& (0+255),w,b
  4809  0012D6  26D9               	addwf	fsr2l,f,c
  4810  0012D8  5161               	movf	(ledInit@led+1)& (0+255),w,b
  4811  0012DA  22DA               	addwfc	fsr2h,f,c
  4812  0012DC  C066  FFDF         	movff	ledInit@bm,indf2
  4813                           
  4814                           ;blink.c: 17: led->on=0;
  4815  0012E0  0100               	movlb	0	; () banked
  4816  0012E2  EE20 F002          	lfsr	2,2
  4817  0012E6  5160               	movf	ledInit@led& (0+255),w,b
  4818  0012E8  26D9               	addwf	fsr2l,f,c
  4819  0012EA  5161               	movf	(ledInit@led+1)& (0+255),w,b
  4820  0012EC  22DA               	addwfc	fsr2h,f,c
  4821  0012EE  0E00               	movlw	0
  4822  0012F0  6EDF               	movwf	indf2,c
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;blink.c: 18: led->count=0;
  4826  0012F2  C060  FFD9         	movff	ledInit@led,fsr2l
  4827  0012F6  C061  FFDA         	movff	ledInit@led+1,fsr2h
  4828  0012FA  0E00               	movlw	0
  4829  0012FC  6EDE               	movwf	postinc2,c
  4830  0012FE  0E00               	movlw	0
  4831  001300  6EDD               	movwf	postdec2,c
  4832                           
  4833                           ; BSR set to: 0
  4834  001302  0012               	return		;funcret
  4835  001304                     __end_of_ledInit:
  4836                           	opt stack 0
  4837                           tblptru	equ	0xFF8
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           intcon	equ	0xFF2
  4841                           intcon3	equ	0xFF0
  4842                           postinc0	equ	0xFEE
  4843                           wreg	equ	0xFE8
  4844                           indf1	equ	0xFE7
  4845                           postinc1	equ	0xFE6
  4846                           postdec1	equ	0xFE5
  4847                           fsr1h	equ	0xFE2
  4848                           fsr1l	equ	0xFE1
  4849                           indf2	equ	0xFDF
  4850                           postinc2	equ	0xFDE
  4851                           postdec2	equ	0xFDD
  4852                           plusw2	equ	0xFDB
  4853                           fsr2h	equ	0xFDA
  4854                           fsr2l	equ	0xFD9
  4855                           status	equ	0xFD8
  4856                           
  4857 ;; *************** function _SetupInternalOscillator *****************
  4858 ;; Defined at:
  4859 ;;		line 6 in file "intosc.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;  setBits         1    wreg     unsigned char 
  4862 ;;  enpll           1    0[BANK0 ] unsigned char 
  4863 ;; Auto vars:     Size  Location     Type
  4864 ;;  setBits         1    2[BANK0 ] unsigned char 
  4865 ;; Return value:  Size  Location     Type
  4866 ;;                  1    wreg      void 
  4867 ;; Registers used:
  4868 ;;		wreg, status,2, status,0
  4869 ;; Tracked objects:
  4870 ;;		On entry : 0/0
  4871 ;;		On exit  : 0/0
  4872 ;;		Unchanged: 0/0
  4873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4874 ;;      Params:         0       1       0       0       0       0       0
  4875 ;;      Locals:         0       1       0       0       0       0       0
  4876 ;;      Temps:          0       1       0       0       0       0       0
  4877 ;;      Totals:         0       3       0       0       0       0       0
  4878 ;;Total ram usage:        3 bytes
  4879 ;; Hardware stack levels used:    1
  4880 ;; Hardware stack levels required when called:    3
  4881 ;; This function calls:
  4882 ;;		Nothing
  4883 ;; This function is called by:
  4884 ;;		_InitSystem
  4885 ;; This function uses a non-reentrant model
  4886 ;;
  4887                           
  4888                           	psect	text24
  4889  0011AA                     __ptext24:
  4890                           	opt stack 0
  4891  0011AA                     _SetupInternalOscillator:
  4892                           	opt stack 26
  4893                           
  4894                           ; BSR set to: 0
  4895                           ;incstack = 0
  4896                           ;SetupInternalOscillator@setBits stored from wreg
  4897  0011AA  0100               	movlb	0	; () banked
  4898  0011AC  6F62               	movwf	SetupInternalOscillator@setBits& (0+255),b
  4899                           
  4900                           ;intosc.c: 8: OSCCONbits.IRCF = setBits & 7;
  4901  0011AE  C062  F061         	movff	SetupInternalOscillator@setBits,??_SetupInternalOscillator
  4902  0011B2  0E07               	movlw	7
  4903  0011B4  0100               	movlb	0	; () banked
  4904  0011B6  1761               	andwf	??_SetupInternalOscillator& (0+255),f,b
  4905  0011B8  0100               	movlb	0	; () banked
  4906  0011BA  3B61               	swapf	??_SetupInternalOscillator& (0+255),f,b
  4907  0011BC  50D3               	movf	4051,w,c	;volatile
  4908  0011BE  0100               	movlb	0	; () banked
  4909  0011C0  1961               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  4910  0011C2  0B8F               	andlw	-113
  4911  0011C4  1961               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  4912  0011C6  6ED3               	movwf	4051,c	;volatile
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;intosc.c: 9: OSCCONbits.SCS = 0b00;
  4916  0011C8  0EFC               	movlw	-4
  4917  0011CA  16D3               	andwf	4051,f,c	;volatile
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;intosc.c: 10: OSCTUNEbits.PLLEN = enpll;
  4921  0011CC  0100               	movlb	0	; () banked
  4922  0011CE  B160               	btfsc	SetupInternalOscillator@enpll& (0+255),0,b
  4923  0011D0  D002               	bra	u1835
  4924  0011D2  9C9B               	bcf	3995,6,c	;volatile
  4925  0011D4  D001               	bra	u1836
  4926  0011D6                     u1835:
  4927  0011D6  8C9B               	bsf	3995,6,c	;volatile
  4928  0011D8                     u1836:
  4929                           
  4930                           ;intosc.c: 12: OSCCON2bits.MFIOSEL = (setBits & 8) >> 3;
  4931  0011D8  C062  F061         	movff	SetupInternalOscillator@setBits,??_SetupInternalOscillator
  4932  0011DC  0100               	movlb	0	; () banked
  4933  0011DE  90D8               	bcf	status,0,c
  4934  0011E0  3361               	rrcf	??_SetupInternalOscillator& (0+255),f,b
  4935  0011E2  0100               	movlb	0	; () banked
  4936  0011E4  90D8               	bcf	status,0,c
  4937  0011E6  3361               	rrcf	??_SetupInternalOscillator& (0+255),f,b
  4938  0011E8  0100               	movlb	0	; () banked
  4939  0011EA  90D8               	bcf	status,0,c
  4940  0011EC  3361               	rrcf	??_SetupInternalOscillator& (0+255),f,b
  4941  0011EE  0E01               	movlw	1
  4942  0011F0  0100               	movlb	0	; () banked
  4943  0011F2  1761               	andwf	??_SetupInternalOscillator& (0+255),f,b
  4944  0011F4  0100               	movlb	0	; () banked
  4945  0011F6  3B61               	swapf	??_SetupInternalOscillator& (0+255),f,b
  4946  0011F8  50D2               	movf	4050,w,c	;volatile
  4947  0011FA  0100               	movlb	0	; () banked
  4948  0011FC  1961               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  4949  0011FE  0BEF               	andlw	-17
  4950  001200  1961               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  4951  001202  6ED2               	movwf	4050,c	;volatile
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;intosc.c: 13: OSCTUNEbits.INTSRC = (setBits & 16) >> 4;
  4955  001204  C062  F061         	movff	SetupInternalOscillator@setBits,??_SetupInternalOscillator
  4956  001208  0100               	movlb	0	; () banked
  4957  00120A  3B61               	swapf	??_SetupInternalOscillator& (0+255),f,b
  4958  00120C  0E0F               	movlw	15
  4959  00120E  1761               	andwf	??_SetupInternalOscillator& (0+255),f,b
  4960  001210  0E01               	movlw	1
  4961  001212  0100               	movlb	0	; () banked
  4962  001214  1761               	andwf	??_SetupInternalOscillator& (0+255),f,b
  4963  001216  0100               	movlb	0	; () banked
  4964  001218  3361               	rrcf	??_SetupInternalOscillator& (0+255),f,b
  4965  00121A  3361               	rrcf	??_SetupInternalOscillator& (0+255),f,b
  4966  00121C  509B               	movf	3995,w,c	;volatile
  4967  00121E  0100               	movlb	0	; () banked
  4968  001220  1961               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  4969  001222  0B7F               	andlw	-129
  4970  001224  1961               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  4971  001226  6E9B               	movwf	3995,c	;volatile
  4972                           
  4973                           ; BSR set to: 0
  4974  001228  0012               	return		;funcret
  4975  00122A                     __end_of_SetupInternalOscillator:
  4976                           	opt stack 0
  4977                           tblptru	equ	0xFF8
  4978                           prodh	equ	0xFF4
  4979                           prodl	equ	0xFF3
  4980                           intcon	equ	0xFF2
  4981                           intcon3	equ	0xFF0
  4982                           postinc0	equ	0xFEE
  4983                           wreg	equ	0xFE8
  4984                           indf1	equ	0xFE7
  4985                           postinc1	equ	0xFE6
  4986                           postdec1	equ	0xFE5
  4987                           fsr1h	equ	0xFE2
  4988                           fsr1l	equ	0xFE1
  4989                           indf2	equ	0xFDF
  4990                           postinc2	equ	0xFDE
  4991                           postdec2	equ	0xFDD
  4992                           plusw2	equ	0xFDB
  4993                           fsr2h	equ	0xFDA
  4994                           fsr2l	equ	0xFD9
  4995                           status	equ	0xFD8
  4996                           
  4997 ;; *************** function _LoadConfigData *****************
  4998 ;; Defined at:
  4999 ;;		line 99 in file "main.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;		None
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;		None
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  1    wreg      void 
  5006 ;; Registers used:
  5007 ;;		wreg, status,2, cstack
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5013 ;;      Params:         0       0       0       0       0       0       0
  5014 ;;      Locals:         0       0       0       0       0       0       0
  5015 ;;      Temps:          0       0       0       0       0       0       0
  5016 ;;      Totals:         0       0       0       0       0       0       0
  5017 ;;Total ram usage:        0 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    4
  5020 ;; This function calls:
  5021 ;;		_EERead
  5022 ;; This function is called by:
  5023 ;;		_InitSystem
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           	psect	text25
  5028  001644                     __ptext25:
  5029                           	opt stack 0
  5030  001644                     _LoadConfigData:
  5031                           	opt stack 25
  5032                           
  5033                           ;main.c: 101: adr=EERead((0));
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;incstack = 0
  5037  001644  0E00               	movlw	0
  5038  001646  ECEA  F00A         	call	_EERead
  5039  00164A  0100               	movlb	0	; () banked
  5040  00164C  6FB8               	movwf	_adr& (0+255),b
  5041                           
  5042                           ; BSR set to: 0
  5043  00164E  0012               	return		;funcret
  5044  001650                     __end_of_LoadConfigData:
  5045                           	opt stack 0
  5046                           tblptru	equ	0xFF8
  5047                           prodh	equ	0xFF4
  5048                           prodl	equ	0xFF3
  5049                           intcon	equ	0xFF2
  5050                           intcon3	equ	0xFF0
  5051                           postinc0	equ	0xFEE
  5052                           wreg	equ	0xFE8
  5053                           indf1	equ	0xFE7
  5054                           postinc1	equ	0xFE6
  5055                           postdec1	equ	0xFE5
  5056                           fsr1h	equ	0xFE2
  5057                           fsr1l	equ	0xFE1
  5058                           indf2	equ	0xFDF
  5059                           postinc2	equ	0xFDE
  5060                           postdec2	equ	0xFDD
  5061                           plusw2	equ	0xFDB
  5062                           fsr2h	equ	0xFDA
  5063                           fsr2l	equ	0xFD9
  5064                           status	equ	0xFD8
  5065                           
  5066 ;; *************** function _EERead *****************
  5067 ;; Defined at:
  5068 ;;		line 40 in file "eeprom.c"
  5069 ;; Parameters:    Size  Location     Type
  5070 ;;  adresse         1    wreg     unsigned char 
  5071 ;; Auto vars:     Size  Location     Type
  5072 ;;  adresse         1    0[BANK0 ] unsigned char 
  5073 ;;  orgGIE          1    1[BANK0 ] unsigned char 
  5074 ;;  data            1    0        unsigned char 
  5075 ;; Return value:  Size  Location     Type
  5076 ;;                  1    wreg      unsigned char 
  5077 ;; Registers used:
  5078 ;;		wreg, status,2
  5079 ;; Tracked objects:
  5080 ;;		On entry : 0/0
  5081 ;;		On exit  : 0/0
  5082 ;;		Unchanged: 0/0
  5083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5084 ;;      Params:         0       0       0       0       0       0       0
  5085 ;;      Locals:         0       2       0       0       0       0       0
  5086 ;;      Temps:          0       0       0       0       0       0       0
  5087 ;;      Totals:         0       2       0       0       0       0       0
  5088 ;;Total ram usage:        2 bytes
  5089 ;; Hardware stack levels used:    1
  5090 ;; Hardware stack levels required when called:    3
  5091 ;; This function calls:
  5092 ;;		Nothing
  5093 ;; This function is called by:
  5094 ;;		_LoadConfigData
  5095 ;;		_EEReadInt
  5096 ;;		_EEReadLong
  5097 ;; This function uses a non-reentrant model
  5098 ;;
  5099                           
  5100                           	psect	text26
  5101  0015D4                     __ptext26:
  5102                           	opt stack 0
  5103  0015D4                     _EERead:
  5104                           	opt stack 25
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;incstack = 0
  5108                           ;EERead@adresse stored from wreg
  5109  0015D4  0100               	movlb	0	; () banked
  5110  0015D6  6F60               	movwf	EERead@adresse& (0+255),b
  5111                           
  5112                           ;eeprom.c: 42: char orgGIE;
  5113                           ;eeprom.c: 43: char data;
  5114                           ;eeprom.c: 44: orgGIE=INTCONbits.GIE;
  5115  0015D8  0E00               	movlw	0
  5116  0015DA  BEF2               	btfsc	intcon,7,c	;volatile
  5117  0015DC  0E01               	movlw	1
  5118  0015DE  0100               	movlb	0	; () banked
  5119  0015E0  6F61               	movwf	EERead@orgGIE& (0+255),b
  5120                           
  5121                           ;eeprom.c: 46: INTCONbits.GIE=0;
  5122  0015E2  9EF2               	bcf	intcon,7,c	;volatile
  5123                           
  5124                           ;eeprom.c: 47: EECON1bits.CFGS=0;
  5125  0015E4  9CA6               	bcf	4006,6,c	;volatile
  5126                           
  5127                           ;eeprom.c: 48: EECON1bits.EEPGD=0;
  5128  0015E6  9EA6               	bcf	4006,7,c	;volatile
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;eeprom.c: 49: EEADR=adresse;
  5132  0015E8  C060  FFA9         	movff	EERead@adresse,4009	;volatile
  5133                           
  5134                           ; BSR set to: 0
  5135                           ;eeprom.c: 50: EECON1bits.RD=1;
  5136  0015EC  80A6               	bsf	4006,0,c	;volatile
  5137                           
  5138                           ; BSR set to: 0
  5139                           ;eeprom.c: 51: INTCONbits.GIE=orgGIE;
  5140  0015EE  0100               	movlb	0	; () banked
  5141  0015F0  B161               	btfsc	EERead@orgGIE& (0+255),0,b
  5142  0015F2  D002               	bra	u1745
  5143  0015F4  9EF2               	bcf	intcon,7,c	;volatile
  5144  0015F6  D001               	bra	u1746
  5145  0015F8                     u1745:
  5146  0015F8  8EF2               	bsf	intcon,7,c	;volatile
  5147  0015FA                     u1746:
  5148                           
  5149                           ;eeprom.c: 53: return EEDATA;
  5150  0015FA  50A8               	movf	4008,w,c	;volatile
  5151  0015FC  0012               	return	
  5152  0015FE                     __end_of_EERead:
  5153                           	opt stack 0
  5154                           tblptru	equ	0xFF8
  5155                           prodh	equ	0xFF4
  5156                           prodl	equ	0xFF3
  5157                           intcon	equ	0xFF2
  5158                           intcon3	equ	0xFF0
  5159                           postinc0	equ	0xFEE
  5160                           wreg	equ	0xFE8
  5161                           indf1	equ	0xFE7
  5162                           postinc1	equ	0xFE6
  5163                           postdec1	equ	0xFE5
  5164                           fsr1h	equ	0xFE2
  5165                           fsr1l	equ	0xFE1
  5166                           indf2	equ	0xFDF
  5167                           postinc2	equ	0xFDE
  5168                           postdec2	equ	0xFDD
  5169                           plusw2	equ	0xFDB
  5170                           fsr2h	equ	0xFDA
  5171                           fsr2l	equ	0xFD9
  5172                           status	equ	0xFD8
  5173                           
  5174 ;; *************** function _IntHighRoutine *****************
  5175 ;; Defined at:
  5176 ;;		line 255 in file "main.c"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;		None
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;		None
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  1    wreg      void 
  5183 ;; Registers used:
  5184 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5185 ;; Tracked objects:
  5186 ;;		On entry : 0/0
  5187 ;;		On exit  : 0/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5190 ;;      Params:         0       0       0       0       0       0       0
  5191 ;;      Locals:         0       0       0       0       0       0       0
  5192 ;;      Temps:         14       0       0       0       0       0       0
  5193 ;;      Totals:        14       0       0       0       0       0       0
  5194 ;;Total ram usage:       14 bytes
  5195 ;; Hardware stack levels used:    1
  5196 ;; Hardware stack levels required when called:    2
  5197 ;; This function calls:
  5198 ;;		_spiInterruptHandler
  5199 ;;		_uartInterruptHandler
  5200 ;; This function is called by:
  5201 ;;		Interrupt level 2
  5202 ;; This function uses a non-reentrant model
  5203 ;;
  5204                           
  5205                           	psect	intcode
  5206  000008                     __pintcode:
  5207                           	opt stack 0
  5208  000008                     _IntHighRoutine:
  5209                           	opt stack 24
  5210                           
  5211                           ;incstack = 0
  5212  000008  823D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5213  00000A  CFFA F018          	movff	pclath,??_IntHighRoutine
  5214  00000E  CFFB F019          	movff	pclatu,??_IntHighRoutine+1
  5215  000012  CFE9 F01A          	movff	fsr0l,??_IntHighRoutine+2
  5216  000016  CFEA F01B          	movff	fsr0h,??_IntHighRoutine+3
  5217  00001A  CFE1 F01C          	movff	fsr1l,??_IntHighRoutine+4
  5218  00001E  CFE2 F01D          	movff	fsr1h,??_IntHighRoutine+5
  5219  000022  CFD9 F01E          	movff	fsr2l,??_IntHighRoutine+6
  5220  000026  CFDA F01F          	movff	fsr2h,??_IntHighRoutine+7
  5221  00002A  CFF3 F020          	movff	prodl,??_IntHighRoutine+8
  5222  00002E  CFF4 F021          	movff	prodh,??_IntHighRoutine+9
  5223  000032  CFF6 F022          	movff	tblptrl,??_IntHighRoutine+10
  5224  000036  CFF7 F023          	movff	tblptrh,??_IntHighRoutine+11
  5225  00003A  CFF8 F024          	movff	tblptru,??_IntHighRoutine+12
  5226  00003E  CFF5 F025          	movff	tablat,??_IntHighRoutine+13
  5227                           
  5228                           ;main.c: 257: INTCONbits.GIE=0;
  5229  000042  9EF2               	bcf	intcon,7,c	;volatile
  5230                           
  5231                           ;main.c: 259: uartInterruptHandler(&(uart));
  5232  000044  0E9E               	movlw	low _uart
  5233  000046  6E08               	movwf	uartInterruptHandler@uart,c
  5234  000048  0E00               	movlw	high _uart
  5235  00004A  6E09               	movwf	uartInterruptHandler@uart+1,c
  5236  00004C  EC42  F002         	call	_uartInterruptHandler	;wreg free
  5237                           
  5238                           ;main.c: 260: spiInterruptHandler();
  5239  000050  EC82  F007         	call	_spiInterruptHandler	;wreg free
  5240                           
  5241                           ;main.c: 261: INTCONbits.GIE=1;
  5242  000054  8EF2               	bsf	intcon,7,c	;volatile
  5243  000056  C025  FFF5         	movff	??_IntHighRoutine+13,tablat
  5244  00005A  C024  FFF8         	movff	??_IntHighRoutine+12,tblptru
  5245  00005E  C023  FFF7         	movff	??_IntHighRoutine+11,tblptrh
  5246  000062  C022  FFF6         	movff	??_IntHighRoutine+10,tblptrl
  5247  000066  C021  FFF4         	movff	??_IntHighRoutine+9,prodh
  5248  00006A  C020  FFF3         	movff	??_IntHighRoutine+8,prodl
  5249  00006E  C01F  FFDA         	movff	??_IntHighRoutine+7,fsr2h
  5250  000072  C01E  FFD9         	movff	??_IntHighRoutine+6,fsr2l
  5251  000076  C01D  FFE2         	movff	??_IntHighRoutine+5,fsr1h
  5252  00007A  C01C  FFE1         	movff	??_IntHighRoutine+4,fsr1l
  5253  00007E  C01B  FFEA         	movff	??_IntHighRoutine+3,fsr0h
  5254  000082  C01A  FFE9         	movff	??_IntHighRoutine+2,fsr0l
  5255  000086  C019  FFFB         	movff	??_IntHighRoutine+1,pclatu
  5256  00008A  C018  FFFA         	movff	??_IntHighRoutine,pclath
  5257  00008E  923D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5258  000090  0011               	retfie		f
  5259  000092                     __end_of_IntHighRoutine:
  5260                           	opt stack 0
  5261                           pclatu	equ	0xFFB
  5262                           pclath	equ	0xFFA
  5263                           tblptru	equ	0xFF8
  5264                           tblptrh	equ	0xFF7
  5265                           tblptrl	equ	0xFF6
  5266                           tablat	equ	0xFF5
  5267                           prodh	equ	0xFF4
  5268                           prodl	equ	0xFF3
  5269                           intcon	equ	0xFF2
  5270                           intcon3	equ	0xFF0
  5271                           postinc0	equ	0xFEE
  5272                           fsr0h	equ	0xFEA
  5273                           fsr0l	equ	0xFE9
  5274                           wreg	equ	0xFE8
  5275                           indf1	equ	0xFE7
  5276                           postinc1	equ	0xFE6
  5277                           postdec1	equ	0xFE5
  5278                           fsr1h	equ	0xFE2
  5279                           fsr1l	equ	0xFE1
  5280                           indf2	equ	0xFDF
  5281                           postinc2	equ	0xFDE
  5282                           postdec2	equ	0xFDD
  5283                           plusw2	equ	0xFDB
  5284                           fsr2h	equ	0xFDA
  5285                           fsr2l	equ	0xFD9
  5286                           status	equ	0xFD8
  5287                           
  5288 ;; *************** function _uartInterruptHandler *****************
  5289 ;; Defined at:
  5290 ;;		line 206 in file "uart.c"
  5291 ;; Parameters:    Size  Location     Type
  5292 ;;  uart            2    7[COMRAM] PTR struct .
  5293 ;;		 -> uart(26), 
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;  rcsta           2   20[COMRAM] PTR volatile unsigned ch
  5296 ;;		 -> RCSTA2(1), RCSTA1(1), 
  5297 ;;  txsta           2   13[COMRAM] PTR volatile unsigned ch
  5298 ;;		 -> TXSTA2(1), TXSTA1(1), 
  5299 ;;  data            1   22[COMRAM] unsigned char 
  5300 ;;  iRxFlag         1   19[COMRAM] unsigned char 
  5301 ;;  oErr            1   18[COMRAM] unsigned char 
  5302 ;;  fErr            1   17[COMRAM] unsigned char 
  5303 ;;  iRxEnable       1   16[COMRAM] unsigned char 
  5304 ;;  iTxFlag         1   15[COMRAM] unsigned char 
  5305 ;;  iTxEnable       1   12[COMRAM] unsigned char 
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  1    wreg      void 
  5308 ;; Registers used:
  5309 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5315 ;;      Params:         2       0       0       0       0       0       0
  5316 ;;      Locals:        11       0       0       0       0       0       0
  5317 ;;      Temps:          3       0       0       0       0       0       0
  5318 ;;      Totals:        16       0       0       0       0       0       0
  5319 ;;Total ram usage:       16 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    1
  5322 ;; This function calls:
  5323 ;;		i2_fifoGet
  5324 ;;		i2_fifoPut
  5325 ;;		i2_uartEnableSend
  5326 ;; This function is called by:
  5327 ;;		_IntHighRoutine
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           	psect	text28
  5332  000484                     __ptext28:
  5333                           	opt stack 0
  5334  000484                     _uartInterruptHandler:
  5335                           	opt stack 24
  5336                           
  5337                           ;uart.c: 208: char iTxFlag;
  5338                           ;uart.c: 209: char iTxEnable;
  5339                           ;uart.c: 210: char iRxFlag;
  5340                           ;uart.c: 211: char iRxEnable;
  5341                           ;uart.c: 212: char fErr;
  5342                           ;uart.c: 213: char oErr;
  5343                           ;uart.c: 214: volatile unsigned char* rcsta;
  5344                           ;uart.c: 215: volatile unsigned char* txsta;
  5345                           ;uart.c: 217: char data;
  5346                           ;uart.c: 219: switch (uart->number)
  5347                           
  5348                           ;incstack = 0
  5349  000484  D03F               	goto	i2l3005
  5350  000486                     i2l2991:
  5351                           
  5352                           ;uart.c: 222: iTxFlag=PIR1bits.TX1IF;
  5353  000486  0E00               	movlw	0
  5354  000488  B89E               	btfsc	3998,4,c	;volatile
  5355  00048A  0E01               	movlw	1
  5356  00048C  6E10               	movwf	uartInterruptHandler@iTxFlag,c
  5357                           
  5358                           ;uart.c: 223: iTxEnable=PIE1bits.TX1IE;
  5359  00048E  0E00               	movlw	0
  5360  000490  B89D               	btfsc	3997,4,c	;volatile
  5361  000492  0E01               	movlw	1
  5362  000494  6E0D               	movwf	uartInterruptHandler@iTxEnable,c
  5363                           
  5364                           ;uart.c: 224: iRxFlag=PIR1bits.RC1IF;
  5365  000496  0E00               	movlw	0
  5366  000498  BA9E               	btfsc	3998,5,c	;volatile
  5367  00049A  0E01               	movlw	1
  5368  00049C  6E14               	movwf	uartInterruptHandler@iRxFlag,c
  5369                           
  5370                           ;uart.c: 225: iRxEnable=PIE1bits.RCIE;
  5371  00049E  0E00               	movlw	0
  5372  0004A0  BA9D               	btfsc	3997,5,c	;volatile
  5373  0004A2  0E01               	movlw	1
  5374  0004A4  6E11               	movwf	uartInterruptHandler@iRxEnable,c
  5375                           
  5376                           ;uart.c: 226: fErr=RCSTA1bits.FERR;
  5377  0004A6  0E00               	movlw	0
  5378  0004A8  B4AB               	btfsc	4011,2,c	;volatile
  5379  0004AA  0E01               	movlw	1
  5380  0004AC  6E12               	movwf	uartInterruptHandler@fErr,c
  5381                           
  5382                           ;uart.c: 227: oErr=RCSTA1bits.OERR;
  5383  0004AE  0E00               	movlw	0
  5384  0004B0  B2AB               	btfsc	4011,1,c	;volatile
  5385  0004B2  0E01               	movlw	1
  5386  0004B4  6E13               	movwf	uartInterruptHandler@oErr,c
  5387                           
  5388                           ;uart.c: 228: rcsta=&RCSTA1;
  5389  0004B6  0EAB               	movlw	171
  5390  0004B8  6E15               	movwf	uartInterruptHandler@rcsta,c
  5391  0004BA  0E0F               	movlw	15
  5392  0004BC  6E16               	movwf	uartInterruptHandler@rcsta+1,c
  5393                           
  5394                           ;uart.c: 229: txsta=&TXSTA1;
  5395  0004BE  0EAC               	movlw	172
  5396  0004C0  D01D               	goto	L19
  5397  0004C2                     i2l2997:
  5398                           
  5399                           ;uart.c: 232: iTxFlag=PIR3bits.TX2IF;
  5400  0004C2  0E00               	movlw	0
  5401  0004C4  B8A4               	btfsc	4004,4,c	;volatile
  5402  0004C6  0E01               	movlw	1
  5403  0004C8  6E10               	movwf	uartInterruptHandler@iTxFlag,c
  5404                           
  5405                           ;uart.c: 233: iTxEnable=PIE3bits.TX2IE;
  5406  0004CA  0E00               	movlw	0
  5407  0004CC  B8A3               	btfsc	4003,4,c	;volatile
  5408  0004CE  0E01               	movlw	1
  5409  0004D0  6E0D               	movwf	uartInterruptHandler@iTxEnable,c
  5410                           
  5411                           ;uart.c: 234: iRxFlag=PIR3bits.RC2IF;
  5412  0004D2  0E00               	movlw	0
  5413  0004D4  BAA4               	btfsc	4004,5,c	;volatile
  5414  0004D6  0E01               	movlw	1
  5415  0004D8  6E14               	movwf	uartInterruptHandler@iRxFlag,c
  5416                           
  5417                           ;uart.c: 235: iRxEnable=PIE3bits.RC2IE;
  5418  0004DA  0E00               	movlw	0
  5419  0004DC  BAA3               	btfsc	4003,5,c	;volatile
  5420  0004DE  0E01               	movlw	1
  5421  0004E0  6E11               	movwf	uartInterruptHandler@iRxEnable,c
  5422                           
  5423                           ;uart.c: 236: fErr=RCSTA2bits.FERR;
  5424  0004E2  0E00               	movlw	0
  5425  0004E4  B471               	btfsc	3953,2,c	;volatile
  5426  0004E6  0E01               	movlw	1
  5427  0004E8  6E12               	movwf	uartInterruptHandler@fErr,c
  5428                           
  5429                           ;uart.c: 237: oErr=RCSTA2bits.OERR;
  5430  0004EA  0E00               	movlw	0
  5431  0004EC  B271               	btfsc	3953,1,c	;volatile
  5432  0004EE  0E01               	movlw	1
  5433  0004F0  6E13               	movwf	uartInterruptHandler@oErr,c
  5434                           
  5435                           ;uart.c: 238: rcsta=&RCSTA2;
  5436  0004F2  0E71               	movlw	113
  5437  0004F4  6E15               	movwf	uartInterruptHandler@rcsta,c
  5438  0004F6  0E0F               	movlw	15
  5439  0004F8  6E16               	movwf	uartInterruptHandler@rcsta+1,c
  5440                           
  5441                           ;uart.c: 239: txsta=&TXSTA2;
  5442  0004FA  0E72               	movlw	114
  5443  0004FC                     L19:
  5444  0004FC  6E0E               	movwf	uartInterruptHandler@txsta,c
  5445  0004FE  0E0F               	movlw	15
  5446  000500  6E0F               	movwf	uartInterruptHandler@txsta+1,c
  5447                           
  5448                           ;uart.c: 241: }
  5449                           
  5450                           ;uart.c: 240: break;
  5451  000502  D00D               	goto	i2l3007
  5452  000504                     i2l3005:
  5453  000504  EE20 F013          	lfsr	2,19
  5454  000508  5008               	movf	uartInterruptHandler@uart,w,c
  5455  00050A  26D9               	addwf	fsr2l,f,c
  5456  00050C  5009               	movf	uartInterruptHandler@uart+1,w,c
  5457  00050E  22DA               	addwfc	fsr2h,f,c
  5458  000510  50DF               	movf	indf2,w,c
  5459                           
  5460                           ; Switch size 1, requested type "space"
  5461                           ; Number of cases is 2, Range of values is 1 to 2
  5462                           ; switch strategies available:
  5463                           ; Name         Instructions Cycles
  5464                           ; simple_byte            7     4 (average)
  5465                           ;	Chosen strategy is simple_byte
  5466  000512  0A01               	xorlw	1	; case 1
  5467  000514  B4D8               	btfsc	status,2,c
  5468  000516  D7B7               	goto	i2l2991
  5469  000518  0A03               	xorlw	3	; case 2
  5470  00051A  B4D8               	btfsc	status,2,c
  5471  00051C  D7D2               	goto	i2l2997
  5472  00051E                     i2l3007:
  5473                           
  5474                           ;uart.c: 242: if (iTxFlag )
  5475  00051E  5010               	movf	uartInterruptHandler@iTxFlag,w,c
  5476  000520  B4D8               	btfsc	status,2,c
  5477  000522  D0C3               	goto	i2l3053
  5478                           
  5479                           ;uart.c: 243: {
  5480                           ;uart.c: 244: if ( fifoGet(&(uart->sendFifo),&data) )
  5481  000524  C008  F001         	movff	uartInterruptHandler@uart,i2fifoGet@fifo
  5482  000528  C009  F002         	movff	uartInterruptHandler@uart+1,i2fifoGet@fifo+1
  5483  00052C  0E17               	movlw	low uartInterruptHandler@data
  5484  00052E  6E03               	movwf	i2fifoGet@get,c
  5485  000530  0E00               	movlw	high uartInterruptHandler@data
  5486  000532  6E04               	movwf	i2fifoGet@get+1,c
  5487  000534  ECAB  F006         	call	i2_fifoGet	;wreg free
  5488  000538  0900               	iorlw	0
  5489  00053A  B4D8               	btfsc	status,2,c
  5490  00053C  D032               	goto	i2l3015
  5491                           
  5492                           ;uart.c: 245: {
  5493                           ;uart.c: 247: if (uart->hdFlag )
  5494  00053E  EE20 F014          	lfsr	2,20
  5495  000542  5008               	movf	uartInterruptHandler@uart,w,c
  5496  000544  26D9               	addwf	fsr2l,f,c
  5497  000546  5009               	movf	uartInterruptHandler@uart+1,w,c
  5498  000548  22DA               	addwfc	fsr2h,f,c
  5499  00054A  50DF               	movf	indf2,w,c
  5500  00054C  B4D8               	btfsc	status,2,c
  5501  00054E  D018               	goto	i2l417
  5502                           
  5503                           ;uart.c: 248: {
  5504                           ;uart.c: 249: *(uart->hdPort) |= uart->hdOnMask;
  5505  000550  EE20 F018          	lfsr	2,24
  5506  000554  5008               	movf	uartInterruptHandler@uart,w,c
  5507  000556  26D9               	addwf	fsr2l,f,c
  5508  000558  5009               	movf	uartInterruptHandler@uart+1,w,c
  5509  00055A  22DA               	addwfc	fsr2h,f,c
  5510  00055C  50DF               	movf	indf2,w,c
  5511  00055E  6E0A               	movwf	??_uartInterruptHandler& (0+255),c
  5512  000560  EE20 F015          	lfsr	2,21
  5513  000564  5008               	movf	uartInterruptHandler@uart,w,c
  5514  000566  26D9               	addwf	fsr2l,f,c
  5515  000568  5009               	movf	uartInterruptHandler@uart+1,w,c
  5516  00056A  22DA               	addwfc	fsr2h,f,c
  5517  00056C  CFDE F00B          	movff	postinc2,??_uartInterruptHandler+1
  5518  000570  CFDD F00C          	movff	postdec2,??_uartInterruptHandler+2
  5519  000574  C00B  FFD9         	movff	??_uartInterruptHandler+1,fsr2l
  5520  000578  C00C  FFDA         	movff	??_uartInterruptHandler+2,fsr2h
  5521  00057C  500A               	movf	??_uartInterruptHandler,w,c
  5522  00057E  12DF               	iorwf	indf2,f,c
  5523  000580                     i2l417:
  5524                           
  5525                           ;uart.c: 250: }
  5526                           ;uart.c: 251: *uart->txReg=data;
  5527  000580  EE20 F00E          	lfsr	2,14
  5528  000584  5008               	movf	uartInterruptHandler@uart,w,c
  5529  000586  26D9               	addwf	fsr2l,f,c
  5530  000588  5009               	movf	uartInterruptHandler@uart+1,w,c
  5531  00058A  22DA               	addwfc	fsr2h,f,c
  5532  00058C  CFDE F00A          	movff	postinc2,??_uartInterruptHandler
  5533  000590  CFDD F00B          	movff	postdec2,??_uartInterruptHandler+1
  5534  000594  C00A  FFD9         	movff	??_uartInterruptHandler,fsr2l
  5535  000598  C00B  FFDA         	movff	??_uartInterruptHandler+1,fsr2h
  5536  00059C  C017  FFDF         	movff	uartInterruptHandler@data,indf2
  5537                           
  5538                           ;uart.c: 252: }
  5539  0005A0  D084               	goto	i2l3053
  5540  0005A2                     i2l3015:
  5541                           
  5542                           ;uart.c: 253: else
  5543                           ;uart.c: 254: {
  5544                           ;uart.c: 256: if (uart->hdFlag)
  5545  0005A2  EE20 F014          	lfsr	2,20
  5546  0005A6  5008               	movf	uartInterruptHandler@uart,w,c
  5547  0005A8  26D9               	addwf	fsr2l,f,c
  5548  0005AA  5009               	movf	uartInterruptHandler@uart+1,w,c
  5549  0005AC  22DA               	addwfc	fsr2h,f,c
  5550  0005AE  50DF               	movf	indf2,w,c
  5551  0005B0  B4D8               	btfsc	status,2,c
  5552  0005B2  D01E               	goto	i2l3023
  5553  0005B4                     i2l3019:
  5554  0005B4  C00E  FFD9         	movff	uartInterruptHandler@txsta,fsr2l
  5555  0005B8  C00F  FFDA         	movff	uartInterruptHandler@txsta+1,fsr2h
  5556  0005BC  A2DF               	btfss	indf2,1,c
  5557  0005BE  D7FA               	goto	i2l3019
  5558                           
  5559                           ;uart.c: 260: *(uart->hdPort) &= uart->hdOffMask;
  5560  0005C0  EE20 F019          	lfsr	2,25
  5561  0005C4  5008               	movf	uartInterruptHandler@uart,w,c
  5562  0005C6  26D9               	addwf	fsr2l,f,c
  5563  0005C8  5009               	movf	uartInterruptHandler@uart+1,w,c
  5564  0005CA  22DA               	addwfc	fsr2h,f,c
  5565  0005CC  50DF               	movf	indf2,w,c
  5566  0005CE  6E0A               	movwf	??_uartInterruptHandler& (0+255),c
  5567  0005D0  EE20 F015          	lfsr	2,21
  5568  0005D4  5008               	movf	uartInterruptHandler@uart,w,c
  5569  0005D6  26D9               	addwf	fsr2l,f,c
  5570  0005D8  5009               	movf	uartInterruptHandler@uart+1,w,c
  5571  0005DA  22DA               	addwfc	fsr2h,f,c
  5572  0005DC  CFDE F00B          	movff	postinc2,??_uartInterruptHandler+1
  5573  0005E0  CFDD F00C          	movff	postdec2,??_uartInterruptHandler+2
  5574  0005E4  C00B  FFD9         	movff	??_uartInterruptHandler+1,fsr2l
  5575  0005E8  C00C  FFDA         	movff	??_uartInterruptHandler+2,fsr2h
  5576  0005EC  500A               	movf	??_uartInterruptHandler,w,c
  5577  0005EE  16DF               	andwf	indf2,f,c
  5578  0005F0                     i2l3023:
  5579                           
  5580                           ;uart.c: 261: }
  5581                           ;uart.c: 262: uartEnableSend(uart,0);
  5582  0005F0  C008  F001         	movff	uartInterruptHandler@uart,i2uartEnableSend@uart
  5583  0005F4  C009  F002         	movff	uartInterruptHandler@uart+1,i2uartEnableSend@uart+1
  5584  0005F8  0E00               	movlw	0
  5585  0005FA  6E03               	movwf	i2uartEnableSend@onoff,c
  5586  0005FC  EC2F  F00A         	call	i2_uartEnableSend	;wreg free
  5587                           
  5588                           ;uart.c: 263: }
  5589                           ;uart.c: 264: }
  5590                           ;uart.c: 266: while (iRxEnable & iRxFlag)
  5591  000600  D054               	goto	i2l3053
  5592  000602                     i2l3025:
  5593                           
  5594                           ;uart.c: 267: {
  5595                           ;uart.c: 268: if (fErr)
  5596  000602  5012               	movf	uartInterruptHandler@fErr,w,c
  5597  000604  B4D8               	btfsc	status,2,c
  5598  000606  D009               	goto	i2l3031
  5599                           
  5600                           ;uart.c: 269: {
  5601                           ;uart.c: 270: uart->status|=16;
  5602  000608  EE20 F012          	lfsr	2,18
  5603  00060C  5008               	movf	uartInterruptHandler@uart,w,c
  5604  00060E  26D9               	addwf	fsr2l,f,c
  5605  000610  5009               	movf	uartInterruptHandler@uart+1,w,c
  5606  000612  22DA               	addwfc	fsr2h,f,c
  5607  000614  0E00               	movlw	0
  5608  000616  88DB               	bsf	plusw2,4,c
  5609                           
  5610                           ;uart.c: 271: break;
  5611  000618  0012               	return	
  5612  00061A                     i2l3031:
  5613                           
  5614                           ;uart.c: 273: else
  5615                           ;uart.c: 274: {
  5616                           ;uart.c: 275: if (oErr)
  5617  00061A  5013               	movf	uartInterruptHandler@oErr,w,c
  5618  00061C  B4D8               	btfsc	status,2,c
  5619  00061E  D013               	goto	i2l3041
  5620                           
  5621                           ;uart.c: 276: {
  5622                           ;uart.c: 277: uart->status|=32;
  5623  000620  EE20 F012          	lfsr	2,18
  5624  000624  5008               	movf	uartInterruptHandler@uart,w,c
  5625  000626  26D9               	addwf	fsr2l,f,c
  5626  000628  5009               	movf	uartInterruptHandler@uart+1,w,c
  5627  00062A  22DA               	addwfc	fsr2h,f,c
  5628  00062C  0E00               	movlw	0
  5629  00062E  8ADB               	bsf	plusw2,5,c
  5630                           
  5631                           ;uart.c: 278: *rcsta&=~0x10;
  5632  000630  C015  FFD9         	movff	uartInterruptHandler@rcsta,fsr2l
  5633  000634  C016  FFDA         	movff	uartInterruptHandler@rcsta+1,fsr2h
  5634  000638  0EEF               	movlw	239
  5635  00063A  16DF               	andwf	indf2,f,c
  5636                           
  5637                           ;uart.c: 279: *rcsta|=0x10;
  5638  00063C  C015  FFD9         	movff	uartInterruptHandler@rcsta,fsr2l
  5639  000640  C016  FFDA         	movff	uartInterruptHandler@rcsta+1,fsr2h
  5640  000644  D7E7               	goto	L20
  5641  000646                     i2l3041:
  5642                           
  5643                           ;uart.c: 282: else
  5644                           ;uart.c: 283: {
  5645                           ;uart.c: 284: data=*uart->rxReg;
  5646  000646  EE20 F010          	lfsr	2,16
  5647  00064A  5008               	movf	uartInterruptHandler@uart,w,c
  5648  00064C  26D9               	addwf	fsr2l,f,c
  5649  00064E  5009               	movf	uartInterruptHandler@uart+1,w,c
  5650  000650  22DA               	addwfc	fsr2h,f,c
  5651  000652  CFDE F00A          	movff	postinc2,??_uartInterruptHandler
  5652  000656  CFDD F00B          	movff	postdec2,??_uartInterruptHandler+1
  5653  00065A  C00A  FFD9         	movff	??_uartInterruptHandler,fsr2l
  5654  00065E  C00B  FFDA         	movff	??_uartInterruptHandler+1,fsr2h
  5655  000662  50DF               	movf	indf2,w,c
  5656  000664  6E17               	movwf	uartInterruptHandler@data,c
  5657                           
  5658                           ;uart.c: 285: fifoPut(&uart->recvFifo,data);
  5659  000666  0E06               	movlw	6
  5660  000668  2408               	addwf	uartInterruptHandler@uart,w,c
  5661  00066A  6E01               	movwf	i2fifoPut@fifo,c
  5662  00066C  0E00               	movlw	0
  5663  00066E  2009               	addwfc	uartInterruptHandler@uart+1,w,c
  5664  000670  6E02               	movwf	i2fifoPut@fifo+1,c
  5665  000672  C017  F003         	movff	uartInterruptHandler@data,i2fifoPut@put
  5666  000676  EC1A  F007         	call	i2_fifoPut	;wreg free
  5667                           
  5668                           ;uart.c: 286: }
  5669                           ;uart.c: 287: }
  5670                           ;uart.c: 289: switch (uart->number)
  5671  00067A  D00A               	goto	i2l3051
  5672  00067C                     i2l3045:
  5673                           
  5674                           ;uart.c: 292: iRxFlag=PIR1bits.RC1IF;
  5675  00067C  0E00               	movlw	0
  5676  00067E  BA9E               	btfsc	3998,5,c	;volatile
  5677  000680  0E01               	movlw	1
  5678  000682  6E14               	movwf	uartInterruptHandler@iRxFlag,c
  5679                           
  5680                           ;uart.c: 293: break;
  5681  000684  D012               	goto	i2l3053
  5682  000686                     i2l3047:
  5683                           
  5684                           ;uart.c: 295: iRxFlag=PIR3bits.RC2IF;
  5685  000686  0E00               	movlw	0
  5686  000688  BAA4               	btfsc	4004,5,c	;volatile
  5687  00068A  0E01               	movlw	1
  5688  00068C  6E14               	movwf	uartInterruptHandler@iRxFlag,c
  5689                           
  5690                           ;uart.c: 297: }
  5691                           
  5692                           ;uart.c: 296: break;
  5693  00068E  D00D               	goto	i2l3053
  5694  000690                     i2l3051:
  5695  000690  EE20 F013          	lfsr	2,19
  5696  000694  5008               	movf	uartInterruptHandler@uart,w,c
  5697  000696  26D9               	addwf	fsr2l,f,c
  5698  000698  5009               	movf	uartInterruptHandler@uart+1,w,c
  5699  00069A  22DA               	addwfc	fsr2h,f,c
  5700  00069C  50DF               	movf	indf2,w,c
  5701                           
  5702                           ; Switch size 1, requested type "space"
  5703                           ; Number of cases is 2, Range of values is 1 to 2
  5704                           ; switch strategies available:
  5705                           ; Name         Instructions Cycles
  5706                           ; simple_byte            7     4 (average)
  5707                           ;	Chosen strategy is simple_byte
  5708  00069E  0A01               	xorlw	1	; case 1
  5709  0006A0  B4D8               	btfsc	status,2,c
  5710  0006A2  D7EC               	goto	i2l3045
  5711  0006A4  0A03               	xorlw	3	; case 2
  5712  0006A6  B4D8               	btfsc	status,2,c
  5713  0006A8  D7EE               	goto	i2l3047
  5714  0006AA                     i2l3053:
  5715  0006AA  5011               	movf	uartInterruptHandler@iRxEnable,w,c
  5716  0006AC  1414               	andwf	uartInterruptHandler@iRxFlag,w,c
  5717  0006AE  0900               	iorlw	0
  5718  0006B0  B4D8               	btfsc	status,2,c
  5719  0006B2  0012               	return	
  5720  0006B4  D7A6               	goto	i2l3025
  5721  0006B6                     __end_of_uartInterruptHandler:
  5722                           	opt stack 0
  5723                           pclatu	equ	0xFFB
  5724                           pclath	equ	0xFFA
  5725                           tblptru	equ	0xFF8
  5726                           tblptrh	equ	0xFF7
  5727                           tblptrl	equ	0xFF6
  5728                           tablat	equ	0xFF5
  5729                           prodh	equ	0xFF4
  5730                           prodl	equ	0xFF3
  5731                           intcon	equ	0xFF2
  5732                           intcon3	equ	0xFF0
  5733                           postinc0	equ	0xFEE
  5734                           fsr0h	equ	0xFEA
  5735                           fsr0l	equ	0xFE9
  5736                           wreg	equ	0xFE8
  5737                           indf1	equ	0xFE7
  5738                           postinc1	equ	0xFE6
  5739                           postdec1	equ	0xFE5
  5740                           fsr1h	equ	0xFE2
  5741                           fsr1l	equ	0xFE1
  5742                           indf2	equ	0xFDF
  5743                           postinc2	equ	0xFDE
  5744                           postdec2	equ	0xFDD
  5745                           plusw2	equ	0xFDB
  5746                           fsr2h	equ	0xFDA
  5747                           fsr2l	equ	0xFD9
  5748                           status	equ	0xFD8
  5749                           
  5750 ;; *************** function i2_uartEnableSend *****************
  5751 ;; Defined at:
  5752 ;;		line 139 in file "uart.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;  uart            2    0[COMRAM] PTR struct .
  5755 ;;		 -> uart(26), 
  5756 ;;  onoff           1    2[COMRAM] unsigned char 
  5757 ;; Auto vars:     Size  Location     Type
  5758 ;;		None
  5759 ;; Return value:  Size  Location     Type
  5760 ;;                  1    wreg      void 
  5761 ;; Registers used:
  5762 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5763 ;; Tracked objects:
  5764 ;;		On entry : 0/0
  5765 ;;		On exit  : 0/0
  5766 ;;		Unchanged: 0/0
  5767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5768 ;;      Params:         3       0       0       0       0       0       0
  5769 ;;      Locals:         0       0       0       0       0       0       0
  5770 ;;      Temps:          1       0       0       0       0       0       0
  5771 ;;      Totals:         4       0       0       0       0       0       0
  5772 ;;Total ram usage:        4 bytes
  5773 ;; Hardware stack levels used:    1
  5774 ;; This function calls:
  5775 ;;		Nothing
  5776 ;; This function is called by:
  5777 ;;		_uartInterruptHandler
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781                           	psect	text29
  5782  00145E                     __ptext29:
  5783                           	opt stack 0
  5784  00145E                     i2_uartEnableSend:
  5785                           	opt stack 24
  5786                           
  5787                           ;uart.c: 141: switch (uart->number)
  5788                           
  5789                           ;incstack = 0
  5790  00145E  D016               	goto	i2l2793
  5791  001460                     i2l2787:
  5792  001460  C003  F004         	movff	i2uartEnableSend@onoff,??i2_uartEnableSend
  5793  001464  0E01               	movlw	1
  5794  001466  1604               	andwf	??i2_uartEnableSend,f,c
  5795  001468  3A04               	swapf	??i2_uartEnableSend,f,c
  5796  00146A  509D               	movf	3997,w,c	;volatile
  5797  00146C  1804               	xorwf	??i2_uartEnableSend,w,c
  5798  00146E  0BEF               	andlw	-17
  5799  001470  1804               	xorwf	??i2_uartEnableSend,w,c
  5800  001472  6E9D               	movwf	3997,c	;volatile
  5801  001474  0012               	return	
  5802  001476                     i2l2789:
  5803  001476  C003  F004         	movff	i2uartEnableSend@onoff,??i2_uartEnableSend
  5804  00147A  0E01               	movlw	1
  5805  00147C  1604               	andwf	??i2_uartEnableSend,f,c
  5806  00147E  3A04               	swapf	??i2_uartEnableSend,f,c
  5807  001480  50A3               	movf	4003,w,c	;volatile
  5808  001482  1804               	xorwf	??i2_uartEnableSend,w,c
  5809  001484  0BEF               	andlw	-17
  5810  001486  1804               	xorwf	??i2_uartEnableSend,w,c
  5811  001488  6EA3               	movwf	4003,c	;volatile
  5812                           
  5813                           ;uart.c: 145: }
  5814  00148A  0012               	return	
  5815  00148C                     i2l2793:
  5816  00148C  EE20 F013          	lfsr	2,19
  5817  001490  5001               	movf	i2uartEnableSend@uart,w,c
  5818  001492  26D9               	addwf	fsr2l,f,c
  5819  001494  5002               	movf	i2uartEnableSend@uart+1,w,c
  5820  001496  22DA               	addwfc	fsr2h,f,c
  5821  001498  50DF               	movf	indf2,w,c
  5822                           
  5823                           ; Switch size 1, requested type "space"
  5824                           ; Number of cases is 2, Range of values is 1 to 2
  5825                           ; switch strategies available:
  5826                           ; Name         Instructions Cycles
  5827                           ; simple_byte            7     4 (average)
  5828                           ;	Chosen strategy is simple_byte
  5829  00149A  0A01               	xorlw	1	; case 1
  5830  00149C  B4D8               	btfsc	status,2,c
  5831  00149E  D7E0               	goto	i2l2787
  5832  0014A0  0A03               	xorlw	3	; case 2
  5833  0014A2  A4D8               	btfss	status,2,c
  5834  0014A4  0012               	return	
  5835  0014A6  D7E7               	goto	i2l2789
  5836  0014A8                     __end_ofi2_uartEnableSend:
  5837                           	opt stack 0
  5838                           pclatu	equ	0xFFB
  5839                           pclath	equ	0xFFA
  5840                           tblptru	equ	0xFF8
  5841                           tblptrh	equ	0xFF7
  5842                           tblptrl	equ	0xFF6
  5843                           tablat	equ	0xFF5
  5844                           prodh	equ	0xFF4
  5845                           prodl	equ	0xFF3
  5846                           intcon	equ	0xFF2
  5847                           intcon3	equ	0xFF0
  5848                           postinc0	equ	0xFEE
  5849                           fsr0h	equ	0xFEA
  5850                           fsr0l	equ	0xFE9
  5851                           wreg	equ	0xFE8
  5852                           indf1	equ	0xFE7
  5853                           postinc1	equ	0xFE6
  5854                           postdec1	equ	0xFE5
  5855                           fsr1h	equ	0xFE2
  5856                           fsr1l	equ	0xFE1
  5857                           indf2	equ	0xFDF
  5858                           postinc2	equ	0xFDE
  5859                           postdec2	equ	0xFDD
  5860                           plusw2	equ	0xFDB
  5861                           fsr2h	equ	0xFDA
  5862                           fsr2l	equ	0xFD9
  5863                           status	equ	0xFD8
  5864                           
  5865 ;; *************** function i2_fifoPut *****************
  5866 ;; Defined at:
  5867 ;;		line 12 in file "fifo.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;  fifo            2    0[COMRAM] PTR struct .
  5870 ;;		 -> uart(26), 
  5871 ;;  put             1    2[COMRAM] unsigned char 
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;		None
  5874 ;; Return value:  Size  Location     Type
  5875 ;;                  1    wreg      unsigned char 
  5876 ;; Registers used:
  5877 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5883 ;;      Params:         3       0       0       0       0       0       0
  5884 ;;      Locals:         0       0       0       0       0       0       0
  5885 ;;      Temps:          3       0       0       0       0       0       0
  5886 ;;      Totals:         6       0       0       0       0       0       0
  5887 ;;Total ram usage:        6 bytes
  5888 ;; Hardware stack levels used:    1
  5889 ;; This function calls:
  5890 ;;		Nothing
  5891 ;; This function is called by:
  5892 ;;		_uartInterruptHandler
  5893 ;; This function uses a non-reentrant model
  5894 ;;
  5895                           
  5896                           	psect	text30
  5897  000E34                     __ptext30:
  5898                           	opt stack 0
  5899  000E34                     i2_fifoPut:
  5900                           	opt stack 24
  5901                           
  5902                           ;fifo.c: 14: if ((fifo->status & 1)==1)
  5903                           
  5904                           ;incstack = 0
  5905  000E34  EE20 F003          	lfsr	2,3
  5906  000E38  5001               	movf	i2fifoPut@fifo,w,c
  5907  000E3A  26D9               	addwf	fsr2l,f,c
  5908  000E3C  5002               	movf	i2fifoPut@fifo+1,w,c
  5909  000E3E  22DA               	addwfc	fsr2h,f,c
  5910  000E40  B0DF               	btfsc	indf2,0,c
  5911  000E42  0012               	return	
  5912                           
  5913                           ;fifo.c: 17: }
  5914                           ;fifo.c: 19: fifo->buf[fifo->putPtr]=put;
  5915                           
  5916                           ;fifo.c: 15: {
  5917                           ;fifo.c: 16: return 0;
  5918                           ;	Return value of i2_fifoPut is never used
  5919  000E44  EE20 F004          	lfsr	2,4
  5920  000E48  5001               	movf	i2fifoPut@fifo,w,c
  5921  000E4A  26D9               	addwf	fsr2l,f,c
  5922  000E4C  5002               	movf	i2fifoPut@fifo+1,w,c
  5923  000E4E  22DA               	addwfc	fsr2h,f,c
  5924  000E50  50DF               	movf	indf2,w,c
  5925  000E52  6E04               	movwf	??i2_fifoPut& (0+255),c
  5926  000E54  5004               	movf	??i2_fifoPut,w,c
  5927  000E56  0D01               	mullw	1
  5928  000E58  C001  FFD9         	movff	i2fifoPut@fifo,fsr2l
  5929  000E5C  C002  FFDA         	movff	i2fifoPut@fifo+1,fsr2h
  5930  000E60  CFDE F005          	movff	postinc2,??i2_fifoPut+1
  5931  000E64  CFDD F006          	movff	postdec2,??i2_fifoPut+2
  5932  000E68  50F3               	movf	prodl,w,c
  5933  000E6A  2405               	addwf	??i2_fifoPut+1,w,c
  5934  000E6C  6ED9               	movwf	fsr2l,c
  5935  000E6E  50F4               	movf	prodh,w,c
  5936  000E70  2006               	addwfc	??i2_fifoPut+2,w,c
  5937  000E72  6EDA               	movwf	fsr2h,c
  5938  000E74  C003  FFDF         	movff	i2fifoPut@put,indf2
  5939                           
  5940                           ;fifo.c: 20: fifo->status&=~2;
  5941  000E78  EE20 F003          	lfsr	2,3
  5942  000E7C  5001               	movf	i2fifoPut@fifo,w,c
  5943  000E7E  26D9               	addwf	fsr2l,f,c
  5944  000E80  5002               	movf	i2fifoPut@fifo+1,w,c
  5945  000E82  22DA               	addwfc	fsr2h,f,c
  5946  000E84  0EFD               	movlw	253
  5947  000E86  16DF               	andwf	indf2,f,c
  5948                           
  5949                           ;fifo.c: 22: fifo->putPtr--;
  5950  000E88  EE20 F004          	lfsr	2,4
  5951  000E8C  5001               	movf	i2fifoPut@fifo,w,c
  5952  000E8E  26D9               	addwf	fsr2l,f,c
  5953  000E90  5002               	movf	i2fifoPut@fifo+1,w,c
  5954  000E92  22DA               	addwfc	fsr2h,f,c
  5955  000E94  06DF               	decf	indf2,f,c
  5956                           
  5957                           ;fifo.c: 23: if (fifo->putPtr > fifo->maxPtr)
  5958  000E96  EE20 F004          	lfsr	2,4
  5959  000E9A  5001               	movf	i2fifoPut@fifo,w,c
  5960  000E9C  26D9               	addwf	fsr2l,f,c
  5961  000E9E  5002               	movf	i2fifoPut@fifo+1,w,c
  5962  000EA0  22DA               	addwfc	fsr2h,f,c
  5963  000EA2  EE10 F002          	lfsr	1,2
  5964  000EA6  5001               	movf	i2fifoPut@fifo,w,c
  5965  000EA8  26E1               	addwf	fsr1l,f,c
  5966  000EAA  5002               	movf	i2fifoPut@fifo+1,w,c
  5967  000EAC  22E2               	addwfc	fsr1h,f,c
  5968  000EAE  50DE               	movf	postinc2,w,c
  5969  000EB0  5CE6               	subwf	postinc1,w,c
  5970  000EB2  B0D8               	btfsc	status,0,c
  5971  000EB4  D00E               	goto	i2l8
  5972                           
  5973                           ;fifo.c: 24: {
  5974                           ;fifo.c: 25: fifo->putPtr=fifo->maxPtr;
  5975  000EB6  EE20 F002          	lfsr	2,2
  5976  000EBA  5001               	movf	i2fifoPut@fifo,w,c
  5977  000EBC  26D9               	addwf	fsr2l,f,c
  5978  000EBE  5002               	movf	i2fifoPut@fifo+1,w,c
  5979  000EC0  22DA               	addwfc	fsr2h,f,c
  5980  000EC2  EE10 F004          	lfsr	1,4
  5981  000EC6  5001               	movf	i2fifoPut@fifo,w,c
  5982  000EC8  26E1               	addwf	fsr1l,f,c
  5983  000ECA  5002               	movf	i2fifoPut@fifo+1,w,c
  5984  000ECC  22E2               	addwfc	fsr1h,f,c
  5985  000ECE  CFDF FFE7          	movff	indf2,indf1
  5986  000ED2                     i2l8:
  5987                           
  5988                           ;fifo.c: 26: }
  5989                           ;fifo.c: 28: if (fifo->putPtr==fifo->getPtr)
  5990  000ED2  EE20 F005          	lfsr	2,5
  5991  000ED6  5001               	movf	i2fifoPut@fifo,w,c
  5992  000ED8  26D9               	addwf	fsr2l,f,c
  5993  000EDA  5002               	movf	i2fifoPut@fifo+1,w,c
  5994  000EDC  22DA               	addwfc	fsr2h,f,c
  5995  000EDE  EE10 F004          	lfsr	1,4
  5996  000EE2  5001               	movf	i2fifoPut@fifo,w,c
  5997  000EE4  26E1               	addwf	fsr1l,f,c
  5998  000EE6  5002               	movf	i2fifoPut@fifo+1,w,c
  5999  000EE8  22E2               	addwfc	fsr1h,f,c
  6000  000EEA  50DE               	movf	postinc2,w,c
  6001  000EEC  18E6               	xorwf	postinc1,w,c
  6002  000EEE  A4D8               	btfss	status,2,c
  6003  000EF0  0012               	return	
  6004                           
  6005                           ;fifo.c: 29: {
  6006                           ;fifo.c: 30: fifo->status|=1;
  6007  000EF2  EE20 F003          	lfsr	2,3
  6008  000EF6  5001               	movf	i2fifoPut@fifo,w,c
  6009  000EF8  26D9               	addwf	fsr2l,f,c
  6010  000EFA  5002               	movf	i2fifoPut@fifo+1,w,c
  6011  000EFC  22DA               	addwfc	fsr2h,f,c
  6012  000EFE  0E00               	movlw	0
  6013  000F00  80DB               	bsf	plusw2,0,c
  6014  000F02  0012               	return	
  6015  000F04                     __end_ofi2_fifoPut:
  6016                           	opt stack 0
  6017                           pclatu	equ	0xFFB
  6018                           pclath	equ	0xFFA
  6019                           tblptru	equ	0xFF8
  6020                           tblptrh	equ	0xFF7
  6021                           tblptrl	equ	0xFF6
  6022                           tablat	equ	0xFF5
  6023                           prodh	equ	0xFF4
  6024                           prodl	equ	0xFF3
  6025                           intcon	equ	0xFF2
  6026                           intcon3	equ	0xFF0
  6027                           postinc0	equ	0xFEE
  6028                           fsr0h	equ	0xFEA
  6029                           fsr0l	equ	0xFE9
  6030                           wreg	equ	0xFE8
  6031                           indf1	equ	0xFE7
  6032                           postinc1	equ	0xFE6
  6033                           postdec1	equ	0xFE5
  6034                           fsr1h	equ	0xFE2
  6035                           fsr1l	equ	0xFE1
  6036                           indf2	equ	0xFDF
  6037                           postinc2	equ	0xFDE
  6038                           postdec2	equ	0xFDD
  6039                           plusw2	equ	0xFDB
  6040                           fsr2h	equ	0xFDA
  6041                           fsr2l	equ	0xFD9
  6042                           status	equ	0xFD8
  6043                           
  6044 ;; *************** function i2_fifoGet *****************
  6045 ;; Defined at:
  6046 ;;		line 74 in file "fifo.c"
  6047 ;; Parameters:    Size  Location     Type
  6048 ;;  fifo            2    0[COMRAM] PTR struct .
  6049 ;;		 -> uart(26), 
  6050 ;;  get             2    2[COMRAM] PTR unsigned char 
  6051 ;;		 -> uartTransmitAll@data(1), uartInterruptHandler@data(1), RAM(1535), fifoGetBuf@elem(1), 
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;		None
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      unsigned char 
  6056 ;; Registers used:
  6057 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6063 ;;      Params:         4       0       0       0       0       0       0
  6064 ;;      Locals:         0       0       0       0       0       0       0
  6065 ;;      Temps:          3       0       0       0       0       0       0
  6066 ;;      Totals:         7       0       0       0       0       0       0
  6067 ;;Total ram usage:        7 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; This function calls:
  6070 ;;		Nothing
  6071 ;; This function is called by:
  6072 ;;		_uartInterruptHandler
  6073 ;; This function uses a non-reentrant model
  6074 ;;
  6075                           
  6076                           	psect	text31
  6077  000D56                     __ptext31:
  6078                           	opt stack 0
  6079  000D56                     i2_fifoGet:
  6080                           	opt stack 24
  6081                           
  6082                           ;fifo.c: 76: if ((fifo->status & 2)==2)
  6083                           
  6084                           ;incstack = 0
  6085  000D56  EE20 F003          	lfsr	2,3
  6086  000D5A  5001               	movf	i2fifoGet@fifo,w,c
  6087  000D5C  26D9               	addwf	fsr2l,f,c
  6088  000D5E  5002               	movf	i2fifoGet@fifo+1,w,c
  6089  000D60  22DA               	addwfc	fsr2h,f,c
  6090  000D62  A2DF               	btfss	indf2,1,c
  6091  000D64  D002               	goto	i2l2769
  6092                           
  6093                           ;fifo.c: 77: {
  6094                           ;fifo.c: 78: return 0;
  6095  000D66  0E00               	movlw	0
  6096  000D68  0012               	return	
  6097  000D6A                     i2l2769:
  6098                           
  6099                           ;fifo.c: 79: }
  6100                           ;fifo.c: 80: *get=fifo->buf[fifo->getPtr];
  6101  000D6A  EE20 F005          	lfsr	2,5
  6102  000D6E  5001               	movf	i2fifoGet@fifo,w,c
  6103  000D70  26D9               	addwf	fsr2l,f,c
  6104  000D72  5002               	movf	i2fifoGet@fifo+1,w,c
  6105  000D74  22DA               	addwfc	fsr2h,f,c
  6106  000D76  50DF               	movf	indf2,w,c
  6107  000D78  6E05               	movwf	??i2_fifoGet& (0+255),c
  6108  000D7A  5005               	movf	??i2_fifoGet,w,c
  6109  000D7C  0D01               	mullw	1
  6110  000D7E  C001  FFD9         	movff	i2fifoGet@fifo,fsr2l
  6111  000D82  C002  FFDA         	movff	i2fifoGet@fifo+1,fsr2h
  6112  000D86  CFDE F006          	movff	postinc2,??i2_fifoGet+1
  6113  000D8A  CFDD F007          	movff	postdec2,??i2_fifoGet+2
  6114  000D8E  50F3               	movf	prodl,w,c
  6115  000D90  2406               	addwf	??i2_fifoGet+1,w,c
  6116  000D92  6ED9               	movwf	fsr2l,c
  6117  000D94  50F4               	movf	prodh,w,c
  6118  000D96  2007               	addwfc	??i2_fifoGet+2,w,c
  6119  000D98  6EDA               	movwf	fsr2h,c
  6120  000D9A  C003  FFE1         	movff	i2fifoGet@get,fsr1l
  6121  000D9E  C004  FFE2         	movff	i2fifoGet@get+1,fsr1h
  6122  000DA2  CFDF FFE7          	movff	indf2,indf1
  6123                           
  6124                           ;fifo.c: 81: fifo->status&=~1;
  6125  000DA6  EE20 F003          	lfsr	2,3
  6126  000DAA  5001               	movf	i2fifoGet@fifo,w,c
  6127  000DAC  26D9               	addwf	fsr2l,f,c
  6128  000DAE  5002               	movf	i2fifoGet@fifo+1,w,c
  6129  000DB0  22DA               	addwfc	fsr2h,f,c
  6130  000DB2  0EFE               	movlw	254
  6131  000DB4  16DF               	andwf	indf2,f,c
  6132                           
  6133                           ;fifo.c: 83: fifo->getPtr--;
  6134  000DB6  EE20 F005          	lfsr	2,5
  6135  000DBA  5001               	movf	i2fifoGet@fifo,w,c
  6136  000DBC  26D9               	addwf	fsr2l,f,c
  6137  000DBE  5002               	movf	i2fifoGet@fifo+1,w,c
  6138  000DC0  22DA               	addwfc	fsr2h,f,c
  6139  000DC2  06DF               	decf	indf2,f,c
  6140                           
  6141                           ;fifo.c: 84: if (fifo->getPtr > fifo->maxPtr)
  6142  000DC4  EE20 F005          	lfsr	2,5
  6143  000DC8  5001               	movf	i2fifoGet@fifo,w,c
  6144  000DCA  26D9               	addwf	fsr2l,f,c
  6145  000DCC  5002               	movf	i2fifoGet@fifo+1,w,c
  6146  000DCE  22DA               	addwfc	fsr2h,f,c
  6147  000DD0  EE10 F002          	lfsr	1,2
  6148  000DD4  5001               	movf	i2fifoGet@fifo,w,c
  6149  000DD6  26E1               	addwf	fsr1l,f,c
  6150  000DD8  5002               	movf	i2fifoGet@fifo+1,w,c
  6151  000DDA  22E2               	addwfc	fsr1h,f,c
  6152  000DDC  50DE               	movf	postinc2,w,c
  6153  000DDE  5CE6               	subwf	postinc1,w,c
  6154  000DE0  B0D8               	btfsc	status,0,c
  6155  000DE2  D00E               	goto	i2l34
  6156                           
  6157                           ;fifo.c: 85: {
  6158                           ;fifo.c: 86: fifo->getPtr=fifo->maxPtr;
  6159  000DE4  EE20 F002          	lfsr	2,2
  6160  000DE8  5001               	movf	i2fifoGet@fifo,w,c
  6161  000DEA  26D9               	addwf	fsr2l,f,c
  6162  000DEC  5002               	movf	i2fifoGet@fifo+1,w,c
  6163  000DEE  22DA               	addwfc	fsr2h,f,c
  6164  000DF0  EE10 F005          	lfsr	1,5
  6165  000DF4  5001               	movf	i2fifoGet@fifo,w,c
  6166  000DF6  26E1               	addwf	fsr1l,f,c
  6167  000DF8  5002               	movf	i2fifoGet@fifo+1,w,c
  6168  000DFA  22E2               	addwfc	fsr1h,f,c
  6169  000DFC  CFDF FFE7          	movff	indf2,indf1
  6170  000E00                     i2l34:
  6171                           
  6172                           ;fifo.c: 87: }
  6173                           ;fifo.c: 89: if (fifo->getPtr==fifo->putPtr)
  6174  000E00  EE20 F004          	lfsr	2,4
  6175  000E04  5001               	movf	i2fifoGet@fifo,w,c
  6176  000E06  26D9               	addwf	fsr2l,f,c
  6177  000E08  5002               	movf	i2fifoGet@fifo+1,w,c
  6178  000E0A  22DA               	addwfc	fsr2h,f,c
  6179  000E0C  EE10 F005          	lfsr	1,5
  6180  000E10  5001               	movf	i2fifoGet@fifo,w,c
  6181  000E12  26E1               	addwf	fsr1l,f,c
  6182  000E14  5002               	movf	i2fifoGet@fifo+1,w,c
  6183  000E16  22E2               	addwfc	fsr1h,f,c
  6184  000E18  50DE               	movf	postinc2,w,c
  6185  000E1A  18E6               	xorwf	postinc1,w,c
  6186  000E1C  A4D8               	btfss	status,2,c
  6187  000E1E  D008               	goto	i2l2781
  6188                           
  6189                           ;fifo.c: 90: {
  6190                           ;fifo.c: 91: fifo->status|=2;
  6191  000E20  EE20 F003          	lfsr	2,3
  6192  000E24  5001               	movf	i2fifoGet@fifo,w,c
  6193  000E26  26D9               	addwf	fsr2l,f,c
  6194  000E28  5002               	movf	i2fifoGet@fifo+1,w,c
  6195  000E2A  22DA               	addwfc	fsr2h,f,c
  6196  000E2C  0E00               	movlw	0
  6197  000E2E  82DB               	bsf	plusw2,1,c
  6198  000E30                     i2l2781:
  6199                           
  6200                           ;fifo.c: 92: }
  6201                           ;fifo.c: 93: return 1;
  6202  000E30  0E01               	movlw	1
  6203  000E32  0012               	return	
  6204  000E34                     __end_ofi2_fifoGet:
  6205                           	opt stack 0
  6206                           pclatu	equ	0xFFB
  6207                           pclath	equ	0xFFA
  6208                           tblptru	equ	0xFF8
  6209                           tblptrh	equ	0xFF7
  6210                           tblptrl	equ	0xFF6
  6211                           tablat	equ	0xFF5
  6212                           prodh	equ	0xFF4
  6213                           prodl	equ	0xFF3
  6214                           intcon	equ	0xFF2
  6215                           intcon3	equ	0xFF0
  6216                           postinc0	equ	0xFEE
  6217                           fsr0h	equ	0xFEA
  6218                           fsr0l	equ	0xFE9
  6219                           wreg	equ	0xFE8
  6220                           indf1	equ	0xFE7
  6221                           postinc1	equ	0xFE6
  6222                           postdec1	equ	0xFE5
  6223                           fsr1h	equ	0xFE2
  6224                           fsr1l	equ	0xFE1
  6225                           indf2	equ	0xFDF
  6226                           postinc2	equ	0xFDE
  6227                           postdec2	equ	0xFDD
  6228                           plusw2	equ	0xFDB
  6229                           fsr2h	equ	0xFDA
  6230                           fsr2l	equ	0xFD9
  6231                           status	equ	0xFD8
  6232                           
  6233 ;; *************** function _spiInterruptHandler *****************
  6234 ;; Defined at:
  6235 ;;		line 190 in file "main.c"
  6236 ;; Parameters:    Size  Location     Type
  6237 ;;		None
  6238 ;; Auto vars:     Size  Location     Type
  6239 ;;		None
  6240 ;; Return value:  Size  Location     Type
  6241 ;;                  1    wreg      void 
  6242 ;; Registers used:
  6243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6244 ;; Tracked objects:
  6245 ;;		On entry : 0/0
  6246 ;;		On exit  : 0/0
  6247 ;;		Unchanged: 0/0
  6248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6249 ;;      Params:         0       0       0       0       0       0       0
  6250 ;;      Locals:         0       0       0       0       0       0       0
  6251 ;;      Temps:          0       0       0       0       0       0       0
  6252 ;;      Totals:         0       0       0       0       0       0       0
  6253 ;;Total ram usage:        0 bytes
  6254 ;; Hardware stack levels used:    1
  6255 ;; Hardware stack levels required when called:    1
  6256 ;; This function calls:
  6257 ;;		_crcCalc
  6258 ;;		_encodeSendBuffer
  6259 ;; This function is called by:
  6260 ;;		_IntHighRoutine
  6261 ;; This function uses a non-reentrant model
  6262 ;;
  6263                           
  6264                           	psect	text32
  6265  000F04                     __ptext32:
  6266                           	opt stack 0
  6267  000F04                     _spiInterruptHandler:
  6268                           	opt stack 24
  6269                           
  6270                           ;main.c: 192: if (RBIF)
  6271                           
  6272                           ;incstack = 0
  6273  000F04  A0F2               	btfss	intcon,0,c	;volatile
  6274  000F06  D031               	goto	i2l2963
  6275                           
  6276                           ;main.c: 193: {
  6277                           ;main.c: 194: if (PORTBbits.RB4==0)
  6278  000F08  B881               	btfsc	3969,4,c	;volatile
  6279  000F0A  D01C               	goto	i2l2949
  6280                           
  6281                           ;main.c: 195: {
  6282                           ;main.c: 196: spiReadWrite=PORTBbits.RB3;
  6283  000F0C  0E00               	movlw	0
  6284  000F0E  B681               	btfsc	3969,3,c	;volatile
  6285  000F10  0E01               	movlw	1
  6286  000F12  6E29               	movwf	_spiReadWrite,c
  6287                           
  6288                           ;main.c: 197: if (spiReadWrite)
  6289  000F14  5029               	movf	_spiReadWrite,w,c
  6290  000F16  B4D8               	btfsc	status,2,c
  6291  000F18  D011               	goto	i2l2945
  6292                           
  6293                           ;main.c: 198: {
  6294                           ;main.c: 199: SSP1BUF=spiRecvBuffer[spiRecvPtr++];
  6295  000F1A  5027               	movf	_spiRecvPtr,w,c
  6296  000F1C  0D01               	mullw	1
  6297  000F1E  0E6A               	movlw	low _spiRecvBuffer
  6298  000F20  24F3               	addwf	prodl,w,c
  6299  000F22  6ED9               	movwf	fsr2l,c
  6300  000F24  0E01               	movlw	high _spiRecvBuffer
  6301  000F26  20F4               	addwfc	prodh,w,c
  6302  000F28  6EDA               	movwf	fsr2h,c
  6303  000F2A  50DF               	movf	indf2,w,c
  6304  000F2C  6EC9               	movwf	4041,c	;volatile
  6305  000F2E  2A27               	incf	_spiRecvPtr,f,c
  6306                           
  6307                           ;main.c: 200: if (spiRecvPtr==spiRecvLen)
  6308  000F30  5028               	movf	_spiRecvLen,w,c
  6309  000F32  1827               	xorwf	_spiRecvPtr,w,c
  6310  000F34  A4D8               	btfss	status,2,c
  6311  000F36  D006               	goto	i2l2949
  6312                           
  6313                           ;main.c: 201: {
  6314                           ;main.c: 202: LATB2=0;
  6315  000F38  948A               	bcf	3978,2,c	;volatile
  6316                           
  6317                           ;main.c: 203: }
  6318                           ;main.c: 204: }
  6319  000F3A  D004               	goto	i2l2949
  6320  000F3C                     i2l2945:
  6321                           
  6322                           ;main.c: 205: else
  6323                           ;main.c: 206: {
  6324                           ;main.c: 207: spiSendPtr=0;
  6325  000F3C  0E00               	movlw	0
  6326  000F3E  6E26               	movwf	_spiSendPtr,c
  6327                           
  6328                           ;main.c: 208: SSP1BUF=spiSendPtr;
  6329  000F40  C026  FFC9         	movff	_spiSendPtr,4041	;volatile
  6330  000F44                     i2l2949:
  6331                           
  6332                           ;main.c: 209: }
  6333                           ;main.c: 210: }
  6334                           ;main.c: 211: if (PORTBbits.RB4==1)
  6335  000F44  A881               	btfss	3969,4,c	;volatile
  6336  000F46  D010               	goto	i2l2961
  6337                           
  6338                           ;main.c: 212: {
  6339                           ;main.c: 213: if (spiReadWrite)
  6340  000F48  5029               	movf	_spiReadWrite,w,c
  6341  000F4A  A4D8               	btfss	status,2,c
  6342  000F4C  D00D               	goto	i2l2961
  6343                           
  6344                           ;main.c: 217: else
  6345                           ;main.c: 218: {
  6346                           ;main.c: 219: packetSendLen=encodeSendBuffer();
  6347                           
  6348                           ;main.c: 214: {
  6349                           ;main.c: 216: }
  6350  000F4E  EC2F  F00B         	call	_encodeSendBuffer	;wreg free
  6351  000F52  0100               	movlb	0	; () banked
  6352  000F54  6F9C               	movwf	_packetSendLen& (0+255),b
  6353                           
  6354                           ;main.c: 220: packetSendCrc=crcCalc();
  6355  000F56  EC2C  F00B         	call	_crcCalc	;wreg free
  6356  000F5A  0100               	movlb	0	; () banked
  6357  000F5C  6F98               	movwf	_packetSendCrc& (0+255),b
  6358                           
  6359                           ; BSR set to: 0
  6360                           ;main.c: 221: packetSendEnable=1;
  6361  000F5E  0E01               	movlw	1
  6362  000F60  0100               	movlb	0	; () banked
  6363  000F62  6F97               	movwf	_packetSendEnable& (0+255),b
  6364                           
  6365                           ; BSR set to: 0
  6366                           ;main.c: 222: spiSendPtr=0;
  6367  000F64  0E00               	movlw	0
  6368  000F66  6E26               	movwf	_spiSendPtr,c
  6369  000F68                     i2l2961:
  6370                           
  6371                           ;main.c: 223: }
  6372                           ;main.c: 224: }
  6373                           ;main.c: 225: RBIF=0;
  6374  000F68  90F2               	bcf	intcon,0,c	;volatile
  6375  000F6A                     i2l2963:
  6376                           
  6377                           ;main.c: 226: }
  6378                           ;main.c: 228: if (SSP1IF)
  6379  000F6A  A69E               	btfss	3998,3,c	;volatile
  6380  000F6C  0012               	return	
  6381                           
  6382                           ;main.c: 229: {
  6383                           ;main.c: 230: if (spiReadWrite)
  6384  000F6E  5029               	movf	_spiReadWrite,w,c
  6385  000F70  B4D8               	btfsc	status,2,c
  6386  000F72  D019               	goto	i2l2979
  6387                           
  6388                           ;main.c: 231: {
  6389                           ;main.c: 232: if (spiRecvPtr<spiRecvLen)
  6390  000F74  5028               	movf	_spiRecvLen,w,c
  6391  000F76  5C27               	subwf	_spiRecvPtr,w,c
  6392  000F78  B0D8               	btfsc	status,0,c
  6393  000F7A  D00B               	goto	i2l2973
  6394                           
  6395                           ;main.c: 233: {
  6396                           ;main.c: 234: SSP1BUF=spiRecvBuffer[spiRecvPtr++];
  6397  000F7C  5027               	movf	_spiRecvPtr,w,c
  6398  000F7E  0D01               	mullw	1
  6399  000F80  0E6A               	movlw	low _spiRecvBuffer
  6400  000F82  24F3               	addwf	prodl,w,c
  6401  000F84  6ED9               	movwf	fsr2l,c
  6402  000F86  0E01               	movlw	high _spiRecvBuffer
  6403  000F88  20F4               	addwfc	prodh,w,c
  6404  000F8A  6EDA               	movwf	fsr2h,c
  6405  000F8C  50DF               	movf	indf2,w,c
  6406  000F8E  6EC9               	movwf	4041,c	;volatile
  6407  000F90  2A27               	incf	_spiRecvPtr,f,c
  6408  000F92                     i2l2973:
  6409                           
  6410                           ;main.c: 235: }
  6411                           ;main.c: 236: if (spiRecvPtr==spiRecvLen)
  6412  000F92  5028               	movf	_spiRecvLen,w,c
  6413  000F94  1827               	xorwf	_spiRecvPtr,w,c
  6414  000F96  A4D8               	btfss	status,2,c
  6415  000F98  D016               	goto	i2l2987
  6416                           
  6417                           ;main.c: 237: {
  6418                           ;main.c: 238: LATB2=0;
  6419  000F9A  948A               	bcf	3978,2,c	;volatile
  6420                           
  6421                           ;main.c: 239: spiRecvPtr=0;
  6422  000F9C  0E00               	movlw	0
  6423  000F9E  6E27               	movwf	_spiRecvPtr,c
  6424                           
  6425                           ;main.c: 240: spiRecvLen=0;
  6426  000FA0  0E00               	movlw	0
  6427  000FA2  6E28               	movwf	_spiRecvLen,c
  6428                           
  6429                           ;main.c: 241: }
  6430                           ;main.c: 242: }
  6431  000FA4  D010               	goto	i2l2987
  6432  000FA6                     i2l2979:
  6433                           
  6434                           ;main.c: 243: else
  6435                           ;main.c: 244: {
  6436                           ;main.c: 245: if (spiSendPtr<105)
  6437  000FA6  0E69               	movlw	105
  6438  000FA8  6026               	cpfslt	_spiSendPtr,c
  6439  000FAA  D00D               	goto	i2l2987
  6440                           
  6441                           ;main.c: 246: {
  6442                           ;main.c: 247: spiSendBuffer[spiSendPtr++]=SSP1BUF;
  6443  000FAC  5026               	movf	_spiSendPtr,w,c
  6444  000FAE  0D01               	mullw	1
  6445  000FB0  0E00               	movlw	low _spiSendBuffer
  6446  000FB2  24F3               	addwf	prodl,w,c
  6447  000FB4  6ED9               	movwf	fsr2l,c
  6448  000FB6  0E01               	movlw	high _spiSendBuffer
  6449  000FB8  20F4               	addwfc	prodh,w,c
  6450  000FBA  6EDA               	movwf	fsr2h,c
  6451  000FBC  CFC9 FFDF          	movff	4041,indf2	;volatile
  6452  000FC0  2A26               	incf	_spiSendPtr,f,c
  6453                           
  6454                           ;main.c: 248: SSP1BUF=spiSendPtr;
  6455  000FC2  C026  FFC9         	movff	_spiSendPtr,4041	;volatile
  6456  000FC6                     i2l2987:
  6457                           
  6458                           ;main.c: 249: }
  6459                           ;main.c: 250: }
  6460                           ;main.c: 251: SSP1IF=0;
  6461  000FC6  969E               	bcf	3998,3,c	;volatile
  6462  000FC8  0012               	return	
  6463  000FCA                     __end_of_spiInterruptHandler:
  6464                           	opt stack 0
  6465                           pclatu	equ	0xFFB
  6466                           pclath	equ	0xFFA
  6467                           tblptru	equ	0xFF8
  6468                           tblptrh	equ	0xFF7
  6469                           tblptrl	equ	0xFF6
  6470                           tablat	equ	0xFF5
  6471                           prodh	equ	0xFF4
  6472                           prodl	equ	0xFF3
  6473                           intcon	equ	0xFF2
  6474                           intcon3	equ	0xFF0
  6475                           postinc0	equ	0xFEE
  6476                           fsr0h	equ	0xFEA
  6477                           fsr0l	equ	0xFE9
  6478                           wreg	equ	0xFE8
  6479                           indf1	equ	0xFE7
  6480                           postinc1	equ	0xFE6
  6481                           postdec1	equ	0xFE5
  6482                           fsr1h	equ	0xFE2
  6483                           fsr1l	equ	0xFE1
  6484                           indf2	equ	0xFDF
  6485                           postinc2	equ	0xFDE
  6486                           postdec2	equ	0xFDD
  6487                           plusw2	equ	0xFDB
  6488                           fsr2h	equ	0xFDA
  6489                           fsr2l	equ	0xFD9
  6490                           status	equ	0xFD8
  6491                           
  6492 ;; *************** function _encodeSendBuffer *****************
  6493 ;; Defined at:
  6494 ;;		line 181 in file "main.c"
  6495 ;; Parameters:    Size  Location     Type
  6496 ;;		None
  6497 ;; Auto vars:     Size  Location     Type
  6498 ;;		None
  6499 ;; Return value:  Size  Location     Type
  6500 ;;                  1    wreg      unsigned char 
  6501 ;; Registers used:
  6502 ;;		None
  6503 ;; Tracked objects:
  6504 ;;		On entry : 0/0
  6505 ;;		On exit  : 0/0
  6506 ;;		Unchanged: 0/0
  6507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6508 ;;      Params:         0       0       0       0       0       0       0
  6509 ;;      Locals:         0       0       0       0       0       0       0
  6510 ;;      Temps:          0       0       0       0       0       0       0
  6511 ;;      Totals:         0       0       0       0       0       0       0
  6512 ;;Total ram usage:        0 bytes
  6513 ;; Hardware stack levels used:    1
  6514 ;; This function calls:
  6515 ;;		Nothing
  6516 ;; This function is called by:
  6517 ;;		_spiInterruptHandler
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           	psect	text33
  6522  00165E                     __ptext33:
  6523                           	opt stack 0
  6524  00165E                     _encodeSendBuffer:
  6525                           	opt stack 24
  6526                           
  6527                           ;incstack = 0
  6528  00165E  0012               	return		;funcret
  6529  001660                     __end_of_encodeSendBuffer:
  6530                           	opt stack 0
  6531                           pclatu	equ	0xFFB
  6532                           pclath	equ	0xFFA
  6533                           tblptru	equ	0xFF8
  6534                           tblptrh	equ	0xFF7
  6535                           tblptrl	equ	0xFF6
  6536                           tablat	equ	0xFF5
  6537                           prodh	equ	0xFF4
  6538                           prodl	equ	0xFF3
  6539                           intcon	equ	0xFF2
  6540                           intcon3	equ	0xFF0
  6541                           postinc0	equ	0xFEE
  6542                           fsr0h	equ	0xFEA
  6543                           fsr0l	equ	0xFE9
  6544                           wreg	equ	0xFE8
  6545                           indf1	equ	0xFE7
  6546                           postinc1	equ	0xFE6
  6547                           postdec1	equ	0xFE5
  6548                           fsr1h	equ	0xFE2
  6549                           fsr1l	equ	0xFE1
  6550                           indf2	equ	0xFDF
  6551                           postinc2	equ	0xFDE
  6552                           postdec2	equ	0xFDD
  6553                           plusw2	equ	0xFDB
  6554                           fsr2h	equ	0xFDA
  6555                           fsr2l	equ	0xFD9
  6556                           status	equ	0xFD8
  6557                           
  6558 ;; *************** function _crcCalc *****************
  6559 ;; Defined at:
  6560 ;;		line 176 in file "main.c"
  6561 ;; Parameters:    Size  Location     Type
  6562 ;;		None
  6563 ;; Auto vars:     Size  Location     Type
  6564 ;;		None
  6565 ;; Return value:  Size  Location     Type
  6566 ;;                  1    wreg      unsigned char 
  6567 ;; Registers used:
  6568 ;;		wreg
  6569 ;; Tracked objects:
  6570 ;;		On entry : 0/0
  6571 ;;		On exit  : 0/0
  6572 ;;		Unchanged: 0/0
  6573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6574 ;;      Params:         0       0       0       0       0       0       0
  6575 ;;      Locals:         0       0       0       0       0       0       0
  6576 ;;      Temps:          0       0       0       0       0       0       0
  6577 ;;      Totals:         0       0       0       0       0       0       0
  6578 ;;Total ram usage:        0 bytes
  6579 ;; Hardware stack levels used:    1
  6580 ;; This function calls:
  6581 ;;		Nothing
  6582 ;; This function is called by:
  6583 ;;		_spiInterruptHandler
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           	psect	text34
  6588  001658                     __ptext34:
  6589                           	opt stack 0
  6590  001658                     _crcCalc:
  6591                           	opt stack 24
  6592                           
  6593                           ;main.c: 178: return 0;
  6594                           
  6595                           ;incstack = 0
  6596  001658  0E00               	movlw	0
  6597  00165A  0012               	return	
  6598  00165C                     __end_of_crcCalc:
  6599                           	opt stack 0
  6600  0000                     pclatu	equ	0xFFB
  6601                           pclath	equ	0xFFA
  6602                           tblptru	equ	0xFF8
  6603                           tblptrh	equ	0xFF7
  6604                           tblptrl	equ	0xFF6
  6605                           tablat	equ	0xFF5
  6606                           prodh	equ	0xFF4
  6607                           prodl	equ	0xFF3
  6608                           intcon	equ	0xFF2
  6609                           intcon3	equ	0xFF0
  6610                           postinc0	equ	0xFEE
  6611                           fsr0h	equ	0xFEA
  6612                           fsr0l	equ	0xFE9
  6613                           wreg	equ	0xFE8
  6614                           indf1	equ	0xFE7
  6615                           postinc1	equ	0xFE6
  6616                           postdec1	equ	0xFE5
  6617                           fsr1h	equ	0xFE2
  6618                           fsr1l	equ	0xFE1
  6619                           indf2	equ	0xFDF
  6620                           postinc2	equ	0xFDE
  6621                           postdec2	equ	0xFDD
  6622                           plusw2	equ	0xFDB
  6623                           fsr2h	equ	0xFDA
  6624                           fsr2l	equ	0xFD9
  6625                           status	equ	0xFD8
  6626                           pclatu	equ	0xFFB
  6627                           pclath	equ	0xFFA
  6628                           tblptru	equ	0xFF8
  6629                           tblptrh	equ	0xFF7
  6630                           tblptrl	equ	0xFF6
  6631                           tablat	equ	0xFF5
  6632                           prodh	equ	0xFF4
  6633                           prodl	equ	0xFF3
  6634                           intcon	equ	0xFF2
  6635                           intcon3	equ	0xFF0
  6636                           postinc0	equ	0xFEE
  6637                           fsr0h	equ	0xFEA
  6638                           fsr0l	equ	0xFE9
  6639                           wreg	equ	0xFE8
  6640                           indf1	equ	0xFE7
  6641                           postinc1	equ	0xFE6
  6642                           postdec1	equ	0xFE5
  6643                           fsr1h	equ	0xFE2
  6644                           fsr1l	equ	0xFE1
  6645                           indf2	equ	0xFDF
  6646                           postinc2	equ	0xFDE
  6647                           postdec2	equ	0xFDD
  6648                           plusw2	equ	0xFDB
  6649                           fsr2h	equ	0xFDA
  6650                           fsr2l	equ	0xFD9
  6651                           status	equ	0xFD8
  6652                           
  6653                           	psect	rparam
  6654  0000                     pclatu	equ	0xFFB
  6655                           pclath	equ	0xFFA
  6656                           tblptru	equ	0xFF8
  6657                           tblptrh	equ	0xFF7
  6658                           tblptrl	equ	0xFF6
  6659                           tablat	equ	0xFF5
  6660                           prodh	equ	0xFF4
  6661                           prodl	equ	0xFF3
  6662                           intcon	equ	0xFF2
  6663                           intcon3	equ	0xFF0
  6664                           postinc0	equ	0xFEE
  6665                           fsr0h	equ	0xFEA
  6666                           fsr0l	equ	0xFE9
  6667                           wreg	equ	0xFE8
  6668                           indf1	equ	0xFE7
  6669                           postinc1	equ	0xFE6
  6670                           postdec1	equ	0xFE5
  6671                           fsr1h	equ	0xFE2
  6672                           fsr1l	equ	0xFE1
  6673                           indf2	equ	0xFDF
  6674                           postinc2	equ	0xFDE
  6675                           postdec2	equ	0xFDD
  6676                           plusw2	equ	0xFDB
  6677                           fsr2h	equ	0xFDA
  6678                           fsr2l	equ	0xFD9
  6679                           status	equ	0xFD8
  6680                           
  6681                           	psect	temp
  6682  00003D                     btemp:
  6683                           	opt stack 0
  6684  00003D                     	ds	1
  6685  0000                     int$flags	set	btemp
  6686                           pclatu	equ	0xFFB
  6687                           pclath	equ	0xFFA
  6688                           tblptru	equ	0xFF8
  6689                           tblptrh	equ	0xFF7
  6690                           tblptrl	equ	0xFF6
  6691                           tablat	equ	0xFF5
  6692                           prodh	equ	0xFF4
  6693                           prodl	equ	0xFF3
  6694                           intcon	equ	0xFF2
  6695                           intcon3	equ	0xFF0
  6696                           postinc0	equ	0xFEE
  6697                           fsr0h	equ	0xFEA
  6698                           fsr0l	equ	0xFE9
  6699                           wreg	equ	0xFE8
  6700                           indf1	equ	0xFE7
  6701                           postinc1	equ	0xFE6
  6702                           postdec1	equ	0xFE5
  6703                           fsr1h	equ	0xFE2
  6704                           fsr1l	equ	0xFE1
  6705                           indf2	equ	0xFDF
  6706                           postinc2	equ	0xFDE
  6707                           postdec2	equ	0xFDD
  6708                           plusw2	equ	0xFDB
  6709                           fsr2h	equ	0xFDA
  6710                           fsr2l	equ	0xFD9
  6711                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         786
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      60
    BANK0           160     55      89
    BANK1           256      0     212
    BANK2           256      0     254
    BANK3           256      0     132
    BANK4           256      0     132
    BANK5           256      0       0

Pointer List with Targets:

    uart.buf	PTR unsigned char  size(2) Largest target is 0
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    ledTact@led	PTR struct . size(2) Largest target is 9
		 -> ledTx(COMRAM[9]), ledRx(COMRAM[9]), 

    ledFlash@led	PTR struct . size(2) Largest target is 9
		 -> ledTx(COMRAM[9]), ledRx(COMRAM[9]), 

    ledOff@led	PTR struct . size(2) Largest target is 9
		 -> ledTx(COMRAM[9]), ledRx(COMRAM[9]), 

    ledOn@led	PTR struct . size(2) Largest target is 9
		 -> ledTx(COMRAM[9]), ledRx(COMRAM[9]), 

    ledInit@led	PTR struct . size(2) Largest target is 9
		 -> ledTx(COMRAM[9]), ledRx(COMRAM[9]), 

    uartIsTransmitting@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartIsTransmitting@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartIsTransmitting@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartIsTransmitting@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartIsTransmitting@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartRecvBufferFull@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartRecvBufferFull@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartRecvBufferFull@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartRecvBufferFull@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartRecvBufferFull@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartSendBufferFull@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartSendBufferFull@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartSendBufferFull@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartSendBufferFull@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartSendBufferFull@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartStatus@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartStatus@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartStatus@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartStatus@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartStatus@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartTransmitAll@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartTransmitAll@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartTransmitAll@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartTransmitAll@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartTransmitAll@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartInterruptHandler@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartInterruptHandler@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartInterruptHandler@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartInterruptHandler@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartInterruptHandler@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartInterruptHandler@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[26]), 

    uartInterruptHandler@txsta	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXSTA2(SFR_1[1]), TXSTA1(SFR_1[1]), 

    uartInterruptHandler@rcsta	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCSTA2(SFR_1[1]), RCSTA1(SFR_1[1]), 

    uartRecvBuf@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartRecvBuf@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartRecvBuf@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartRecvBuf@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartRecvBuf@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartRecvByte@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartRecvByte@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartRecvByte@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartRecvByte@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartRecvByte@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartRecvByte@data	PTR unsigned char  size(2) Largest target is 1535
		 -> RAM(DATA[1535]), 

    uartRecvByte@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[26]), 

    uartSendBuf@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartSendBuf@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartSendBuf@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartSendBuf@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartSendBuf@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartSendBuf@str	PTR unsigned char  size(2) Largest target is 127
		 -> packetSendBuffer(BANK2[127]), 

    uartSendBuf@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[26]), 

    uartSendString0@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartSendString0@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartSendString0@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartSendString0@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartSendString0@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartSendString@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartSendString@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartSendString@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartSendString@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartSendString@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartSendByte@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartSendByte@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartSendByte@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartSendByte@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartSendByte@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartSendByte@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[26]), 

    uartEnableHalfDuplex@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartEnableHalfDuplex@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartEnableHalfDuplex@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartEnableHalfDuplex@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartEnableHalfDuplex@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartEnableRecv@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartEnableRecv@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartEnableRecv@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartEnableRecv@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartEnableRecv@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartEnableRecv@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[26]), 

    uartEnableSend@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartEnableSend@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartEnableSend@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartEnableSend@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartEnableSend@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartEnableSend@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[26]), 

    uartInitHalfDuplex@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartInitHalfDuplex@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartInitHalfDuplex@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartInitHalfDuplex@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartInitHalfDuplex@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    SetBaudRate@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    SetBaudRate@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    SetBaudRate@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    SetBaudRate@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    SetBaudRate@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    SetBaudRate@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[26]), 

    GetBaudRateConfig@brgl	PTR unsigned char  size(2) Largest target is 1
		 -> SetBaudRate@l(BANK0[1]), 

    GetBaudRateConfig@brgh	PTR unsigned char  size(2) Largest target is 1
		 -> SetBaudRate@h(BANK0[1]), 

    GetBaudRateConfig@setBRG16	PTR unsigned char  size(2) Largest target is 1
		 -> SetBaudRate@brg16(BANK0[1]), 

    uartInit@recvbuf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), 

    uartInit@sendbuf	PTR unsigned char  size(2) Largest target is 132
		 -> uartSendBuffer(BANK3[132]), 

    uartInit@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uartInit@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartInit@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartInit@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartInit@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uartInit@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[26]), 

    S193$hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 0

    S193$rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    S193$txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    fifoWipeBuffer@fifoBuf.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    fifoGetBuf@fifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    fifoGet@get	PTR unsigned char  size(2) Largest target is 1535
		 -> uartTransmitAll@data(COMRAM[1]), uartInterruptHandler@data(COMRAM[1]), RAM(DATA[1535]), fifoGetBuf@elem(COMRAM[1]), 

    fifoGet@fifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    fifoGet@fifo	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[26]), 

    fifoPutBuf@buf	PTR unsigned char  size(2) Largest target is 127
		 -> packetSendBuffer(BANK2[127]), 

    fifoPutBuf@fifo	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[26]), 

    fifoPut@fifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    fifoPut@fifo	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[26]), 

    S21$buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    fifoInit@fifo.buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    fifoInit@buf	PTR unsigned char  size(2) Largest target is 132
		 -> uartRecvBuffer(BANK4[132]), uartSendBuffer(BANK3[132]), 

    fifoInit@fifo	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[26]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _IntHighRoutine in COMRAM

    _IntHighRoutine->_uartInterruptHandler
    _uartInterruptHandler->i2_fifoGet

Critical Paths under _main in BANK0

    _uartSendByte->_fifoPut
    _uartSendBuf->_fifoPutBuf
    _fifoPutBuf->_fifoPut
    _uartRecvByte->_fifoGet
    _InitUart->_uartInit
    _uartInit->_SetBaudRate
    _SetBaudRate->_GetBaudRateConfig
    _InitSystem->_ledInit
    _LoadConfigData->_EERead

Critical Paths under _IntHighRoutine in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _IntHighRoutine in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _IntHighRoutine in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _IntHighRoutine in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _IntHighRoutine in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _IntHighRoutine in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   21365
                                             51 BANK0      4     4      0
                         _InitSystem
                           _InitUart
                              _crcOk
                   _decodeRecvBuffer
                           _ledFlash
                             _ledOff
                              _ledOn
                            _ledTact
                            _myDelay
                   _setDataAvailable
                       _uartRecvByte
                        _uartSendBuf
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (1) _uartSendByte                                         4     1      3    6970
                                              6 BANK0      4     1      3
                            _fifoPut
                     _uartEnableSend
 ---------------------------------------------------------------------------------
 (1) _uartSendBuf                                          6     1      5    3860
                                             11 BANK0      6     1      5
                         _fifoPutBuf
                     _uartEnableSend
 ---------------------------------------------------------------------------------
 (2) _fifoPutBuf                                           5     0      5    1602
                                              6 BANK0      5     0      5
                            _fifoPut
 ---------------------------------------------------------------------------------
 (2) _fifoPut                                              6     3      3    1233
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (1) _uartRecvByte                                         4     0      4    1295
                                              7 BANK0      4     0      4
                            _fifoGet
 ---------------------------------------------------------------------------------
 (2) _fifoGet                                              7     3      4    1053
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _setDataAvailable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _myDelay                                              6     2      4     155
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _ledTact                                              4     2      2     676
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _ledOn                                                2     0      2     273
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ledOff                                               2     0      2     273
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ledFlash                                             2     0      2     242
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _decodeRecvBuffer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _crcOk                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _InitUart                                             0     0      0    6024
                     _uartEnableRecv
                     _uartEnableSend
                           _uartInit
 ---------------------------------------------------------------------------------
 (2) _uartInit                                            20     3     17    3928
                                             34 BANK0     17     0     17
                        _SetBaudRate
                           _fifoInit
 ---------------------------------------------------------------------------------
 (3) _fifoInit                                             5     0      5     819
                                              0 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (3) _SetBaudRate                                         14     4     10    1769
                                             20 BANK0     14     4     10
                  _GetBaudRateConfig
 ---------------------------------------------------------------------------------
 (4) _GetBaudRateConfig                                   20     6     14     799
                                              0 BANK0     20     6     14
 ---------------------------------------------------------------------------------
 (2) _uartEnableSend                                       4     1      3    1823
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _uartEnableRecv                                       4     1      3     273
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _InitSystem                                           0     0      0    1247
                     _LoadConfigData
            _SetupInternalOscillator
                            _ledInit
 ---------------------------------------------------------------------------------
 (2) _ledInit                                              7     0      7     968
                                              0 BANK0      7     0      7
 ---------------------------------------------------------------------------------
 (2) _SetupInternalOscillator                              3     2      1     214
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _LoadConfigData                                       0     0      0      65
                             _EERead
 ---------------------------------------------------------------------------------
 (3) _EERead                                               3     3      0      65
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _IntHighRoutine                                      14    14      0    1465
                                             23 COMRAM    14    14      0
                _spiInterruptHandler
               _uartInterruptHandler
 ---------------------------------------------------------------------------------
 (6) _uartInterruptHandler                                16    14      2    1465
                                              7 COMRAM    16    14      2
                          i2_fifoGet
                          i2_fifoPut
                   i2_uartEnableSend
 ---------------------------------------------------------------------------------
 (7) i2_uartEnableSend                                     4     1      3     118
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (7) i2_fifoPut                                            6     3      3     338
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (7) i2_fifoGet                                            7     3      4     338
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) _spiInterruptHandler                                  0     0      0       0
                            _crcCalc
                   _encodeSendBuffer
 ---------------------------------------------------------------------------------
 (7) _encodeSendBuffer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _crcCalc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitSystem
     _LoadConfigData
       _EERead
     _SetupInternalOscillator
     _ledInit
   _InitUart
     _uartEnableRecv
     _uartEnableSend
     _uartInit
       _SetBaudRate
         _GetBaudRateConfig
       _fifoInit
   _crcOk
   _decodeRecvBuffer
   _ledFlash
   _ledOff
   _ledOn
   _ledTact
   _myDelay
   _setDataAvailable
   _uartRecvByte
     _fifoGet
   _uartSendBuf
     _fifoPutBuf
       _fifoPut
     _uartEnableSend
   _uartSendByte
     _fifoPut
     _uartEnableSend

 _IntHighRoutine (ROOT)
   _spiInterruptHandler
     _crcCalc
     _encodeSendBuffer
   _uartInterruptHandler
     i2_fifoGet
     i2_fifoPut
     i2_uartEnableSend

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      84      13       51.6%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      84      11       51.6%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      FE       8       99.2%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      D4       6       82.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     37      59       4       55.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      3C       1       63.8%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     36F       9        0.0%
DATA                 0      0     36F      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Jun 01 22:51:17 2017

                               l8 0D1C                  _decodeRecvBuffer 165C  
                              l34 0C26  __size_of_SetupInternalOscillator 0080  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000            __end_of_IntHighRoutine 0092  
                    __CFG_CP3$OFF 000000                   uartInit@recvbuf 0090  
                 uartInit@sendbuf 008D                               l370 10EA  
                             l368 10D4                               l483 0A64  
                    __CFG_CPB$OFF 000000                      __CFG_CPD$OFF 000000  
                             i2l8 0ED2                               _adr 00B8  
                             prod 000FF3                               wreg 000FE8  
                      _TXSTA1bits 000FAC                        _TXSTA2bits 000F72  
                uartInit@recvSize 0092                  uartInit@sendSize 008F  
                    __CFG_LVP$OFF 000000                              l4001 09DC  
                            l4011 1362                              l4003 09EC  
                            l4021 1306                              l4013 137E  
                            l4023 1324                              l4017 139A  
                            l4201 0B0A                              l4027 1342  
                            l4151 1430                              l4311 038A  
                            l4305 0368                              l4241 0130  
                            l4233 0108                              l4147 1410  
                            l4315 03A8                              l4251 01C4  
                            l3701 0740                              l4149 141A  
                            l4333 0452                              l4325 03DC  
                            l4309 037C                              l4229 0102  
                            l3711 083E                              l3703 0808  
                            l4271 0224                              l4239 011E  
                            l3713 0848                              l3721 0854  
                            l4337 045A                              l4265 020E  
                            l4195 0ACE                              l4339 0462  
                            l4267 0214                              l3709 0834  
                            l3901 151A                              l4293 02A8  
                            l4277 0236                              l3727 08C6  
                            l4199 0AF8                              l3681 06F6  
                            l3913 0B7A                              l3691 0728  
                            l3683 0700                              l4299 0308  
                            l3693 0732                              l3685 070A  
                            l3925 0C5C                              l3853 0C78  
                            l4911 0798                              l4903 075C  
                            l3695 073C                              l3687 0714  
                            l3679 06EC                              l4905 07E0  
                            l4921 07D4                              l4913 07A4  
                            l3689 071E                              l3865 0D52  
                            l4931 0896                              l4915 07B0  
                            l4907 07F6                              l3947 08F8  
                            l4933 08A2                              l4925 0870  
                            l4917 07BC                              l4909 078C  
                            l3893 14EC                              l4935 08AE  
                            l4927 08BA                              l4919 07C8  
                            l3975 096E                              l4929 088E  
                            l3889 1100                              l3899 1510  
                            _LATA 000F89                              _PIE1 000F9D  
                            _PIE2 000FA0                              u1745 15F8  
                            _PIE3 000FA3                              u1746 15FA  
                            u1930 0A56                              _PIE4 000F7A  
                            u1835 11D6                              u1691 06DC  
                            _PIE5 000F7D                              u1836 11D8  
                            u1765 10DE                              u1766 10E0  
                            u1775 10F4                              u1776 10F6  
                            _RBIF 007F90                              i2l34 0E00  
                            _main 0096                      EERead@orgGIE 0061  
                            _mode 009D                              _uart 009E  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 003D                     __CFG_BORV$190 000000  
          __end_of_LoadConfigData 1650                              prodh 000FF4  
                            prodl 000FF3                              start 0092  
                   __CFG_IESO$OFF 000000                      ___param_bank 000000  
       __size_ofi2_uartEnableSend 004A                      _BAUDCON1bits 000FB8  
                    _BAUDCON2bits 000F70                   ?_IntHighRoutine 0001  
            GetBaudRateConfig@brg 0072                             ?_main 0001  
            GetBaudRateConfig@osc 0064                             _EEADR 000FA9  
                           _IOCB4 007B14                             _LATB2 007C52  
                           i2l417 0580                   __end_of_crcCalc 165C  
                   EERead@adresse 0060                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                   __end_of_fifoGet 0C60  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                 __end_of_fifoPut 0D56                    __CFG_EBTR1$OFF 000000  
                 __end_of_ledInit 1304                    __CFG_EBTR2$OFF 000000  
                 __end_of_ledTact 0B62                    __CFG_EBTR3$OFF 000000  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBTRB$OFF 000000  
                           _crcOk 1654                             _ledOn 159C  
                           _ledRx 0034                             _ledTx 002B  
                 __end_of_myDelay 145E                __CFG_MCLRE$EXTMCLR 000000  
                           main@b 0096       __end_of_spiInterruptHandler 0FCA  
                           pclath 000FFA                             tablat 000FF5  
                           plusw2 000FDB                     ??_SetBaudRate 007E  
                           status 000FD8                    __CFG_HFOFST$ON 000000  
                 ?_LoadConfigData 0001                    __CFG_PBADEN$ON 000000  
                 __initialization 13B8                __size_ofi2_fifoGet 00DE  
                    __end_of_main 0484                __size_ofi2_fifoPut 00D0  
                      _InitSystem 0FCA                  __end_of_InitUart 11AA  
                          ??_main 0093                     __activetblptr 000002  
                  __CFG_PLLCFG$ON 000000         uartInterruptHandler@rcsta 0015  
    __end_of_uartInterruptHandler 06B6         uartInterruptHandler@txsta 000E  
                   _packetAddress 009A                            ?_crcOk 0001  
                          ?_ledOn 0060             GetBaudRateConfig@brgh 006A  
           GetBaudRateConfig@brgl 006C             GetBaudRateConfig@rate 0060  
                          _EEDATA 000FA8                            _EECON2 000FA7  
                 uartSendBuf@uart 006B                   uartSendBuf@size 006F  
                          _EERead 15D4                            i2l3005 0504  
                          i2l3031 061A                            i2l3023 05F0  
                          i2l3015 05A2                            i2l3007 051E  
                          i2l3041 0646                            i2l3025 0602  
                          i2l3051 0690                            i2l3019 05B4  
                          i2l3045 067C                            i2l3053 06AA  
                          i2l3047 0686                    __CFG_WDTEN$OFF 000000  
                   _packetRecvLen 0099                            i2l2781 0E30  
                          i2l2961 0F68                            i2l2945 0F3C  
                          i2l2769 0D6A                            i2l2793 148C  
                          i2l2963 0F6A                            i2l2787 1460  
                          i2l2973 0F92                            i2l2949 0F44  
                          i2l2789 1476                            i2l2991 0486  
                          _INTCON 000FF2                            i2l2987 0FC6  
                          i2l2979 0FA6                            i2l2997 04C2  
                          _RCREG1 000FAE                            _RCREG2 000F74  
                   _packetSendCrc 0098                     _packetSendLen 009C  
                          _RCSTA1 000FAB                            _RCSTA2 000F71  
                          _SPBRG1 000FAF                            _SPBRG2 000F75  
                          _SSP1IF 007CF3                            _TXREG1 000FAD  
                          _TXREG2 000F73                            _TXSTA1 000FAC  
                          _TXSTA2 000F72                 ?_setDataAvailable 0001  
                 uartSendByte@res 0069                   uartSendByte@snd 0068  
                __end_of_fifoInit 12A2                  __end_of_ledFlash 1622  
                  __CFG_PWRTEN$ON 000000                    __CFG_XINST$OFF 000000  
              ??_setDataAvailable 0060               __end_of_SetBaudRate 111E  
                    ?_uartSendBuf 006B                    __CFG_STVREN$ON 000000  
                          _ledOff 1562           _SetupInternalOscillator 11AA  
                       ??_crcCalc 0001                            clear_0 13BE  
                          clear_1 13CA                            clear_2 13D6  
                          clear_3 13E2                            clear_4 13EE  
                          clear_5 13FA                         ??_fifoGet 0064  
                       ??_fifoPut 0063                         ??_ledInit 0067  
                       ??_ledTact 0062                         ??_myDelay 0064  
                __end_of_uartInit 0A3C                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
         __size_of_uartEnableRecv 005C           __size_of_uartEnableSend 0058  
        __end_of_encodeSendBuffer 1660                 __end_ofi2_fifoGet 0E34  
               __end_ofi2_fifoPut 0F04          __end_of_decodeRecvBuffer 165E  
                      __accesstop 0060           __end_of__initialization 1400  
                   ___rparam_used 000001                      i2fifoGet@get 0003  
                  __pcstackCOMRAM 0001                  i2_uartEnableSend 145E  
                   __end_of_crcOk 1658                       ?_InitSystem 0001  
                   __end_of_ledOn 15D4                  uartRecvByte@data 0069  
                    i2fifoPut@put 0003                  uartRecvByte@uart 0067  
                         ??_crcOk 0060                           ??_ledOn 0062  
                      __pbssBANK0 0097                        __pbssBANK1 0100  
                      __pbssBANK2 0200                        __pbssBANK3 0300  
                      __pbssBANK4 0400                           ?_EERead 0001  
                       ?_InitUart 0001                       _SetBaudRate 107C  
              __CFG_CCP2MX$PORTC1 000000              _uartInterruptHandler 0484  
       ??_SetupInternalOscillator 0061                  ??_IntHighRoutine 0018  
              __CFG_CCP3MX$PORTB5 000000                           ?_ledOff 0060  
                      _fifoPutBuf 14EA         GetBaudRateConfig@setBRG16 0068  
                         _INTCON3 000FF0                    main@pckRecvPtr 0095  
                         _SPBRGH1 000FB0                           _SPBRGH2 000F76  
                       ?_fifoInit 0060                         ?_ledFlash 0060  
                         _SSP1BUF 000FC9                  ??_LoadConfigData 0062  
                 SetBaudRate@rate 0076                   SetBaudRate@uart 0074  
             __size_of_InitSystem 00B2                   __size_of_EERead 002A  
                      ??_InitUart 0093                  uartSendByte@uart 0066  
                         __Hparam 0000                        _packetCtrl 009B  
           ?_uartInterruptHandler 0008                           __Lparam 0000  
                       ?_uartInit 0082                     ?_uartRecvByte 0067  
                 __size_of_ledOff 003A                     ?_uartSendByte 0066  
                         _crcCalc 1658                           __pcinit 13B8  
            __size_of_uartSendBuf 0042                           __ramtop 0600  
                         _fifoGet 0B62                           _fifoPut 0C60  
                         __ptext0 0096                           __ptext1 1528  
                         __ptext2 14A8                           __ptext3 14EA  
                         __ptext4 0C60                           __ptext5 1622  
                         __ptext6 0B62                           _ledInit 12A2  
                         __ptext7 1650                           __ptext8 140E  
                         __ptext9 0A3C                           _ledTact 0A3C  
                    SetBaudRate@h 007F                      SetBaudRate@l 0080  
                    SetBaudRate@o 007E                           _myDelay 140E  
                  _uartEnableRecv 1304                    _uartEnableSend 1360  
                      ??_fifoInit 0065                        ??_ledFlash 0062  
                     uartInit@osc 0089                       uartInit@num 0084  
                   _dataAvailable 002A                  _packetRecvBuffer 0200  
            end_of_initialization 1400                     __Lmediumconst 0000  
              uartEnableRecv@uart 0060                  _packetSendEnable 0097  
                _packetSendBuffer 027F                uartEnableSend@uart 0060  
                      fifoGet@get 0062      __size_of_spiInterruptHandler 00C6  
                      ??_uartInit 0093                        _spiRecvLen 0028  
                         postdec1 000FE5                           postdec2 000FDD  
                      _spiRecvPtr 0027                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                  ??_uartRecvByte 006B                        _spiSendPtr 0026  
                  ??_uartSendByte 0069                       ?_fifoPutBuf 0066  
                      fifoPut@put 0062                        ledInit@led 0060  
                       _PORTBbits 000F81                        ledInit@off 0064  
       __size_of_setDataAvailable 0004            __end_of_uartEnableRecv 1360  
          __end_of_uartEnableSend 13B8                        ledTact@led 0060  
                       _TRISAbits 000F92                         _TRISBbits 000F93  
                       _TRISCbits 000F94          __end_ofi2_uartEnableSend 14A8  
               ?_encodeSendBuffer 0001                ??_encodeSendBuffer 0001  
               ?_decodeRecvBuffer 0001                    _uartRecvBuffer 0400  
                       i2_fifoGet 0D56                         i2_fifoPut 0E34  
                  __end_of_EERead 15FE                ??_decodeRecvBuffer 0060  
          ??_uartInterruptHandler 000A                    _uartSendBuffer 0300  
                   i2fifoGet@fifo 0001                      ??_InitSystem 0067  
                  __end_of_ledOff 159C                   ?_uartEnableRecv 0060  
                 ?_uartEnableSend 0060               start_initialization 13B8  
                   i2fifoPut@fifo 0001                          ??_EERead 0060  
              __end_of_InitSystem 107C                        ?i2_fifoGet 0001  
                      ?i2_fifoPut 0001               __size_of_fifoPutBuf 003E  
                    ?_SetBaudRate 0074                    uartSendBuf@res 0070  
                  uartSendBuf@str 006D                        myDelay@per 0060  
               __size_of_InitUart 008C                 _GetBaudRateConfig 06B6  
              ?_GetBaudRateConfig 0060                          ??_ledOff 0062  
             ??_GetBaudRateConfig 006E                       __pbssCOMRAM 0026  
                   __pcstackBANK0 0060              __end_of_uartRecvByte 1644  
               __size_of_fifoInit 0078                 __size_of_ledFlash 0024  
            __end_of_uartSendByte 1562         __end_of_GetBaudRateConfig 08E4  
                       __pnvBANK0 00B8                         __pintcode 0008  
               __size_of_uartInit 0158                          ?_crcCalc 0001  
                        ?_fifoGet 0060                  __CFG_PRICLKEN$ON 000000  
                        ?_fifoPut 0060                          ?_ledInit 0060  
                        ?_ledTact 0060                  _setDataAvailable 1650  
                  SetBaudRate@osc 007A                          ?_myDelay 0060  
             _spiInterruptHandler 0F04                    __size_of_crcOk 0004  
                  __size_of_ledOn 0038                    fifoPutBuf@fifo 0066  
                  fifoPutBuf@size 006A                       ??i2_fifoGet 0005  
           i2uartEnableSend@onoff 0003                       ??i2_fifoPut 0004  
        ?_SetupInternalOscillator 0060                          _IPR1bits 000F9F  
                        _IPR3bits 000FA5                          _PIE1bits 000F9D  
                        _PIE3bits 000FA3              ?_spiInterruptHandler 0001  
                        _PIR1bits 000F9E                          _PIR2bits 000FA1  
                        _PIR3bits 000FA4                          _RCONbits 000FD0  
                __CFG_WDTPS$32768 000000                     ??_uartSendBuf 0070  
                       ledOff@led 0060                         ledInit@bm 0066  
                       ledInit@on 0062    SetupInternalOscillator@setBits 0062  
                    ??_fifoPutBuf 006B                  SetBaudRate@brg16 0081  
         __size_of_IntHighRoutine 008A                     _spiRecvBuffer 016A  
               ?i2_uartEnableSend 0001          uartInterruptHandler@fErr 0012  
              ??i2_uartEnableSend 0004          uartInterruptHandler@oErr 0013  
                   _spiSendBuffer 0100          uartInterruptHandler@data 0017  
                        _InitUart 111E          uartInterruptHandler@uart 0008  
      __size_of_GetBaudRateConfig 022E                __end_of_fifoPutBuf 1528  
                      _EECON1bits 000FA6             ??_spiInterruptHandler 0001  
     uartInterruptHandler@iRxFlag 0014       uartInterruptHandler@iTxFlag 0010  
                        __Hrparam 0000              __size_of_SetBaudRate 00A2  
         __size_of_LoadConfigData 000C                          __Lrparam 0000  
       __size_of_encodeSendBuffer 0002                __CFG_BOREN$SBORDIS 000000  
               __CFG_P2BMX$PORTB5 000000                  ??_uartEnableRecv 0063  
                ??_uartEnableSend 0063         __size_of_decodeRecvBuffer 0002  
                __size_of_crcCalc 0004                        _ANSELAbits 000F38  
                      _ANSELCbits 000F3A                  __size_of_fifoGet 00FE  
             __end_of_uartSendBuf 14EA                  __size_of_fifoPut 00F6  
                __size_of_ledInit 0062                  __size_of_ledTact 0126  
           __size_of_uartRecvByte 0022                  __size_of_myDelay 0050  
           __size_of_uartSendByte 003A                          _fifoInit 122A  
                        _ledFlash 15FE                          __ptext10 159C  
                        __ptext11 1562                          __ptext20 1360  
                        __ptext12 15FE                          __ptext21 1304  
                        __ptext13 165C                          __ptext30 0E34  
                        __ptext22 0FCA                          __ptext14 1654  
                        __ptext31 0D56                          __ptext23 12A2  
                        __ptext15 111E                          __ptext32 0F04  
                        __ptext24 11AA                          __ptext16 08E4  
                        __ptext33 165E                          __ptext25 1644  
                        __ptext17 122A                          __ptext34 1658  
                        __ptext26 15D4                          __ptext18 107C  
                        __ptext19 06B6                          __ptext28 0484  
                        __ptext29 145E   __end_of_SetupInternalOscillator 122A  
                     _OSCCON2bits 000FD2                     fifoPutBuf@buf 0068  
                   __size_of_main 03EE                          crcOk@crc 0001  
            i2uartEnableSend@uart 0001     __size_of_uartInterruptHandler 0232  
                        _uartInit 08E4                          ledOn@led 0060  
                        int$flags 003D                      uartInit@baud 0085  
                    uartInit@uart 0082                      _spiReadWrite 0029  
                    _uartRecvByte 1622                      _uartSendByte 1528  
                    fifoInit@fifo 0060                      fifoInit@size 0064  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
                        myDelay@i 0064               uartEnableRecv@onoff 0062  
                        intlevel2 0000               uartEnableSend@onoff 0062  
        __end_of_setDataAvailable 1654                        _RCSTA1bits 000FAB  
                      _RCSTA2bits 000F71                       fifoGet@fifo 0060  
                      _OSCCONbits 000FD3                       _uartSendBuf 14A8  
                     fifoInit@buf 0062     uartInterruptHandler@iRxEnable 0011  
                     ledFlash@led 0060     uartInterruptHandler@iTxEnable 000D  
                  _IntHighRoutine 0008                       fifoPut@fifo 0060  
               __CFG_T3CMX$PORTC0 000000                 __CFG_FOSC$INTIO67 000000  
    SetupInternalOscillator@enpll 0060                    _LoadConfigData 1644  
                _encodeSendBuffer 165E  
