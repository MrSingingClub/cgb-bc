

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue May 09 21:29:02 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           ; Version 1.42
    41                           ; Generated 13/04/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F25K22 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	nvCOMRAM
    76  000039                     __pnvCOMRAM:
    77                           	opt stack 0
    78  000039                     _adr:
    79                           	opt stack 0
    80  000039                     	ds	1
    81  0000                     _ANSELCbits	set	3898
    82  0000                     _ANSELAbits	set	3896
    83  0000                     _PIR2bits	set	4001
    84  0000                     _EECON2	set	4007
    85  0000                     _EECON1bits	set	4006
    86  0000                     _EEDATA	set	4008
    87  0000                     _EEADR	set	4009
    88  0000                     _LATA	set	3977
    89  0000                     _PIR3bits	set	4004
    90  0000                     _PIR1bits	set	3998
    91  0000                     _PIE3bits	set	4003
    92  0000                     _PIE1bits	set	3997
    93  0000                     _SPBRG2	set	3957
    94  0000                     _SPBRGH2	set	3958
    95  0000                     _BAUDCON2bits	set	3952
    96  0000                     _SPBRG1	set	4015
    97  0000                     _SPBRGH1	set	4016
    98  0000                     _BAUDCON1bits	set	4024
    99  0000                     _IPR3bits	set	4005
   100  0000                     _RCSTA2bits	set	3953
   101  0000                     _TXSTA2bits	set	3954
   102  0000                     _IPR1bits	set	3999
   103  0000                     _RCSTA1bits	set	4011
   104  0000                     _TXSTA1bits	set	4012
   105  0000                     _TRISCbits	set	3988
   106  0000                     _TRISBbits	set	3987
   107  0000                     _TRISAbits	set	3986
   108  0000                     _INTCONbits	set	4082
   109  0000                     _RCONbits	set	4048
   110  0000                     _PIE5	set	3965
   111  0000                     _PIE4	set	3962
   112  0000                     _PIE3	set	4003
   113  0000                     _PIE2	set	4000
   114  0000                     _PIE1	set	3997
   115  0000                     _INTCON3	set	4080
   116  0000                     _INTCON	set	4082
   117  0000                     _OSCCON2bits	set	4050
   118  0000                     _OSCTUNEbits	set	3995
   119  0000                     _OSCCONbits	set	4051
   120  0000                     _TXSTA2	set	3954
   121  0000                     _RCSTA2	set	3953
   122  0000                     _TXSTA1	set	4012
   123  0000                     _RCSTA1	set	4011
   124  0000                     _RCREG2	set	3956
   125  0000                     _TXREG2	set	3955
   126  0000                     _RCREG1	set	4014
   127  0000                     _TXREG1	set	4013
   128  0000                     _LATB	set	3978
   129                           
   130                           ; #config settings
   131  0000                     
   132                           	psect	cinit
   133  000F16                     __pcinit:
   134                           	opt stack 0
   135  000F16                     start_initialization:
   136                           	opt stack 0
   137  000F16                     __initialization:
   138                           	opt stack 0
   139                           
   140                           ; Clear objects allocated to BANK1 (256 bytes)
   141  000F16  EE01  F000         	lfsr	0,__pbssBANK1
   142  000F1A  EE11 F000          	lfsr	1,256
   143  000F1E                     clear_0:
   144  000F1E  6AEE               	clrf	postinc0,c
   145  000F20  50E5               	movf	postdec1,w,c
   146  000F22  50E1               	movf	fsr1l,w,c
   147  000F24  E1FC               	bnz	clear_0
   148  000F26  50E2               	movf	fsr1h,w,c
   149  000F28  E1FA               	bnz	clear_0
   150                           
   151                           ; Clear objects allocated to BANK0 (25 bytes)
   152  000F2A  EE00  F093         	lfsr	0,__pbssBANK0
   153  000F2E  0E19               	movlw	25
   154  000F30                     clear_1:
   155  000F30  6AEE               	clrf	postinc0,c
   156  000F32  06E8               	decf	wreg,f,c
   157  000F34  E1FD               	bnz	clear_1
   158                           
   159                           ; Clear objects allocated to COMRAM (18 bytes)
   160  000F36  EE00  F027         	lfsr	0,__pbssCOMRAM
   161  000F3A  0E12               	movlw	18
   162  000F3C                     clear_2:
   163  000F3C  6AEE               	clrf	postinc0,c
   164  000F3E  06E8               	decf	wreg,f,c
   165  000F40  E1FD               	bnz	clear_2
   166  000F42                     end_of_initialization:
   167                           	opt stack 0
   168  000F42                     __end_of__initialization:
   169                           	opt stack 0
   170  000F42  903A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   171  000F44  923A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   172  000F46  0E00               	movlw	low (__Lmediumconst shr (0+16))
   173  000F48  6EF8               	movwf	tblptru,c
   174  000F4A  0100               	movlb	0
   175  000F4C  EF92  F004         	goto	_main	;jump to C main() function
   176                           tblptru	equ	0xFF8
   177                           postinc0	equ	0xFEE
   178                           wreg	equ	0xFE8
   179                           postdec1	equ	0xFE5
   180                           fsr1h	equ	0xFE2
   181                           fsr1l	equ	0xFE1
   182                           
   183                           	psect	bssCOMRAM
   184  000027                     __pbssCOMRAM:
   185                           	opt stack 0
   186  000027                     _ledTx:
   187                           	opt stack 0
   188  000027                     	ds	9
   189  000030                     _ledRx:
   190                           	opt stack 0
   191  000030                     	ds	9
   192                           tblptru	equ	0xFF8
   193                           postinc0	equ	0xFEE
   194                           wreg	equ	0xFE8
   195                           postdec1	equ	0xFE5
   196                           fsr1h	equ	0xFE2
   197                           fsr1l	equ	0xFE1
   198                           
   199                           	psect	bssBANK0
   200  000093                     __pbssBANK0:
   201                           	opt stack 0
   202  000093                     _uart:
   203                           	opt stack 0
   204  000093                     	ds	25
   205                           tblptru	equ	0xFF8
   206                           postinc0	equ	0xFEE
   207                           wreg	equ	0xFE8
   208                           postdec1	equ	0xFE5
   209                           fsr1h	equ	0xFE2
   210                           fsr1l	equ	0xFE1
   211                           
   212                           	psect	bssBANK1
   213  000100                     __pbssBANK1:
   214                           	opt stack 0
   215  000100                     _uartRecvBuffer:
   216                           	opt stack 0
   217  000100                     	ds	128
   218  000180                     _uartSendBuffer:
   219                           	opt stack 0
   220  000180                     	ds	128
   221                           tblptru	equ	0xFF8
   222                           postinc0	equ	0xFEE
   223                           wreg	equ	0xFE8
   224                           postdec1	equ	0xFE5
   225                           fsr1h	equ	0xFE2
   226                           fsr1l	equ	0xFE1
   227                           
   228                           	psect	cstackBANK0
   229  000060                     __pcstackBANK0:
   230                           	opt stack 0
   231  000060                     ??_SetupInternalOscillator:
   232  000060                     EERead@adresse:
   233                           	opt stack 0
   234  000060                     fifoInit@fifo:
   235                           	opt stack 0
   236  000060                     uartInitHalfDuplex@uart:
   237                           	opt stack 0
   238  000060                     uartEnableSend@uart:
   239                           	opt stack 0
   240  000060                     uartEnableRecv@uart:
   241                           	opt stack 0
   242  000060                     ledInit@led:
   243                           	opt stack 0
   244  000060                     ledOn@led:
   245                           	opt stack 0
   246  000060                     ledOff@led:
   247                           	opt stack 0
   248  000060                     ledFlash@led:
   249                           	opt stack 0
   250  000060                     ledTact@led:
   251                           	opt stack 0
   252  000060                     myDelay@per:
   253                           	opt stack 0
   254  000060                     GetBaudRateConfig@rate:
   255                           	opt stack 0
   256                           
   257                           ; 4 bytes @ 0x0
   258  000060                     	ds	1
   259  000061                     SetupInternalOscillator@setBits:
   260                           	opt stack 0
   261  000061                     EERead@orgGIE:
   262                           	opt stack 0
   263                           
   264                           ; 1 bytes @ 0x1
   265  000061                     	ds	1
   266  000062                     uartEnableSend@onoff:
   267                           	opt stack 0
   268  000062                     uartEnableRecv@onoff:
   269                           	opt stack 0
   270  000062                     fifoInit@buf:
   271                           	opt stack 0
   272  000062                     uartInitHalfDuplex@port:
   273                           	opt stack 0
   274  000062                     ledInit@on:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x2
   278  000062                     	ds	2
   279  000064                     fifoInit@size:
   280                           	opt stack 0
   281  000064                     uartInitHalfDuplex@bt:
   282                           	opt stack 0
   283  000064                     myDelay@i:
   284                           	opt stack 0
   285  000064                     ledInit@off:
   286                           	opt stack 0
   287  000064                     GetBaudRateConfig@osc:
   288                           	opt stack 0
   289                           
   290                           ; 4 bytes @ 0x4
   291  000064                     	ds	1
   292  000065                     ??_uartInitHalfDuplex:
   293                           
   294                           ; 1 bytes @ 0x5
   295  000065                     	ds	1
   296  000066                     ledInit@bm:
   297                           	opt stack 0
   298                           
   299                           ; 1 bytes @ 0x6
   300  000066                     	ds	2
   301  000068                     GetBaudRateConfig@setBRG16:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0x8
   305  000068                     	ds	2
   306  00006A                     GetBaudRateConfig@brgh:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0xA
   310  00006A                     	ds	2
   311  00006C                     GetBaudRateConfig@brgl:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0xC
   315  00006C                     	ds	2
   316  00006E                     ??_GetBaudRateConfig:
   317                           
   318                           ; 1 bytes @ 0xE
   319  00006E                     	ds	4
   320  000072                     GetBaudRateConfig@brg:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0x12
   324  000072                     	ds	2
   325  000074                     SetBaudRate@uart:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x14
   329  000074                     	ds	2
   330  000076                     SetBaudRate@rate:
   331                           	opt stack 0
   332                           
   333                           ; 4 bytes @ 0x16
   334  000076                     	ds	4
   335  00007A                     SetBaudRate@osc:
   336                           	opt stack 0
   337                           
   338                           ; 4 bytes @ 0x1A
   339  00007A                     	ds	4
   340  00007E                     SetBaudRate@o:
   341                           	opt stack 0
   342                           
   343                           ; 1 bytes @ 0x1E
   344  00007E                     	ds	1
   345  00007F                     SetBaudRate@h:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0x1F
   349  00007F                     	ds	1
   350  000080                     SetBaudRate@l:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x20
   354  000080                     	ds	1
   355  000081                     SetBaudRate@brg16:
   356                           	opt stack 0
   357                           
   358                           ; 1 bytes @ 0x21
   359  000081                     	ds	1
   360  000082                     uartInit@uart:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x22
   364  000082                     	ds	2
   365  000084                     uartInit@num:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x24
   369  000084                     	ds	1
   370  000085                     uartInit@baud:
   371                           	opt stack 0
   372                           
   373                           ; 4 bytes @ 0x25
   374  000085                     	ds	4
   375  000089                     uartInit@osc:
   376                           	opt stack 0
   377                           
   378                           ; 4 bytes @ 0x29
   379  000089                     	ds	4
   380  00008D                     uartInit@sendbuf:
   381                           	opt stack 0
   382                           
   383                           ; 2 bytes @ 0x2D
   384  00008D                     	ds	2
   385  00008F                     uartInit@sendSize:
   386                           	opt stack 0
   387                           
   388                           ; 1 bytes @ 0x2F
   389  00008F                     	ds	1
   390  000090                     uartInit@recvbuf:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x30
   394  000090                     	ds	2
   395  000092                     uartInit@recvSize:
   396                           	opt stack 0
   397                           
   398                           ; 1 bytes @ 0x32
   399  000092                     	ds	1
   400                           tblptru	equ	0xFF8
   401                           postinc0	equ	0xFEE
   402                           wreg	equ	0xFE8
   403                           postdec1	equ	0xFE5
   404                           fsr1h	equ	0xFE2
   405                           fsr1l	equ	0xFE1
   406                           
   407                           	psect	cstackCOMRAM
   408  000001                     __pcstackCOMRAM:
   409                           	opt stack 0
   410  000001                     fifoPut@fifo:
   411                           	opt stack 0
   412  000001                     fifoGet@fifo:
   413                           	opt stack 0
   414  000001                     i2uartEnableSend@uart:
   415                           	opt stack 0
   416                           
   417                           ; 2 bytes @ 0x0
   418  000001                     	ds	2
   419  000003                     fifoPut@put:
   420                           	opt stack 0
   421  000003                     i2uartEnableSend@onoff:
   422                           	opt stack 0
   423  000003                     fifoGet@get:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x2
   427  000003                     	ds	1
   428  000004                     ??_fifoPut:
   429  000004                     ??i2_uartEnableSend:
   430                           
   431                           ; 1 bytes @ 0x3
   432  000004                     	ds	1
   433  000005                     ??_fifoGet:
   434                           
   435                           ; 1 bytes @ 0x4
   436  000005                     	ds	3
   437  000008                     uartInterruptHandler@uart:
   438                           	opt stack 0
   439                           
   440                           ; 2 bytes @ 0x7
   441  000008                     	ds	2
   442  00000A                     ??_uartInterruptHandler:
   443                           
   444                           ; 1 bytes @ 0x9
   445  00000A                     	ds	3
   446  00000D                     uartInterruptHandler@iTxEnable:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0xC
   450  00000D                     	ds	1
   451  00000E                     uartInterruptHandler@txsta:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0xD
   455  00000E                     	ds	2
   456  000010                     uartInterruptHandler@iTxFlag:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0xF
   460  000010                     	ds	1
   461  000011                     uartInterruptHandler@iRxEnable:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x10
   465  000011                     	ds	1
   466  000012                     uartInterruptHandler@fErr:
   467                           	opt stack 0
   468                           
   469                           ; 1 bytes @ 0x11
   470  000012                     	ds	1
   471  000013                     uartInterruptHandler@oErr:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x12
   475  000013                     	ds	1
   476  000014                     uartInterruptHandler@iRxFlag:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x13
   480  000014                     	ds	1
   481  000015                     uartInterruptHandler@rcsta:
   482                           	opt stack 0
   483                           
   484                           ; 2 bytes @ 0x14
   485  000015                     	ds	2
   486  000017                     uartInterruptHandler@data:
   487                           	opt stack 0
   488                           
   489                           ; 1 bytes @ 0x16
   490  000017                     	ds	1
   491  000018                     ??_IntHighRoutine:
   492                           
   493                           ; 1 bytes @ 0x17
   494  000018                     	ds	14
   495  000026                     ??_uartEnableSend:
   496  000026                     ??_uartEnableRecv:
   497  000026                     SetupInternalOscillator@enpll:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x25
   501  000026                     	ds	1
   502  000027                     tblptru	equ	0xFF8
   503                           postinc0	equ	0xFEE
   504                           wreg	equ	0xFE8
   505                           postdec1	equ	0xFE5
   506                           fsr1h	equ	0xFE2
   507                           fsr1l	equ	0xFE1
   508                           
   509                           ; 1 bytes @ 0x26
   510 ;;
   511 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   512 ;;
   513 ;; *************** function _main *****************
   514 ;; Defined at:
   515 ;;		line 136 in file "main.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;		None
   518 ;; Auto vars:     Size  Location     Type
   519 ;;		None
   520 ;; Return value:  Size  Location     Type
   521 ;;                  1    wreg      void 
   522 ;; Registers used:
   523 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   524 ;; Tracked objects:
   525 ;;		On entry : 0/0
   526 ;;		On exit  : 0/0
   527 ;;		Unchanged: 0/0
   528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   529 ;;      Params:         0       0       0       0       0       0       0
   530 ;;      Locals:         0       0       0       0       0       0       0
   531 ;;      Temps:          0       0       0       0       0       0       0
   532 ;;      Totals:         0       0       0       0       0       0       0
   533 ;;Total ram usage:        0 bytes
   534 ;; Hardware stack levels required when called:    7
   535 ;; This function calls:
   536 ;;		_InitSystem
   537 ;;		_InitUart
   538 ;;		_ledFlash
   539 ;;		_ledOff
   540 ;;		_ledOn
   541 ;;		_ledTact
   542 ;;		_myDelay
   543 ;; This function is called by:
   544 ;;		Startup code after reset
   545 ;; This function uses a non-reentrant model
   546 ;;
   547                           
   548                           	psect	text0
   549  000924                     __ptext0:
   550                           	opt stack 0
   551  000924                     _main:
   552                           	opt stack 24
   553                           
   554                           ;main.c: 138: InitSystem();
   555                           
   556                           ;incstack = 0
   557  000924  EC9E  F005         	call	_InitSystem	;wreg free
   558                           
   559                           ;main.c: 140: ledOn(&ledRx);
   560  000928  0E30               	movlw	low _ledRx
   561  00092A  0100               	movlb	0	; () banked
   562  00092C  6F60               	movwf	ledOn@led& (0+255),b
   563  00092E  0E00               	movlw	high _ledRx
   564  000930  0100               	movlb	0	; () banked
   565  000932  6F61               	movwf	(ledOn@led+1)& (0+255),b
   566  000934  ECC5  F007         	call	_ledOn	;wreg free
   567                           
   568                           ;main.c: 141: ledOn(&ledTx);
   569  000938  0E27               	movlw	low _ledTx
   570  00093A  0100               	movlb	0	; () banked
   571  00093C  6F60               	movwf	ledOn@led& (0+255),b
   572  00093E  0E00               	movlw	high _ledTx
   573  000940  0100               	movlb	0	; () banked
   574  000942  6F61               	movwf	(ledOn@led+1)& (0+255),b
   575  000944  ECC5  F007         	call	_ledOn	;wreg free
   576                           
   577                           ;main.c: 143: InitUart();
   578  000948  EC47  F005         	call	_InitUart	;wreg free
   579                           
   580                           ;main.c: 144: myDelay(500);
   581  00094C  0EF4               	movlw	244
   582  00094E  0100               	movlb	0	; () banked
   583  000950  6F60               	movwf	myDelay@per& (0+255),b
   584  000952  0E01               	movlw	1
   585  000954  6F61               	movwf	(myDelay@per+1)& (0+255),b
   586  000956  0E00               	movlw	0
   587  000958  6F62               	movwf	(myDelay@per+2)& (0+255),b
   588  00095A  0E00               	movlw	0
   589  00095C  6F63               	movwf	(myDelay@per+3)& (0+255),b
   590  00095E  ECF0  F006         	call	_myDelay	;wreg free
   591                           
   592                           ;main.c: 146: ledOff(&ledRx);
   593  000962  0E30               	movlw	low _ledRx
   594  000964  0100               	movlb	0	; () banked
   595  000966  6F60               	movwf	ledOff@led& (0+255),b
   596  000968  0E00               	movlw	high _ledRx
   597  00096A  0100               	movlb	0	; () banked
   598  00096C  6F61               	movwf	(ledOff@led+1)& (0+255),b
   599  00096E  ECA8  F007         	call	_ledOff	;wreg free
   600                           
   601                           ;main.c: 147: ledOff(&ledTx);
   602  000972  0E27               	movlw	low _ledTx
   603  000974  0100               	movlb	0	; () banked
   604  000976  6F60               	movwf	ledOff@led& (0+255),b
   605  000978  0E00               	movlw	high _ledTx
   606  00097A  0100               	movlb	0	; () banked
   607  00097C  6F61               	movwf	(ledOff@led+1)& (0+255),b
   608  00097E  ECA8  F007         	call	_ledOff	;wreg free
   609  000982                     l3464:
   610                           
   611                           ;main.c: 151: {
   612                           ;main.c: 152: ledFlash(&ledRx);
   613  000982  0E30               	movlw	low _ledRx
   614  000984  0100               	movlb	0	; () banked
   615  000986  6F60               	movwf	ledFlash@led& (0+255),b
   616  000988  0E00               	movlw	high _ledRx
   617  00098A  0100               	movlb	0	; () banked
   618  00098C  6F61               	movwf	(ledFlash@led+1)& (0+255),b
   619  00098E  ECF6  F007         	call	_ledFlash	;wreg free
   620                           
   621                           ;main.c: 153: ledFlash(&ledTx);
   622  000992  0E27               	movlw	low _ledTx
   623  000994  0100               	movlb	0	; () banked
   624  000996  6F60               	movwf	ledFlash@led& (0+255),b
   625  000998  0E00               	movlw	high _ledTx
   626  00099A  0100               	movlb	0	; () banked
   627  00099C  6F61               	movwf	(ledFlash@led+1)& (0+255),b
   628  00099E  ECF6  F007         	call	_ledFlash	;wreg free
   629                           
   630                           ;main.c: 154: myDelay(500);
   631  0009A2  0EF4               	movlw	244
   632  0009A4  0100               	movlb	0	; () banked
   633  0009A6  6F60               	movwf	myDelay@per& (0+255),b
   634  0009A8  0E01               	movlw	1
   635  0009AA  6F61               	movwf	(myDelay@per+1)& (0+255),b
   636  0009AC  0E00               	movlw	0
   637  0009AE  6F62               	movwf	(myDelay@per+2)& (0+255),b
   638  0009B0  0E00               	movlw	0
   639  0009B2  6F63               	movwf	(myDelay@per+3)& (0+255),b
   640  0009B4  ECF0  F006         	call	_myDelay	;wreg free
   641                           
   642                           ;main.c: 155: ledTact(&ledRx);
   643  0009B8  0E30               	movlw	low _ledRx
   644  0009BA  0100               	movlb	0	; () banked
   645  0009BC  6F60               	movwf	ledTact@led& (0+255),b
   646  0009BE  0E00               	movlw	high _ledRx
   647  0009C0  0100               	movlb	0	; () banked
   648  0009C2  6F61               	movwf	(ledTact@led+1)& (0+255),b
   649  0009C4  EC25  F003         	call	_ledTact	;wreg free
   650                           
   651                           ;main.c: 156: ledTact(&ledTx);
   652  0009C8  0E27               	movlw	low _ledTx
   653  0009CA  0100               	movlb	0	; () banked
   654  0009CC  6F60               	movwf	ledTact@led& (0+255),b
   655  0009CE  0E00               	movlw	high _ledTx
   656  0009D0  0100               	movlb	0	; () banked
   657  0009D2  6F61               	movwf	(ledTact@led+1)& (0+255),b
   658  0009D4  EC25  F003         	call	_ledTact	;wreg free
   659  0009D8  D7D4               	goto	l3464
   660  0009DA                     __end_of_main:
   661                           	opt stack 0
   662                           tblptru	equ	0xFF8
   663                           postinc0	equ	0xFEE
   664                           wreg	equ	0xFE8
   665                           postdec1	equ	0xFE5
   666                           fsr1h	equ	0xFE2
   667                           fsr1l	equ	0xFE1
   668                           
   669 ;; *************** function _myDelay *****************
   670 ;; Defined at:
   671 ;;		line 126 in file "main.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;  per             4    0[BANK0 ] long 
   674 ;; Auto vars:     Size  Location     Type
   675 ;;  i               2    4[BANK0 ] int 
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      void 
   678 ;; Registers used:
   679 ;;		wreg, status,2, status,0
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   685 ;;      Params:         0       4       0       0       0       0       0
   686 ;;      Locals:         0       2       0       0       0       0       0
   687 ;;      Temps:          0       0       0       0       0       0       0
   688 ;;      Totals:         0       6       0       0       0       0       0
   689 ;;Total ram usage:        6 bytes
   690 ;; Hardware stack levels used:    1
   691 ;; Hardware stack levels required when called:    3
   692 ;; This function calls:
   693 ;;		Nothing
   694 ;; This function is called by:
   695 ;;		_main
   696 ;; This function uses a non-reentrant model
   697 ;;
   698                           
   699                           	psect	text1
   700  000DE0                     __ptext1:
   701                           	opt stack 0
   702  000DE0                     _myDelay:
   703                           	opt stack 27
   704                           
   705                           ;main.c: 128: int i;
   706                           ;main.c: 129: while (per--!=0)
   707                           
   708                           ;incstack = 0
   709  000DE0  D010               	goto	l3418
   710  000DE2                     l3414:
   711                           
   712                           ;main.c: 130: {
   713                           ;main.c: 131: i=16000000/4000;
   714  000DE2  0E0F               	movlw	15
   715  000DE4  0100               	movlb	0	; () banked
   716  000DE6  6F65               	movwf	(myDelay@i+1)& (0+255),b
   717  000DE8  0EA0               	movlw	160
   718  000DEA  6F64               	movwf	myDelay@i& (0+255),b
   719  000DEC                     l3416:
   720                           
   721                           ; BSR set to: 0
   722  000DEC  0100               	movlb	0	; () banked
   723  000DEE  0764               	decf	myDelay@i& (0+255),f,b
   724  000DF0  A0D8               	btfss	status,0,c
   725  000DF2  0765               	decf	(myDelay@i+1)& (0+255),f,b
   726  000DF4  0100               	movlb	0	; () banked
   727  000DF6  2964               	incf	myDelay@i& (0+255),w,b
   728  000DF8  E1F9               	bnz	l3416
   729  000DFA  0100               	movlb	0	; () banked
   730  000DFC  2965               	incf	(myDelay@i+1)& (0+255),w,b
   731  000DFE  A4D8               	btfss	status,2,c
   732  000E00  D7F5               	goto	l3416
   733  000E02                     l3418:
   734  000E02  0EFF               	movlw	255
   735  000E04  0100               	movlb	0	; () banked
   736  000E06  2760               	addwf	myDelay@per& (0+255),f,b
   737  000E08  0EFF               	movlw	255
   738  000E0A  2361               	addwfc	(myDelay@per+1)& (0+255),f,b
   739  000E0C  0EFF               	movlw	255
   740  000E0E  2362               	addwfc	(myDelay@per+2)& (0+255),f,b
   741  000E10  0EFF               	movlw	255
   742  000E12  2363               	addwfc	(myDelay@per+3)& (0+255),f,b
   743  000E14  0100               	movlb	0	; () banked
   744  000E16  2960               	incf	myDelay@per& (0+255),w,b
   745  000E18  E1E4               	bnz	l3414
   746  000E1A  0100               	movlb	0	; () banked
   747  000E1C  2961               	incf	(myDelay@per+1)& (0+255),w,b
   748  000E1E  E1E1               	bnz	l3414
   749  000E20  0100               	movlb	0	; () banked
   750  000E22  2962               	incf	(myDelay@per+2)& (0+255),w,b
   751  000E24  E1DE               	bnz	l3414
   752  000E26  0100               	movlb	0	; () banked
   753  000E28  2963               	incf	(myDelay@per+3)& (0+255),w,b
   754  000E2A  B4D8               	btfsc	status,2,c
   755  000E2C  0012               	return	
   756  000E2E  D7D9               	goto	l3414
   757  000E30                     __end_of_myDelay:
   758                           	opt stack 0
   759                           tblptru	equ	0xFF8
   760                           postinc0	equ	0xFEE
   761                           wreg	equ	0xFE8
   762                           postdec1	equ	0xFE5
   763                           fsr1h	equ	0xFE2
   764                           fsr1l	equ	0xFE1
   765                           status	equ	0xFD8
   766                           
   767 ;; *************** function _ledTact *****************
   768 ;; Defined at:
   769 ;;		line 52 in file "blink.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;  led             2    0[BANK0 ] PTR struct .
   772 ;;		 -> ledTx(9), ledRx(9), 
   773 ;; Auto vars:     Size  Location     Type
   774 ;;		None
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      void 
   777 ;; Registers used:
   778 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   784 ;;      Params:         0       2       0       0       0       0       0
   785 ;;      Locals:         0       0       0       0       0       0       0
   786 ;;      Temps:          0       2       0       0       0       0       0
   787 ;;      Totals:         0       4       0       0       0       0       0
   788 ;;Total ram usage:        4 bytes
   789 ;; Hardware stack levels used:    1
   790 ;; Hardware stack levels required when called:    3
   791 ;; This function calls:
   792 ;;		Nothing
   793 ;; This function is called by:
   794 ;;		_main
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           	psect	text2
   799  00064A                     __ptext2:
   800                           	opt stack 0
   801  00064A                     _ledTact:
   802                           	opt stack 27
   803                           
   804                           ;blink.c: 54: if (led->count>0) led->count--;
   805                           
   806                           ; BSR set to: 0
   807                           ;incstack = 0
   808  00064A  C060  FFD9         	movff	ledTact@led,fsr2l
   809  00064E  C061  FFDA         	movff	ledTact@led+1,fsr2h
   810  000652  0E01               	movlw	1
   811  000654  BEDB               	btfsc	plusw2,7,c
   812  000656  D00D               	goto	l378
   813  000658  0E01               	movlw	1
   814  00065A  50DB               	movf	plusw2,w,c
   815  00065C  E103               	bnz	u1020
   816  00065E  04DE               	decf	postinc2,w,c
   817  000660  A0D8               	btfss	status,0,c
   818  000662  D007               	goto	l378
   819  000664                     u1020:
   820  000664  C060  FFD9         	movff	ledTact@led,fsr2l
   821  000668  C061  FFDA         	movff	ledTact@led+1,fsr2h
   822  00066C  06DE               	decf	postinc2,f,c
   823  00066E  0E00               	movlw	0
   824  000670  5ADD               	subwfb	postdec2,f,c
   825  000672                     l378:
   826                           
   827                           ;blink.c: 55: if (led->count==0)
   828  000672  C060  FFD9         	movff	ledTact@led,fsr2l
   829  000676  C061  FFDA         	movff	ledTact@led+1,fsr2h
   830  00067A  50DE               	movf	postinc2,w,c
   831  00067C  10DE               	iorwf	postinc2,w,c
   832  00067E  A4D8               	btfss	status,2,c
   833  000680  0012               	return	
   834                           
   835                           ;blink.c: 56: {
   836                           ;blink.c: 57: if (led->on)
   837  000682  0100               	movlb	0	; () banked
   838  000684  EE20 F002          	lfsr	2,2
   839  000688  5160               	movf	ledTact@led& (0+255),w,b
   840  00068A  26D9               	addwf	fsr2l,f,c
   841  00068C  5161               	movf	(ledTact@led+1)& (0+255),w,b
   842  00068E  22DA               	addwfc	fsr2h,f,c
   843  000690  50DF               	movf	indf2,w,c
   844  000692  B4D8               	btfsc	status,2,c
   845  000694  D023               	goto	l3440
   846                           
   847                           ; BSR set to: 0
   848                           ;blink.c: 58: {
   849                           ;blink.c: 59: LATA&=~led->bitMask;
   850  000696  0100               	movlb	0	; () banked
   851  000698  EE20 F007          	lfsr	2,7
   852  00069C  5160               	movf	ledTact@led& (0+255),w,b
   853  00069E  26D9               	addwf	fsr2l,f,c
   854  0006A0  5161               	movf	(ledTact@led+1)& (0+255),w,b
   855  0006A2  22DA               	addwfc	fsr2h,f,c
   856  0006A4  50DF               	movf	indf2,w,c
   857  0006A6  0AFF               	xorlw	255
   858  0006A8  1689               	andwf	3977,f,c	;volatile
   859                           
   860                           ; BSR set to: 0
   861                           ;blink.c: 60: led->count=led->offTime;
   862  0006AA  0100               	movlb	0	; () banked
   863  0006AC  EE20 F005          	lfsr	2,5
   864  0006B0  5160               	movf	ledTact@led& (0+255),w,b
   865  0006B2  26D9               	addwf	fsr2l,f,c
   866  0006B4  5161               	movf	(ledTact@led+1)& (0+255),w,b
   867  0006B6  22DA               	addwfc	fsr2h,f,c
   868  0006B8  C060  FFE1         	movff	ledTact@led,fsr1l
   869  0006BC  C061  FFE2         	movff	ledTact@led+1,fsr1h
   870  0006C0  CFDE FFE6          	movff	postinc2,postinc1
   871  0006C4  CFDD FFE5          	movff	postdec2,postdec1
   872                           
   873                           ; BSR set to: 0
   874                           ;blink.c: 61: led->on=0;
   875  0006C8  0100               	movlb	0	; () banked
   876  0006CA  EE20 F002          	lfsr	2,2
   877  0006CE  5160               	movf	ledTact@led& (0+255),w,b
   878  0006D0  26D9               	addwf	fsr2l,f,c
   879  0006D2  5161               	movf	(ledTact@led+1)& (0+255),w,b
   880  0006D4  22DA               	addwfc	fsr2h,f,c
   881  0006D6  0E00               	movlw	0
   882  0006D8  6EDF               	movwf	indf2,c
   883                           
   884                           ;blink.c: 62: }
   885  0006DA  0012               	return	
   886  0006DC                     l3440:
   887                           
   888                           ; BSR set to: 0
   889                           ;blink.c: 63: else
   890                           ;blink.c: 64: {
   891                           ;blink.c: 65: if (led->mode==1 || led->mode==2) LATA|=led->bitMask;
   892  0006DC  0100               	movlb	0	; () banked
   893  0006DE  EE20 F008          	lfsr	2,8
   894  0006E2  5160               	movf	ledTact@led& (0+255),w,b
   895  0006E4  26D9               	addwf	fsr2l,f,c
   896  0006E6  5161               	movf	(ledTact@led+1)& (0+255),w,b
   897  0006E8  22DA               	addwfc	fsr2h,f,c
   898  0006EA  04DE               	decf	postinc2,w,c
   899  0006EC  B4D8               	btfsc	status,2,c
   900  0006EE  D00B               	goto	l3444
   901                           
   902                           ; BSR set to: 0
   903  0006F0  0100               	movlb	0	; () banked
   904  0006F2  EE20 F008          	lfsr	2,8
   905  0006F6  5160               	movf	ledTact@led& (0+255),w,b
   906  0006F8  26D9               	addwf	fsr2l,f,c
   907  0006FA  5161               	movf	(ledTact@led+1)& (0+255),w,b
   908  0006FC  22DA               	addwfc	fsr2h,f,c
   909  0006FE  0E02               	movlw	2
   910  000700  18DE               	xorwf	postinc2,w,c
   911  000702  A4D8               	btfss	status,2,c
   912  000704  D009               	goto	l3446
   913  000706                     l3444:
   914                           
   915                           ; BSR set to: 0
   916  000706  0100               	movlb	0	; () banked
   917  000708  EE20 F007          	lfsr	2,7
   918  00070C  5160               	movf	ledTact@led& (0+255),w,b
   919  00070E  26D9               	addwf	fsr2l,f,c
   920  000710  5161               	movf	(ledTact@led+1)& (0+255),w,b
   921  000712  22DA               	addwfc	fsr2h,f,c
   922  000714  50DF               	movf	indf2,w,c
   923  000716  1289               	iorwf	3977,f,c	;volatile
   924  000718                     l3446:
   925                           
   926                           ; BSR set to: 0
   927                           ;blink.c: 66: led->count=led->onTime;
   928  000718  0100               	movlb	0	; () banked
   929  00071A  EE20 F003          	lfsr	2,3
   930  00071E  5160               	movf	ledTact@led& (0+255),w,b
   931  000720  26D9               	addwf	fsr2l,f,c
   932  000722  5161               	movf	(ledTact@led+1)& (0+255),w,b
   933  000724  22DA               	addwfc	fsr2h,f,c
   934  000726  C060  FFE1         	movff	ledTact@led,fsr1l
   935  00072A  C061  FFE2         	movff	ledTact@led+1,fsr1h
   936  00072E  CFDE FFE6          	movff	postinc2,postinc1
   937  000732  CFDD FFE5          	movff	postdec2,postdec1
   938                           
   939                           ; BSR set to: 0
   940                           ;blink.c: 67: led->on=1;
   941  000736  0100               	movlb	0	; () banked
   942  000738  EE20 F002          	lfsr	2,2
   943  00073C  5160               	movf	ledTact@led& (0+255),w,b
   944  00073E  26D9               	addwf	fsr2l,f,c
   945  000740  5161               	movf	(ledTact@led+1)& (0+255),w,b
   946  000742  22DA               	addwfc	fsr2h,f,c
   947  000744  0E01               	movlw	1
   948  000746  6EDF               	movwf	indf2,c
   949                           
   950                           ; BSR set to: 0
   951                           ;blink.c: 68: if (led->mode==1) led->mode=0;
   952  000748  0100               	movlb	0	; () banked
   953  00074A  EE20 F008          	lfsr	2,8
   954  00074E  5160               	movf	ledTact@led& (0+255),w,b
   955  000750  26D9               	addwf	fsr2l,f,c
   956  000752  5161               	movf	(ledTact@led+1)& (0+255),w,b
   957  000754  22DA               	addwfc	fsr2h,f,c
   958  000756  04DE               	decf	postinc2,w,c
   959  000758  A4D8               	btfss	status,2,c
   960  00075A  0012               	return	
   961                           
   962                           ; BSR set to: 0
   963  00075C  0100               	movlb	0	; () banked
   964  00075E  EE20 F008          	lfsr	2,8
   965  000762  5160               	movf	ledTact@led& (0+255),w,b
   966  000764  26D9               	addwf	fsr2l,f,c
   967  000766  5161               	movf	(ledTact@led+1)& (0+255),w,b
   968  000768  22DA               	addwfc	fsr2h,f,c
   969  00076A  0E00               	movlw	0
   970  00076C  6EDF               	movwf	indf2,c
   971                           
   972                           ; BSR set to: 0
   973                           
   974                           ; BSR set to: 0
   975  00076E  0012               	return	
   976  000770                     __end_of_ledTact:
   977                           	opt stack 0
   978                           tblptru	equ	0xFF8
   979                           postinc0	equ	0xFEE
   980                           wreg	equ	0xFE8
   981                           postinc1	equ	0xFE6
   982                           postdec1	equ	0xFE5
   983                           fsr1h	equ	0xFE2
   984                           fsr1l	equ	0xFE1
   985                           indf2	equ	0xFDF
   986                           postinc2	equ	0xFDE
   987                           postdec2	equ	0xFDD
   988                           plusw2	equ	0xFDB
   989                           fsr2h	equ	0xFDA
   990                           fsr2l	equ	0xFD9
   991                           status	equ	0xFD8
   992                           
   993 ;; *************** function _ledOn *****************
   994 ;; Defined at:
   995 ;;		line 21 in file "blink.c"
   996 ;; Parameters:    Size  Location     Type
   997 ;;  led             2    0[BANK0 ] PTR struct .
   998 ;;		 -> ledTx(9), ledRx(9), 
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;		None
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      void 
  1003 ;; Registers used:
  1004 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1010 ;;      Params:         0       2       0       0       0       0       0
  1011 ;;      Locals:         0       0       0       0       0       0       0
  1012 ;;      Temps:          0       0       0       0       0       0       0
  1013 ;;      Totals:         0       2       0       0       0       0       0
  1014 ;;Total ram usage:        2 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; Hardware stack levels required when called:    3
  1017 ;; This function calls:
  1018 ;;		Nothing
  1019 ;; This function is called by:
  1020 ;;		_main
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024                           	psect	text3
  1025  000F8A                     __ptext3:
  1026                           	opt stack 0
  1027  000F8A                     _ledOn:
  1028                           	opt stack 27
  1029                           
  1030                           ;blink.c: 23: LATA|=led->bitMask;
  1031                           
  1032                           ;incstack = 0
  1033  000F8A  0100               	movlb	0	; () banked
  1034  000F8C  EE20 F007          	lfsr	2,7
  1035  000F90  5160               	movf	ledOn@led& (0+255),w,b
  1036  000F92  26D9               	addwf	fsr2l,f,c
  1037  000F94  5161               	movf	(ledOn@led+1)& (0+255),w,b
  1038  000F96  22DA               	addwfc	fsr2h,f,c
  1039  000F98  50DF               	movf	indf2,w,c
  1040  000F9A  1289               	iorwf	3977,f,c	;volatile
  1041                           
  1042                           ;blink.c: 24: led->on=1;
  1043  000F9C  0100               	movlb	0	; () banked
  1044  000F9E  EE20 F002          	lfsr	2,2
  1045  000FA2  5160               	movf	ledOn@led& (0+255),w,b
  1046  000FA4  26D9               	addwf	fsr2l,f,c
  1047  000FA6  5161               	movf	(ledOn@led+1)& (0+255),w,b
  1048  000FA8  22DA               	addwfc	fsr2h,f,c
  1049  000FAA  0E01               	movlw	1
  1050  000FAC  6EDF               	movwf	indf2,c
  1051                           
  1052                           ;blink.c: 25: led->mode=0;
  1053  000FAE  0100               	movlb	0	; () banked
  1054  000FB0  EE20 F008          	lfsr	2,8
  1055  000FB4  5160               	movf	ledOn@led& (0+255),w,b
  1056  000FB6  26D9               	addwf	fsr2l,f,c
  1057  000FB8  5161               	movf	(ledOn@led+1)& (0+255),w,b
  1058  000FBA  22DA               	addwfc	fsr2h,f,c
  1059  000FBC  0E00               	movlw	0
  1060  000FBE  6EDF               	movwf	indf2,c
  1061                           
  1062                           ; BSR set to: 0
  1063  000FC0  0012               	return		;funcret
  1064  000FC2                     __end_of_ledOn:
  1065                           	opt stack 0
  1066                           tblptru	equ	0xFF8
  1067                           postinc0	equ	0xFEE
  1068                           wreg	equ	0xFE8
  1069                           postinc1	equ	0xFE6
  1070                           postdec1	equ	0xFE5
  1071                           fsr1h	equ	0xFE2
  1072                           fsr1l	equ	0xFE1
  1073                           indf2	equ	0xFDF
  1074                           postinc2	equ	0xFDE
  1075                           postdec2	equ	0xFDD
  1076                           plusw2	equ	0xFDB
  1077                           fsr2h	equ	0xFDA
  1078                           fsr2l	equ	0xFD9
  1079                           status	equ	0xFD8
  1080                           
  1081 ;; *************** function _ledOff *****************
  1082 ;; Defined at:
  1083 ;;		line 28 in file "blink.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;  led             2    0[BANK0 ] PTR struct .
  1086 ;;		 -> ledTx(9), ledRx(9), 
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;		None
  1089 ;; Return value:  Size  Location     Type
  1090 ;;                  1    wreg      void 
  1091 ;; Registers used:
  1092 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1093 ;; Tracked objects:
  1094 ;;		On entry : 0/0
  1095 ;;		On exit  : 0/0
  1096 ;;		Unchanged: 0/0
  1097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1098 ;;      Params:         0       2       0       0       0       0       0
  1099 ;;      Locals:         0       0       0       0       0       0       0
  1100 ;;      Temps:          0       0       0       0       0       0       0
  1101 ;;      Totals:         0       2       0       0       0       0       0
  1102 ;;Total ram usage:        2 bytes
  1103 ;; Hardware stack levels used:    1
  1104 ;; Hardware stack levels required when called:    3
  1105 ;; This function calls:
  1106 ;;		Nothing
  1107 ;; This function is called by:
  1108 ;;		_main
  1109 ;; This function uses a non-reentrant model
  1110 ;;
  1111                           
  1112                           	psect	text4
  1113  000F50                     __ptext4:
  1114                           	opt stack 0
  1115  000F50                     _ledOff:
  1116                           	opt stack 27
  1117                           
  1118                           ;blink.c: 30: LATA&=~led->bitMask;
  1119                           
  1120                           ; BSR set to: 0
  1121                           ;incstack = 0
  1122  000F50  0100               	movlb	0	; () banked
  1123  000F52  EE20 F007          	lfsr	2,7
  1124  000F56  5160               	movf	ledOff@led& (0+255),w,b
  1125  000F58  26D9               	addwf	fsr2l,f,c
  1126  000F5A  5161               	movf	(ledOff@led+1)& (0+255),w,b
  1127  000F5C  22DA               	addwfc	fsr2h,f,c
  1128  000F5E  50DF               	movf	indf2,w,c
  1129  000F60  0AFF               	xorlw	255
  1130  000F62  1689               	andwf	3977,f,c	;volatile
  1131                           
  1132                           ;blink.c: 31: led->on=0;
  1133  000F64  0100               	movlb	0	; () banked
  1134  000F66  EE20 F002          	lfsr	2,2
  1135  000F6A  5160               	movf	ledOff@led& (0+255),w,b
  1136  000F6C  26D9               	addwf	fsr2l,f,c
  1137  000F6E  5161               	movf	(ledOff@led+1)& (0+255),w,b
  1138  000F70  22DA               	addwfc	fsr2h,f,c
  1139  000F72  0E00               	movlw	0
  1140  000F74  6EDF               	movwf	indf2,c
  1141                           
  1142                           ;blink.c: 32: led->mode=0;
  1143  000F76  0100               	movlb	0	; () banked
  1144  000F78  EE20 F008          	lfsr	2,8
  1145  000F7C  5160               	movf	ledOff@led& (0+255),w,b
  1146  000F7E  26D9               	addwf	fsr2l,f,c
  1147  000F80  5161               	movf	(ledOff@led+1)& (0+255),w,b
  1148  000F82  22DA               	addwfc	fsr2h,f,c
  1149  000F84  0E00               	movlw	0
  1150  000F86  6EDF               	movwf	indf2,c
  1151                           
  1152                           ; BSR set to: 0
  1153  000F88  0012               	return		;funcret
  1154  000F8A                     __end_of_ledOff:
  1155                           	opt stack 0
  1156                           tblptru	equ	0xFF8
  1157                           postinc0	equ	0xFEE
  1158                           wreg	equ	0xFE8
  1159                           postinc1	equ	0xFE6
  1160                           postdec1	equ	0xFE5
  1161                           fsr1h	equ	0xFE2
  1162                           fsr1l	equ	0xFE1
  1163                           indf2	equ	0xFDF
  1164                           postinc2	equ	0xFDE
  1165                           postdec2	equ	0xFDD
  1166                           plusw2	equ	0xFDB
  1167                           fsr2h	equ	0xFDA
  1168                           fsr2l	equ	0xFD9
  1169                           status	equ	0xFD8
  1170                           
  1171 ;; *************** function _ledFlash *****************
  1172 ;; Defined at:
  1173 ;;		line 46 in file "blink.c"
  1174 ;; Parameters:    Size  Location     Type
  1175 ;;  led             2    0[BANK0 ] PTR struct .
  1176 ;;		 -> ledTx(9), ledRx(9), 
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;		None
  1179 ;; Return value:  Size  Location     Type
  1180 ;;                  1    wreg      void 
  1181 ;; Registers used:
  1182 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1183 ;; Tracked objects:
  1184 ;;		On entry : 0/0
  1185 ;;		On exit  : 0/0
  1186 ;;		Unchanged: 0/0
  1187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1188 ;;      Params:         0       2       0       0       0       0       0
  1189 ;;      Locals:         0       0       0       0       0       0       0
  1190 ;;      Temps:          0       0       0       0       0       0       0
  1191 ;;      Totals:         0       2       0       0       0       0       0
  1192 ;;Total ram usage:        2 bytes
  1193 ;; Hardware stack levels used:    1
  1194 ;; Hardware stack levels required when called:    3
  1195 ;; This function calls:
  1196 ;;		Nothing
  1197 ;; This function is called by:
  1198 ;;		_main
  1199 ;; This function uses a non-reentrant model
  1200 ;;
  1201                           
  1202                           	psect	text5
  1203  000FEC                     __ptext5:
  1204                           	opt stack 0
  1205  000FEC                     _ledFlash:
  1206                           	opt stack 27
  1207                           
  1208                           ;blink.c: 48: led->mode=1;
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;incstack = 0
  1212  000FEC  0100               	movlb	0	; () banked
  1213  000FEE  EE20 F008          	lfsr	2,8
  1214  000FF2  5160               	movf	ledFlash@led& (0+255),w,b
  1215  000FF4  26D9               	addwf	fsr2l,f,c
  1216  000FF6  5161               	movf	(ledFlash@led+1)& (0+255),w,b
  1217  000FF8  22DA               	addwfc	fsr2h,f,c
  1218  000FFA  0E01               	movlw	1
  1219  000FFC  6EDF               	movwf	indf2,c
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;blink.c: 49: led->count=0;
  1223  000FFE  C060  FFD9         	movff	ledFlash@led,fsr2l
  1224  001002  C061  FFDA         	movff	ledFlash@led+1,fsr2h
  1225  001006  0E00               	movlw	0
  1226  001008  6EDE               	movwf	postinc2,c
  1227  00100A  0E00               	movlw	0
  1228  00100C  6EDD               	movwf	postdec2,c
  1229                           
  1230                           ; BSR set to: 0
  1231  00100E  0012               	return		;funcret
  1232  001010                     __end_of_ledFlash:
  1233                           	opt stack 0
  1234                           tblptru	equ	0xFF8
  1235                           postinc0	equ	0xFEE
  1236                           wreg	equ	0xFE8
  1237                           postinc1	equ	0xFE6
  1238                           postdec1	equ	0xFE5
  1239                           fsr1h	equ	0xFE2
  1240                           fsr1l	equ	0xFE1
  1241                           indf2	equ	0xFDF
  1242                           postinc2	equ	0xFDE
  1243                           postdec2	equ	0xFDD
  1244                           plusw2	equ	0xFDB
  1245                           fsr2h	equ	0xFDA
  1246                           fsr2l	equ	0xFD9
  1247                           status	equ	0xFD8
  1248                           
  1249 ;; *************** function _InitUart *****************
  1250 ;; Defined at:
  1251 ;;		line 108 in file "main.c"
  1252 ;; Parameters:    Size  Location     Type
  1253 ;;		None
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;		None
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  1    wreg      void 
  1258 ;; Registers used:
  1259 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1265 ;;      Params:         0       0       0       0       0       0       0
  1266 ;;      Locals:         0       0       0       0       0       0       0
  1267 ;;      Temps:          0       0       0       0       0       0       0
  1268 ;;      Totals:         0       0       0       0       0       0       0
  1269 ;;Total ram usage:        0 bytes
  1270 ;; Hardware stack levels used:    1
  1271 ;; Hardware stack levels required when called:    6
  1272 ;; This function calls:
  1273 ;;		_uartEnableRecv
  1274 ;;		_uartEnableSend
  1275 ;;		_uartInit
  1276 ;;		_uartInitHalfDuplex
  1277 ;; This function is called by:
  1278 ;;		_main
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281                           
  1282                           	psect	text6
  1283  000A8E                     __ptext6:
  1284                           	opt stack 0
  1285  000A8E                     _InitUart:
  1286                           	opt stack 24
  1287                           
  1288                           ;main.c: 110: uartInit(&(uart),1,9600,64000000,uartSendBuffer,128,uartRecvBuffer,128);
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;incstack = 0
  1292  000A8E  0E93               	movlw	low _uart
  1293  000A90  0100               	movlb	0	; () banked
  1294  000A92  6F82               	movwf	uartInit@uart& (0+255),b
  1295  000A94  0E00               	movlw	high _uart
  1296  000A96  0100               	movlb	0	; () banked
  1297  000A98  6F83               	movwf	(uartInit@uart+1)& (0+255),b
  1298  000A9A  0E01               	movlw	1
  1299  000A9C  0100               	movlb	0	; () banked
  1300  000A9E  6F84               	movwf	uartInit@num& (0+255),b
  1301  000AA0  0E80               	movlw	128
  1302  000AA2  0100               	movlb	0	; () banked
  1303  000AA4  6F85               	movwf	uartInit@baud& (0+255),b
  1304  000AA6  0E25               	movlw	37
  1305  000AA8  6F86               	movwf	(uartInit@baud+1)& (0+255),b
  1306  000AAA  0E00               	movlw	0
  1307  000AAC  6F87               	movwf	(uartInit@baud+2)& (0+255),b
  1308  000AAE  0E00               	movlw	0
  1309  000AB0  6F88               	movwf	(uartInit@baud+3)& (0+255),b
  1310  000AB2  0E00               	movlw	0
  1311  000AB4  0100               	movlb	0	; () banked
  1312  000AB6  6F89               	movwf	uartInit@osc& (0+255),b
  1313  000AB8  0E90               	movlw	144
  1314  000ABA  6F8A               	movwf	(uartInit@osc+1)& (0+255),b
  1315  000ABC  0ED0               	movlw	208
  1316  000ABE  6F8B               	movwf	(uartInit@osc+2)& (0+255),b
  1317  000AC0  0E03               	movlw	3
  1318  000AC2  6F8C               	movwf	(uartInit@osc+3)& (0+255),b
  1319  000AC4  0E80               	movlw	low _uartSendBuffer
  1320  000AC6  0100               	movlb	0	; () banked
  1321  000AC8  6F8D               	movwf	uartInit@sendbuf& (0+255),b
  1322  000ACA  0E01               	movlw	high _uartSendBuffer
  1323  000ACC  0100               	movlb	0	; () banked
  1324  000ACE  6F8E               	movwf	(uartInit@sendbuf+1)& (0+255),b
  1325  000AD0  0E80               	movlw	128
  1326  000AD2  0100               	movlb	0	; () banked
  1327  000AD4  6F8F               	movwf	uartInit@sendSize& (0+255),b
  1328  000AD6  0E00               	movlw	low _uartRecvBuffer
  1329  000AD8  0100               	movlb	0	; () banked
  1330  000ADA  6F90               	movwf	uartInit@recvbuf& (0+255),b
  1331  000ADC  0E01               	movlw	high _uartRecvBuffer
  1332  000ADE  0100               	movlb	0	; () banked
  1333  000AE0  6F91               	movwf	(uartInit@recvbuf+1)& (0+255),b
  1334  000AE2  0E80               	movlw	128
  1335  000AE4  0100               	movlb	0	; () banked
  1336  000AE6  6F92               	movwf	uartInit@recvSize& (0+255),b
  1337  000AE8  EC79  F002         	call	_uartInit	;wreg free
  1338                           
  1339                           ;main.c: 111: uartInitHalfDuplex(&(uart),&LATB,5);
  1340  000AEC  0E93               	movlw	low _uart
  1341  000AEE  0100               	movlb	0	; () banked
  1342  000AF0  6F60               	movwf	uartInitHalfDuplex@uart& (0+255),b
  1343  000AF2  0E00               	movlw	high _uart
  1344  000AF4  0100               	movlb	0	; () banked
  1345  000AF6  6F61               	movwf	(uartInitHalfDuplex@uart+1)& (0+255),b
  1346  000AF8  0E8A               	movlw	138
  1347  000AFA  0100               	movlb	0	; () banked
  1348  000AFC  6F62               	movwf	uartInitHalfDuplex@port& (0+255),b
  1349  000AFE  0E0F               	movlw	15
  1350  000B00  0100               	movlb	0	; () banked
  1351  000B02  6F63               	movwf	(uartInitHalfDuplex@port+1)& (0+255),b
  1352  000B04  0E05               	movlw	5
  1353  000B06  0100               	movlb	0	; () banked
  1354  000B08  6F64               	movwf	uartInitHalfDuplex@bt& (0+255),b
  1355  000B0A  ECED  F004         	call	_uartInitHalfDuplex	;wreg free
  1356                           
  1357                           ;main.c: 113: uartEnableSend(&(uart),1);
  1358  000B0E  0E93               	movlw	low _uart
  1359  000B10  0100               	movlb	0	; () banked
  1360  000B12  6F60               	movwf	uartEnableSend@uart& (0+255),b
  1361  000B14  0E00               	movlw	high _uart
  1362  000B16  0100               	movlb	0	; () banked
  1363  000B18  6F61               	movwf	(uartEnableSend@uart+1)& (0+255),b
  1364  000B1A  0E01               	movlw	1
  1365  000B1C  0100               	movlb	0	; () banked
  1366  000B1E  6F62               	movwf	uartEnableSend@onoff& (0+255),b
  1367  000B20  EC40  F007         	call	_uartEnableSend	;wreg free
  1368                           
  1369                           ;main.c: 114: uartEnableRecv(&(uart),1);
  1370  000B24  0E93               	movlw	low _uart
  1371  000B26  0100               	movlb	0	; () banked
  1372  000B28  6F60               	movwf	uartEnableRecv@uart& (0+255),b
  1373  000B2A  0E00               	movlw	high _uart
  1374  000B2C  0100               	movlb	0	; () banked
  1375  000B2E  6F61               	movwf	(uartEnableRecv@uart+1)& (0+255),b
  1376  000B30  0E01               	movlw	1
  1377  000B32  0100               	movlb	0	; () banked
  1378  000B34  6F62               	movwf	uartEnableRecv@onoff& (0+255),b
  1379  000B36  EC18  F007         	call	_uartEnableRecv	;wreg free
  1380  000B3A  0012               	return		;funcret
  1381  000B3C                     __end_of_InitUart:
  1382                           	opt stack 0
  1383                           tblptru	equ	0xFF8
  1384                           postinc0	equ	0xFEE
  1385                           wreg	equ	0xFE8
  1386                           postinc1	equ	0xFE6
  1387                           postdec1	equ	0xFE5
  1388                           fsr1h	equ	0xFE2
  1389                           fsr1l	equ	0xFE1
  1390                           indf2	equ	0xFDF
  1391                           postinc2	equ	0xFDE
  1392                           postdec2	equ	0xFDD
  1393                           plusw2	equ	0xFDB
  1394                           fsr2h	equ	0xFDA
  1395                           fsr2l	equ	0xFD9
  1396                           status	equ	0xFD8
  1397                           
  1398 ;; *************** function _uartInitHalfDuplex *****************
  1399 ;; Defined at:
  1400 ;;		line 130 in file "uart.c"
  1401 ;; Parameters:    Size  Location     Type
  1402 ;;  uart            2    0[BANK0 ] PTR struct .
  1403 ;;		 -> uart(25), 
  1404 ;;  port            2    2[BANK0 ] PTR volatile unsigned ch
  1405 ;;		 -> LATB(1), 
  1406 ;;  bt              1    4[BANK0 ] unsigned char 
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;		None
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  1    wreg      void 
  1411 ;; Registers used:
  1412 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1418 ;;      Params:         0       5       0       0       0       0       0
  1419 ;;      Locals:         0       0       0       0       0       0       0
  1420 ;;      Temps:          0       3       0       0       0       0       0
  1421 ;;      Totals:         0       8       0       0       0       0       0
  1422 ;;Total ram usage:        8 bytes
  1423 ;; Hardware stack levels used:    1
  1424 ;; Hardware stack levels required when called:    3
  1425 ;; This function calls:
  1426 ;;		Nothing
  1427 ;; This function is called by:
  1428 ;;		_InitUart
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text7
  1433  0009DA                     __ptext7:
  1434                           	opt stack 0
  1435  0009DA                     _uartInitHalfDuplex:
  1436                           	opt stack 26
  1437                           
  1438                           ;uart.c: 132: uart->hdPort=port;
  1439                           
  1440                           ;incstack = 0
  1441  0009DA  0100               	movlb	0	; () banked
  1442  0009DC  EE20 F015          	lfsr	2,21
  1443  0009E0  5160               	movf	uartInitHalfDuplex@uart& (0+255),w,b
  1444  0009E2  26D9               	addwf	fsr2l,f,c
  1445  0009E4  5161               	movf	(uartInitHalfDuplex@uart+1)& (0+255),w,b
  1446  0009E6  22DA               	addwfc	fsr2h,f,c
  1447  0009E8  C062  FFDE         	movff	uartInitHalfDuplex@port,postinc2
  1448  0009EC  C063  FFDD         	movff	uartInitHalfDuplex@port+1,postdec2
  1449                           
  1450                           ;uart.c: 133: uart->hdOnMask=1 << bt;
  1451  0009F0  0100               	movlb	0	; () banked
  1452  0009F2  EE20 F017          	lfsr	2,23
  1453  0009F6  5160               	movf	uartInitHalfDuplex@uart& (0+255),w,b
  1454  0009F8  26D9               	addwf	fsr2l,f,c
  1455  0009FA  5161               	movf	(uartInitHalfDuplex@uart+1)& (0+255),w,b
  1456  0009FC  22DA               	addwfc	fsr2h,f,c
  1457  0009FE  C064  F065         	movff	uartInitHalfDuplex@bt,??_uartInitHalfDuplex
  1458  000A02  0E01               	movlw	1
  1459  000A04  0100               	movlb	0	; () banked
  1460  000A06  6F66               	movwf	(??_uartInitHalfDuplex+1)& (0+255),b
  1461  000A08  0100               	movlb	0	; () banked
  1462  000A0A  2B65               	incf	??_uartInitHalfDuplex& (0+255),f,b
  1463  000A0C  D003               	goto	u994
  1464  000A0E                     u995:
  1465  000A0E  0100               	movlb	0	; () banked
  1466  000A10  90D8               	bcf	status,0,c
  1467  000A12  3766               	rlcf	(??_uartInitHalfDuplex+1)& (0+255),f,b
  1468  000A14                     u994:
  1469  000A14  0100               	movlb	0	; () banked
  1470  000A16  2F65               	decfsz	??_uartInitHalfDuplex& (0+255),f,b
  1471  000A18  D7FA               	goto	u995
  1472  000A1A  0100               	movlb	0	; () banked
  1473  000A1C  5166               	movf	(??_uartInitHalfDuplex+1)& (0+255),w,b
  1474  000A1E  6EDF               	movwf	indf2,c
  1475                           
  1476                           ; BSR set to: 0
  1477                           ;uart.c: 134: uart->hdOffMask=~uart->hdOnMask;
  1478  000A20  0100               	movlb	0	; () banked
  1479  000A22  EE20 F018          	lfsr	2,24
  1480  000A26  5160               	movf	uartInitHalfDuplex@uart& (0+255),w,b
  1481  000A28  26D9               	addwf	fsr2l,f,c
  1482  000A2A  5161               	movf	(uartInitHalfDuplex@uart+1)& (0+255),w,b
  1483  000A2C  22DA               	addwfc	fsr2h,f,c
  1484  000A2E  0100               	movlb	0	; () banked
  1485  000A30  EE10 F017          	lfsr	1,23
  1486  000A34  5160               	movf	uartInitHalfDuplex@uart& (0+255),w,b
  1487  000A36  26E1               	addwf	fsr1l,f,c
  1488  000A38  5161               	movf	(uartInitHalfDuplex@uart+1)& (0+255),w,b
  1489  000A3A  22E2               	addwfc	fsr1h,f,c
  1490  000A3C  50E7               	movf	indf1,w,c
  1491  000A3E  0AFF               	xorlw	255
  1492  000A40  6EDF               	movwf	indf2,c
  1493                           
  1494                           ; BSR set to: 0
  1495                           ;uart.c: 135: uart->hdFlag=1;
  1496  000A42  0100               	movlb	0	; () banked
  1497  000A44  EE20 F014          	lfsr	2,20
  1498  000A48  5160               	movf	uartInitHalfDuplex@uart& (0+255),w,b
  1499  000A4A  26D9               	addwf	fsr2l,f,c
  1500  000A4C  5161               	movf	(uartInitHalfDuplex@uart+1)& (0+255),w,b
  1501  000A4E  22DA               	addwfc	fsr2h,f,c
  1502  000A50  0E01               	movlw	1
  1503  000A52  6EDF               	movwf	indf2,c
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;uart.c: 136: *(uart->hdPort) &= uart->hdOffMask;
  1507  000A54  0100               	movlb	0	; () banked
  1508  000A56  EE20 F018          	lfsr	2,24
  1509  000A5A  5160               	movf	uartInitHalfDuplex@uart& (0+255),w,b
  1510  000A5C  26D9               	addwf	fsr2l,f,c
  1511  000A5E  5161               	movf	(uartInitHalfDuplex@uart+1)& (0+255),w,b
  1512  000A60  22DA               	addwfc	fsr2h,f,c
  1513  000A62  50DF               	movf	indf2,w,c
  1514  000A64  0100               	movlb	0	; () banked
  1515  000A66  6F65               	movwf	??_uartInitHalfDuplex& (0+255),b
  1516  000A68  0100               	movlb	0	; () banked
  1517  000A6A  EE20 F015          	lfsr	2,21
  1518  000A6E  5160               	movf	uartInitHalfDuplex@uart& (0+255),w,b
  1519  000A70  26D9               	addwf	fsr2l,f,c
  1520  000A72  5161               	movf	(uartInitHalfDuplex@uart+1)& (0+255),w,b
  1521  000A74  22DA               	addwfc	fsr2h,f,c
  1522  000A76  CFDE F066          	movff	postinc2,??_uartInitHalfDuplex+1
  1523  000A7A  CFDD F067          	movff	postdec2,??_uartInitHalfDuplex+2
  1524  000A7E  C066  FFD9         	movff	??_uartInitHalfDuplex+1,fsr2l
  1525  000A82  C067  FFDA         	movff	??_uartInitHalfDuplex+2,fsr2h
  1526  000A86  0100               	movlb	0	; () banked
  1527  000A88  5165               	movf	??_uartInitHalfDuplex& (0+255),w,b
  1528  000A8A  16DF               	andwf	indf2,f,c
  1529                           
  1530                           ; BSR set to: 0
  1531  000A8C  0012               	return		;funcret
  1532  000A8E                     __end_of_uartInitHalfDuplex:
  1533                           	opt stack 0
  1534                           tblptru	equ	0xFF8
  1535                           postinc0	equ	0xFEE
  1536                           wreg	equ	0xFE8
  1537                           indf1	equ	0xFE7
  1538                           postinc1	equ	0xFE6
  1539                           postdec1	equ	0xFE5
  1540                           fsr1h	equ	0xFE2
  1541                           fsr1l	equ	0xFE1
  1542                           indf2	equ	0xFDF
  1543                           postinc2	equ	0xFDE
  1544                           postdec2	equ	0xFDD
  1545                           plusw2	equ	0xFDB
  1546                           fsr2h	equ	0xFDA
  1547                           fsr2l	equ	0xFD9
  1548                           status	equ	0xFD8
  1549                           
  1550 ;; *************** function _uartInit *****************
  1551 ;; Defined at:
  1552 ;;		line 4 in file "uart.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;  uart            2   34[BANK0 ] PTR struct .
  1555 ;;		 -> uart(25), 
  1556 ;;  num             1   36[BANK0 ] unsigned char 
  1557 ;;  baud            4   37[BANK0 ] long 
  1558 ;;  osc             4   41[BANK0 ] long 
  1559 ;;  sendbuf         2   45[BANK0 ] PTR unsigned char 
  1560 ;;		 -> uartSendBuffer(128), 
  1561 ;;  sendSize        1   47[BANK0 ] unsigned char 
  1562 ;;  recvbuf         2   48[BANK0 ] PTR unsigned char 
  1563 ;;		 -> uartRecvBuffer(128), 
  1564 ;;  recvSize        1   50[BANK0 ] unsigned char 
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;  b16             1    0        unsigned char 
  1567 ;;  h               1    0        unsigned char 
  1568 ;;  l               1    0        unsigned char 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      void 
  1571 ;; Registers used:
  1572 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1578 ;;      Params:         0      17       0       0       0       0       0
  1579 ;;      Locals:         0       0       0       0       0       0       0
  1580 ;;      Temps:          0       0       0       0       0       0       0
  1581 ;;      Totals:         0      17       0       0       0       0       0
  1582 ;;Total ram usage:       17 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    5
  1585 ;; This function calls:
  1586 ;;		_SetBaudRate
  1587 ;;		_fifoInit
  1588 ;; This function is called by:
  1589 ;;		_InitUart
  1590 ;; This function uses a non-reentrant model
  1591 ;;
  1592                           
  1593                           	psect	text8
  1594  0004F2                     __ptext8:
  1595                           	opt stack 0
  1596  0004F2                     _uartInit:
  1597                           	opt stack 24
  1598                           
  1599                           ;uart.c: 6: uart->number=num;
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;incstack = 0
  1603  0004F2  0100               	movlb	0	; () banked
  1604  0004F4  EE20 F013          	lfsr	2,19
  1605  0004F8  5182               	movf	uartInit@uart& (0+255),w,b
  1606  0004FA  26D9               	addwf	fsr2l,f,c
  1607  0004FC  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  1608  0004FE  22DA               	addwfc	fsr2h,f,c
  1609  000500  C084  FFDF         	movff	uartInit@num,indf2
  1610                           
  1611                           ;uart.c: 7: char l;
  1612                           ;uart.c: 8: char h;
  1613                           ;uart.c: 9: char b16;
  1614                           ;uart.c: 11: switch (num)
  1615  000504  D072               	goto	l3316
  1616  000506                     l3262:
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;uart.c: 15: uart->txReg=&TXREG1;
  1620  000506  0100               	movlb	0	; () banked
  1621  000508  EE20 F00E          	lfsr	2,14
  1622  00050C  5182               	movf	uartInit@uart& (0+255),w,b
  1623  00050E  26D9               	addwf	fsr2l,f,c
  1624  000510  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  1625  000512  22DA               	addwfc	fsr2h,f,c
  1626  000514  0EAD               	movlw	173
  1627  000516  6EDE               	movwf	postinc2,c
  1628  000518  0E0F               	movlw	15
  1629  00051A  6EDD               	movwf	postdec2,c
  1630                           
  1631                           ;uart.c: 16: uart->rxReg=&RCREG1;
  1632  00051C  0100               	movlb	0	; () banked
  1633  00051E  EE20 F010          	lfsr	2,16
  1634  000522  5182               	movf	uartInit@uart& (0+255),w,b
  1635  000524  26D9               	addwf	fsr2l,f,c
  1636  000526  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  1637  000528  22DA               	addwfc	fsr2h,f,c
  1638  00052A  0EAE               	movlw	174
  1639  00052C  6EDE               	movwf	postinc2,c
  1640  00052E  0E0F               	movlw	15
  1641  000530  6EDD               	movwf	postdec2,c
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;uart.c: 18: ANSELCbits.ANSC6=0;
  1645  000532  010F               	movlb	15	; () banked
  1646  000534  9D3A               	bcf	58,6,b	;volatile
  1647                           
  1648                           ; BSR set to: 15
  1649                           ;uart.c: 19: ANSELCbits.ANSC7=0;
  1650  000536  010F               	movlb	15	; () banked
  1651  000538  9F3A               	bcf	58,7,b	;volatile
  1652                           
  1653                           ; BSR set to: 15
  1654                           ;uart.c: 20: TRISCbits.RC6=1;
  1655  00053A  8C94               	bsf	3988,6,c	;volatile
  1656                           
  1657                           ; BSR set to: 15
  1658                           ;uart.c: 21: TRISCbits.RC7=1;
  1659  00053C  8E94               	bsf	3988,7,c	;volatile
  1660                           
  1661                           ; BSR set to: 15
  1662                           ;uart.c: 24: TXSTA1bits.BRGH=0;
  1663  00053E  94AC               	bcf	4012,2,c	;volatile
  1664                           
  1665                           ; BSR set to: 15
  1666                           ;uart.c: 25: TXSTA1bits.SYNC=0;
  1667  000540  98AC               	bcf	4012,4,c	;volatile
  1668                           
  1669                           ; BSR set to: 15
  1670                           ;uart.c: 26: TXSTA1bits.TX9=0;
  1671  000542  9CAC               	bcf	4012,6,c	;volatile
  1672                           
  1673                           ; BSR set to: 15
  1674                           ;uart.c: 27: TXSTA1bits.TXEN=1;
  1675  000544  8AAC               	bsf	4012,5,c	;volatile
  1676                           
  1677                           ; BSR set to: 15
  1678                           ;uart.c: 28: RCSTA1bits.SPEN=1;
  1679  000546  8EAB               	bsf	4011,7,c	;volatile
  1680                           
  1681                           ; BSR set to: 15
  1682                           ;uart.c: 29: RCSTA1bits.CREN=1;
  1683  000548  88AB               	bsf	4011,4,c	;volatile
  1684                           
  1685                           ; BSR set to: 15
  1686                           ;uart.c: 31: SetBaudRate(uart,baud,osc);
  1687  00054A  C082  F074         	movff	uartInit@uart,SetBaudRate@uart
  1688  00054E  C083  F075         	movff	uartInit@uart+1,SetBaudRate@uart+1
  1689  000552  C085  F076         	movff	uartInit@baud,SetBaudRate@rate
  1690  000556  C086  F077         	movff	uartInit@baud+1,SetBaudRate@rate+1
  1691  00055A  C087  F078         	movff	uartInit@baud+2,SetBaudRate@rate+2
  1692  00055E  C088  F079         	movff	uartInit@baud+3,SetBaudRate@rate+3
  1693  000562  C089  F07A         	movff	uartInit@osc,SetBaudRate@osc
  1694  000566  C08A  F07B         	movff	uartInit@osc+1,SetBaudRate@osc+1
  1695  00056A  C08B  F07C         	movff	uartInit@osc+2,SetBaudRate@osc+2
  1696  00056E  C08C  F07D         	movff	uartInit@osc+3,SetBaudRate@osc+3
  1697  000572  ECF3  F005         	call	_SetBaudRate	;wreg free
  1698                           
  1699                           ;uart.c: 33: IPR1bits.TXIP=1;
  1700  000576  889F               	bsf	3999,4,c	;volatile
  1701                           
  1702                           ;uart.c: 34: IPR1bits.RCIP=1;
  1703  000578  8A9F               	bsf	3999,5,c	;volatile
  1704                           
  1705                           ;uart.c: 35: break;
  1706  00057A  D03F               	goto	l3318
  1707  00057C                     l3290:
  1708                           
  1709                           ;uart.c: 38: uart->txReg=&TXREG2;
  1710  00057C  0100               	movlb	0	; () banked
  1711  00057E  EE20 F00E          	lfsr	2,14
  1712  000582  5182               	movf	uartInit@uart& (0+255),w,b
  1713  000584  26D9               	addwf	fsr2l,f,c
  1714  000586  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  1715  000588  22DA               	addwfc	fsr2h,f,c
  1716  00058A  0E73               	movlw	115
  1717  00058C  6EDE               	movwf	postinc2,c
  1718  00058E  0E0F               	movlw	15
  1719  000590  6EDD               	movwf	postdec2,c
  1720                           
  1721                           ;uart.c: 39: uart->rxReg=&RCREG2;
  1722  000592  0100               	movlb	0	; () banked
  1723  000594  EE20 F010          	lfsr	2,16
  1724  000598  5182               	movf	uartInit@uart& (0+255),w,b
  1725  00059A  26D9               	addwf	fsr2l,f,c
  1726  00059C  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  1727  00059E  22DA               	addwfc	fsr2h,f,c
  1728  0005A0  0E74               	movlw	116
  1729  0005A2  6EDE               	movwf	postinc2,c
  1730  0005A4  0E0F               	movlw	15
  1731  0005A6  6EDD               	movwf	postdec2,c
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;uart.c: 41: TRISBbits.RB6=1;
  1735  0005A8  8C93               	bsf	3987,6,c	;volatile
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;uart.c: 42: TRISBbits.RB7=1;
  1739  0005AA  8E93               	bsf	3987,7,c	;volatile
  1740                           
  1741                           ; BSR set to: 0
  1742                           ;uart.c: 44: TXSTA2bits.BRGH=0;
  1743  0005AC  9472               	bcf	3954,2,c	;volatile
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;uart.c: 45: TXSTA2bits.SYNC=0;
  1747  0005AE  9872               	bcf	3954,4,c	;volatile
  1748                           
  1749                           ; BSR set to: 0
  1750                           ;uart.c: 46: TXSTA2bits.TX9=0;
  1751  0005B0  9C72               	bcf	3954,6,c	;volatile
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;uart.c: 47: TXSTA2bits.TXEN=1;
  1755  0005B2  8A72               	bsf	3954,5,c	;volatile
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;uart.c: 48: RCSTA2bits.SPEN=1;
  1759  0005B4  8E71               	bsf	3953,7,c	;volatile
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;uart.c: 49: RCSTA2bits.CREN=1;
  1763  0005B6  8871               	bsf	3953,4,c	;volatile
  1764                           
  1765                           ; BSR set to: 0
  1766                           ;uart.c: 51: SetBaudRate(uart,baud,osc);
  1767  0005B8  C082  F074         	movff	uartInit@uart,SetBaudRate@uart
  1768  0005BC  C083  F075         	movff	uartInit@uart+1,SetBaudRate@uart+1
  1769  0005C0  C085  F076         	movff	uartInit@baud,SetBaudRate@rate
  1770  0005C4  C086  F077         	movff	uartInit@baud+1,SetBaudRate@rate+1
  1771  0005C8  C087  F078         	movff	uartInit@baud+2,SetBaudRate@rate+2
  1772  0005CC  C088  F079         	movff	uartInit@baud+3,SetBaudRate@rate+3
  1773  0005D0  C089  F07A         	movff	uartInit@osc,SetBaudRate@osc
  1774  0005D4  C08A  F07B         	movff	uartInit@osc+1,SetBaudRate@osc+1
  1775  0005D8  C08B  F07C         	movff	uartInit@osc+2,SetBaudRate@osc+2
  1776  0005DC  C08C  F07D         	movff	uartInit@osc+3,SetBaudRate@osc+3
  1777  0005E0  ECF3  F005         	call	_SetBaudRate	;wreg free
  1778                           
  1779                           ;uart.c: 53: IPR3bits.TX2IP=1;
  1780  0005E4  88A5               	bsf	4005,4,c	;volatile
  1781                           
  1782                           ;uart.c: 54: IPR3bits.RC2IP=1;
  1783  0005E6  8AA5               	bsf	4005,5,c	;volatile
  1784                           
  1785                           ;uart.c: 56: }
  1786                           
  1787                           ;uart.c: 55: break;
  1788  0005E8  D008               	goto	l3318
  1789  0005EA                     l3316:
  1790  0005EA  0100               	movlb	0	; () banked
  1791  0005EC  5184               	movf	uartInit@num& (0+255),w,b
  1792                           
  1793                           ; Switch size 1, requested type "space"
  1794                           ; Number of cases is 2, Range of values is 1 to 2
  1795                           ; switch strategies available:
  1796                           ; Name         Instructions Cycles
  1797                           ; simple_byte            7     4 (average)
  1798                           ;	Chosen strategy is simple_byte
  1799  0005EE  0A01               	xorlw	1	; case 1
  1800  0005F0  B4D8               	btfsc	status,2,c
  1801  0005F2  D789               	goto	l3262
  1802  0005F4  0A03               	xorlw	3	; case 2
  1803  0005F6  B4D8               	btfsc	status,2,c
  1804  0005F8  D7C1               	goto	l3290
  1805  0005FA                     l3318:
  1806                           
  1807                           ;uart.c: 58: uart->status=0;
  1808  0005FA  0100               	movlb	0	; () banked
  1809  0005FC  EE20 F012          	lfsr	2,18
  1810  000600  5182               	movf	uartInit@uart& (0+255),w,b
  1811  000602  26D9               	addwf	fsr2l,f,c
  1812  000604  5183               	movf	(uartInit@uart+1)& (0+255),w,b
  1813  000606  22DA               	addwfc	fsr2h,f,c
  1814  000608  0E00               	movlw	0
  1815  00060A  6EDF               	movwf	indf2,c
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;uart.c: 60: fifoInit(&uart->sendFifo,sendbuf,sendSize);
  1819  00060C  C082  F060         	movff	uartInit@uart,fifoInit@fifo
  1820  000610  C083  F061         	movff	uartInit@uart+1,fifoInit@fifo+1
  1821  000614  C08D  F062         	movff	uartInit@sendbuf,fifoInit@buf
  1822  000618  C08E  F063         	movff	uartInit@sendbuf+1,fifoInit@buf+1
  1823  00061C  C08F  F064         	movff	uartInit@sendSize,fifoInit@size
  1824  000620  EC83  F006         	call	_fifoInit	;wreg free
  1825                           
  1826                           ;uart.c: 61: fifoInit(&uart->recvFifo,recvbuf,recvSize);
  1827  000624  0E06               	movlw	6
  1828  000626  0100               	movlb	0	; () banked
  1829  000628  2582               	addwf	uartInit@uart& (0+255),w,b
  1830  00062A  0100               	movlb	0	; () banked
  1831  00062C  6F60               	movwf	fifoInit@fifo& (0+255),b
  1832  00062E  0E00               	movlw	0
  1833  000630  0100               	movlb	0	; () banked
  1834  000632  2183               	addwfc	(uartInit@uart+1)& (0+255),w,b
  1835  000634  0100               	movlb	0	; () banked
  1836  000636  6F61               	movwf	(fifoInit@fifo+1)& (0+255),b
  1837  000638  C090  F062         	movff	uartInit@recvbuf,fifoInit@buf
  1838  00063C  C091  F063         	movff	uartInit@recvbuf+1,fifoInit@buf+1
  1839  000640  C092  F064         	movff	uartInit@recvSize,fifoInit@size
  1840  000644  EC83  F006         	call	_fifoInit	;wreg free
  1841  000648  0012               	return		;funcret
  1842  00064A                     __end_of_uartInit:
  1843                           	opt stack 0
  1844                           tblptru	equ	0xFF8
  1845                           postinc0	equ	0xFEE
  1846                           wreg	equ	0xFE8
  1847                           indf1	equ	0xFE7
  1848                           postinc1	equ	0xFE6
  1849                           postdec1	equ	0xFE5
  1850                           fsr1h	equ	0xFE2
  1851                           fsr1l	equ	0xFE1
  1852                           indf2	equ	0xFDF
  1853                           postinc2	equ	0xFDE
  1854                           postdec2	equ	0xFDD
  1855                           plusw2	equ	0xFDB
  1856                           fsr2h	equ	0xFDA
  1857                           fsr2l	equ	0xFD9
  1858                           status	equ	0xFD8
  1859                           
  1860 ;; *************** function _fifoInit *****************
  1861 ;; Defined at:
  1862 ;;		line 3 in file "fifo.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;  fifo            2    0[BANK0 ] PTR struct .
  1865 ;;		 -> uart(25), 
  1866 ;;  buf             2    2[BANK0 ] PTR unsigned char 
  1867 ;;		 -> uartRecvBuffer(128), uartSendBuffer(128), 
  1868 ;;  size            1    4[BANK0 ] unsigned char 
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;		None
  1871 ;; Return value:  Size  Location     Type
  1872 ;;                  1    wreg      void 
  1873 ;; Registers used:
  1874 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1880 ;;      Params:         0       5       0       0       0       0       0
  1881 ;;      Locals:         0       0       0       0       0       0       0
  1882 ;;      Temps:          0       0       0       0       0       0       0
  1883 ;;      Totals:         0       5       0       0       0       0       0
  1884 ;;Total ram usage:        5 bytes
  1885 ;; Hardware stack levels used:    1
  1886 ;; Hardware stack levels required when called:    3
  1887 ;; This function calls:
  1888 ;;		Nothing
  1889 ;; This function is called by:
  1890 ;;		_uartInit
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           	psect	text9
  1895  000D06                     __ptext9:
  1896                           	opt stack 0
  1897  000D06                     _fifoInit:
  1898                           	opt stack 25
  1899                           
  1900                           ;fifo.c: 5: fifo->buf=buf;
  1901                           
  1902                           ;incstack = 0
  1903  000D06  C060  FFD9         	movff	fifoInit@fifo,fsr2l
  1904  000D0A  C061  FFDA         	movff	fifoInit@fifo+1,fsr2h
  1905  000D0E  C062  FFDE         	movff	fifoInit@buf,postinc2
  1906  000D12  C063  FFDD         	movff	fifoInit@buf+1,postdec2
  1907                           
  1908                           ;fifo.c: 6: fifo->maxPtr=size-1;
  1909  000D16  0100               	movlb	0	; () banked
  1910  000D18  EE20 F002          	lfsr	2,2
  1911  000D1C  5160               	movf	fifoInit@fifo& (0+255),w,b
  1912  000D1E  26D9               	addwf	fsr2l,f,c
  1913  000D20  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  1914  000D22  22DA               	addwfc	fsr2h,f,c
  1915  000D24  0100               	movlb	0	; () banked
  1916  000D26  0564               	decf	fifoInit@size& (0+255),w,b
  1917  000D28  6EDF               	movwf	indf2,c
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;fifo.c: 7: fifo->status=2;
  1921  000D2A  0100               	movlb	0	; () banked
  1922  000D2C  EE20 F003          	lfsr	2,3
  1923  000D30  5160               	movf	fifoInit@fifo& (0+255),w,b
  1924  000D32  26D9               	addwf	fsr2l,f,c
  1925  000D34  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  1926  000D36  22DA               	addwfc	fsr2h,f,c
  1927  000D38  0E02               	movlw	2
  1928  000D3A  6EDF               	movwf	indf2,c
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;fifo.c: 8: fifo->getPtr=fifo->maxPtr;
  1932  000D3C  0100               	movlb	0	; () banked
  1933  000D3E  EE20 F002          	lfsr	2,2
  1934  000D42  5160               	movf	fifoInit@fifo& (0+255),w,b
  1935  000D44  26D9               	addwf	fsr2l,f,c
  1936  000D46  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  1937  000D48  22DA               	addwfc	fsr2h,f,c
  1938  000D4A  0100               	movlb	0	; () banked
  1939  000D4C  EE10 F005          	lfsr	1,5
  1940  000D50  5160               	movf	fifoInit@fifo& (0+255),w,b
  1941  000D52  26E1               	addwf	fsr1l,f,c
  1942  000D54  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  1943  000D56  22E2               	addwfc	fsr1h,f,c
  1944  000D58  CFDF FFE7          	movff	indf2,indf1
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;fifo.c: 9: fifo->putPtr=fifo->maxPtr;
  1948  000D5C  0100               	movlb	0	; () banked
  1949  000D5E  EE20 F002          	lfsr	2,2
  1950  000D62  5160               	movf	fifoInit@fifo& (0+255),w,b
  1951  000D64  26D9               	addwf	fsr2l,f,c
  1952  000D66  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  1953  000D68  22DA               	addwfc	fsr2h,f,c
  1954  000D6A  0100               	movlb	0	; () banked
  1955  000D6C  EE10 F004          	lfsr	1,4
  1956  000D70  5160               	movf	fifoInit@fifo& (0+255),w,b
  1957  000D72  26E1               	addwf	fsr1l,f,c
  1958  000D74  5161               	movf	(fifoInit@fifo+1)& (0+255),w,b
  1959  000D76  22E2               	addwfc	fsr1h,f,c
  1960  000D78  CFDF FFE7          	movff	indf2,indf1
  1961                           
  1962                           ; BSR set to: 0
  1963  000D7C  0012               	return		;funcret
  1964  000D7E                     __end_of_fifoInit:
  1965                           	opt stack 0
  1966                           tblptru	equ	0xFF8
  1967                           postinc0	equ	0xFEE
  1968                           wreg	equ	0xFE8
  1969                           indf1	equ	0xFE7
  1970                           postinc1	equ	0xFE6
  1971                           postdec1	equ	0xFE5
  1972                           fsr1h	equ	0xFE2
  1973                           fsr1l	equ	0xFE1
  1974                           indf2	equ	0xFDF
  1975                           postinc2	equ	0xFDE
  1976                           postdec2	equ	0xFDD
  1977                           plusw2	equ	0xFDB
  1978                           fsr2h	equ	0xFDA
  1979                           fsr2l	equ	0xFD9
  1980                           status	equ	0xFD8
  1981                           
  1982 ;; *************** function _SetBaudRate *****************
  1983 ;; Defined at:
  1984 ;;		line 105 in file "uart.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;  uart            2   20[BANK0 ] PTR struct .
  1987 ;;		 -> uart(25), 
  1988 ;;  rate            4   22[BANK0 ] long 
  1989 ;;  osc             4   26[BANK0 ] long 
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;  brg16           1   33[BANK0 ] unsigned char 
  1992 ;;  l               1   32[BANK0 ] unsigned char 
  1993 ;;  h               1   31[BANK0 ] unsigned char 
  1994 ;;  o               1   30[BANK0 ] unsigned char 
  1995 ;; Return value:  Size  Location     Type
  1996 ;;                  1    wreg      unsigned char 
  1997 ;; Registers used:
  1998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1999 ;; Tracked objects:
  2000 ;;		On entry : 0/0
  2001 ;;		On exit  : 0/0
  2002 ;;		Unchanged: 0/0
  2003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2004 ;;      Params:         0      10       0       0       0       0       0
  2005 ;;      Locals:         0       4       0       0       0       0       0
  2006 ;;      Temps:          0       0       0       0       0       0       0
  2007 ;;      Totals:         0      14       0       0       0       0       0
  2008 ;;Total ram usage:       14 bytes
  2009 ;; Hardware stack levels used:    1
  2010 ;; Hardware stack levels required when called:    4
  2011 ;; This function calls:
  2012 ;;		_GetBaudRateConfig
  2013 ;; This function is called by:
  2014 ;;		_uartInit
  2015 ;; This function uses a non-reentrant model
  2016 ;;
  2017                           
  2018                           	psect	text10
  2019  000BE6                     __ptext10:
  2020                           	opt stack 0
  2021  000BE6                     _SetBaudRate:
  2022                           	opt stack 24
  2023                           
  2024                           ;uart.c: 107: char brg16;
  2025                           ;uart.c: 108: char h;
  2026                           ;uart.c: 109: char l;
  2027                           ;uart.c: 110: char o;
  2028                           ;uart.c: 111: o=GetBaudRateConfig(rate,osc,&brg16,&h,&l);
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;incstack = 0
  2032  000BE6  C076  F060         	movff	SetBaudRate@rate,GetBaudRateConfig@rate
  2033  000BEA  C077  F061         	movff	SetBaudRate@rate+1,GetBaudRateConfig@rate+1
  2034  000BEE  C078  F062         	movff	SetBaudRate@rate+2,GetBaudRateConfig@rate+2
  2035  000BF2  C079  F063         	movff	SetBaudRate@rate+3,GetBaudRateConfig@rate+3
  2036  000BF6  C07A  F064         	movff	SetBaudRate@osc,GetBaudRateConfig@osc
  2037  000BFA  C07B  F065         	movff	SetBaudRate@osc+1,GetBaudRateConfig@osc+1
  2038  000BFE  C07C  F066         	movff	SetBaudRate@osc+2,GetBaudRateConfig@osc+2
  2039  000C02  C07D  F067         	movff	SetBaudRate@osc+3,GetBaudRateConfig@osc+3
  2040  000C06  0E81               	movlw	low SetBaudRate@brg16
  2041  000C08  0100               	movlb	0	; () banked
  2042  000C0A  6F68               	movwf	GetBaudRateConfig@setBRG16& (0+255),b
  2043  000C0C  0E00               	movlw	high SetBaudRate@brg16
  2044  000C0E  0100               	movlb	0	; () banked
  2045  000C10  6F69               	movwf	(GetBaudRateConfig@setBRG16+1)& (0+255),b
  2046  000C12  0E7F               	movlw	low SetBaudRate@h
  2047  000C14  0100               	movlb	0	; () banked
  2048  000C16  6F6A               	movwf	GetBaudRateConfig@brgh& (0+255),b
  2049  000C18  0E00               	movlw	high SetBaudRate@h
  2050  000C1A  0100               	movlb	0	; () banked
  2051  000C1C  6F6B               	movwf	(GetBaudRateConfig@brgh+1)& (0+255),b
  2052  000C1E  0E80               	movlw	low SetBaudRate@l
  2053  000C20  0100               	movlb	0	; () banked
  2054  000C22  6F6C               	movwf	GetBaudRateConfig@brgl& (0+255),b
  2055  000C24  0E00               	movlw	high SetBaudRate@l
  2056  000C26  0100               	movlb	0	; () banked
  2057  000C28  6F6D               	movwf	(GetBaudRateConfig@brgl+1)& (0+255),b
  2058  000C2A  EC62  F001         	call	_GetBaudRateConfig	;wreg free
  2059  000C2E  0100               	movlb	0	; () banked
  2060  000C30  6F7E               	movwf	SetBaudRate@o& (0+255),b
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;uart.c: 112: if (o==0) return 0;
  2064  000C32  0100               	movlb	0	; () banked
  2065  000C34  517E               	movf	SetBaudRate@o& (0+255),w,b
  2066  000C36  0100               	movlb	0	; () banked
  2067  000C38  B4D8               	btfsc	status,2,c
  2068  000C3A  0012               	return	
  2069  000C3C  D016               	goto	l3242
  2070  000C3E                     l263:
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;uart.c: 117: BAUDCON1bits.BRG16=brg16;
  2074  000C3E  0100               	movlb	0	; () banked
  2075  000C40  B181               	btfsc	SetBaudRate@brg16& (0+255),0,b
  2076  000C42  D002               	bra	u965
  2077  000C44  96B8               	bcf	4024,3,c	;volatile
  2078  000C46  D001               	bra	u966
  2079  000C48                     u965:
  2080  000C48  86B8               	bsf	4024,3,c	;volatile
  2081  000C4A                     u966:
  2082                           
  2083                           ;uart.c: 118: SPBRGH1=h;
  2084  000C4A  C07F  FFB0         	movff	SetBaudRate@h,4016	;volatile
  2085                           
  2086                           ;uart.c: 119: SPBRG1=l;
  2087  000C4E  C080  FFAF         	movff	SetBaudRate@l,4015	;volatile
  2088                           
  2089                           ;uart.c: 120: break;
  2090  000C52  0012               	return	
  2091  000C54                     l265:
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;uart.c: 122: BAUDCON2bits.BRG16=brg16;
  2095  000C54  0100               	movlb	0	; () banked
  2096  000C56  B181               	btfsc	SetBaudRate@brg16& (0+255),0,b
  2097  000C58  D002               	bra	u975
  2098  000C5A  9670               	bcf	3952,3,c	;volatile
  2099  000C5C  D001               	bra	u976
  2100  000C5E                     u975:
  2101  000C5E  8670               	bsf	3952,3,c	;volatile
  2102  000C60                     u976:
  2103                           
  2104                           ;uart.c: 123: SPBRGH2=h;
  2105  000C60  C07F  FF76         	movff	SetBaudRate@h,3958	;volatile
  2106                           
  2107                           ;uart.c: 124: SPBRG2=l;
  2108  000C64  C080  FF75         	movff	SetBaudRate@l,3957	;volatile
  2109                           
  2110                           ;uart.c: 126: }
  2111                           
  2112                           ;uart.c: 125: break;
  2113  000C68  0012               	return	
  2114  000C6A                     l3242:
  2115  000C6A  0100               	movlb	0	; () banked
  2116  000C6C  EE20 F013          	lfsr	2,19
  2117  000C70  5174               	movf	SetBaudRate@uart& (0+255),w,b
  2118  000C72  26D9               	addwf	fsr2l,f,c
  2119  000C74  5175               	movf	(SetBaudRate@uart+1)& (0+255),w,b
  2120  000C76  22DA               	addwfc	fsr2h,f,c
  2121  000C78  50DF               	movf	indf2,w,c
  2122                           
  2123                           ; Switch size 1, requested type "space"
  2124                           ; Number of cases is 2, Range of values is 1 to 2
  2125                           ; switch strategies available:
  2126                           ; Name         Instructions Cycles
  2127                           ; simple_byte            7     4 (average)
  2128                           ;	Chosen strategy is simple_byte
  2129  000C7A  0A01               	xorlw	1	; case 1
  2130  000C7C  B4D8               	btfsc	status,2,c
  2131  000C7E  D7DF               	goto	l263
  2132  000C80  0A03               	xorlw	3	; case 2
  2133  000C82  A4D8               	btfss	status,2,c
  2134  000C84  0012               	return	
  2135  000C86  D7E6               	goto	l265
  2136  000C88                     __end_of_SetBaudRate:
  2137                           	opt stack 0
  2138                           tblptru	equ	0xFF8
  2139                           postinc0	equ	0xFEE
  2140                           wreg	equ	0xFE8
  2141                           indf1	equ	0xFE7
  2142                           postinc1	equ	0xFE6
  2143                           postdec1	equ	0xFE5
  2144                           fsr1h	equ	0xFE2
  2145                           fsr1l	equ	0xFE1
  2146                           indf2	equ	0xFDF
  2147                           postinc2	equ	0xFDE
  2148                           postdec2	equ	0xFDD
  2149                           plusw2	equ	0xFDB
  2150                           fsr2h	equ	0xFDA
  2151                           fsr2l	equ	0xFD9
  2152                           status	equ	0xFD8
  2153                           
  2154 ;; *************** function _GetBaudRateConfig *****************
  2155 ;; Defined at:
  2156 ;;		line 64 in file "uart.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;  rate            4    0[BANK0 ] long 
  2159 ;;  osc             4    4[BANK0 ] long 
  2160 ;;  setBRG16        2    8[BANK0 ] PTR unsigned char 
  2161 ;;		 -> SetBaudRate@brg16(1), 
  2162 ;;  brgh            2   10[BANK0 ] PTR unsigned char 
  2163 ;;		 -> SetBaudRate@h(1), 
  2164 ;;  brgl            2   12[BANK0 ] PTR unsigned char 
  2165 ;;		 -> SetBaudRate@l(1), 
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;  brg             2   18[BANK0 ] int 
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  1    wreg      unsigned char 
  2170 ;; Registers used:
  2171 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2177 ;;      Params:         0      14       0       0       0       0       0
  2178 ;;      Locals:         0       2       0       0       0       0       0
  2179 ;;      Temps:          0       4       0       0       0       0       0
  2180 ;;      Totals:         0      20       0       0       0       0       0
  2181 ;;Total ram usage:       20 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    3
  2184 ;; This function calls:
  2185 ;;		Nothing
  2186 ;; This function is called by:
  2187 ;;		_SetBaudRate
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           	psect	text11
  2192  0002C4                     __ptext11:
  2193                           	opt stack 0
  2194  0002C4                     _GetBaudRateConfig:
  2195                           	opt stack 24
  2196                           
  2197                           ;uart.c: 66: int brg=0;
  2198                           
  2199                           ;incstack = 0
  2200  0002C4  0E00               	movlw	0
  2201  0002C6  0100               	movlb	0	; () banked
  2202  0002C8  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  2203  0002CA  0E00               	movlw	0
  2204  0002CC  6F72               	movwf	GetBaudRateConfig@brg& (0+255),b
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;uart.c: 68: if (osc==64000000)
  2208  0002CE  0E90               	movlw	144
  2209  0002D0  0100               	movlb	0	; () banked
  2210  0002D2  1965               	xorwf	(GetBaudRateConfig@osc+1)& (0+255),w,b
  2211  0002D4  E10A               	bnz	u921
  2212  0002D6  0ED0               	movlw	208
  2213  0002D8  0100               	movlb	0	; () banked
  2214  0002DA  1966               	xorwf	(GetBaudRateConfig@osc+2)& (0+255),w,b
  2215  0002DC  E106               	bnz	u921
  2216  0002DE  0E03               	movlw	3
  2217  0002E0  0100               	movlb	0	; () banked
  2218  0002E2  1967               	xorwf	(GetBaudRateConfig@osc+3)& (0+255),w,b
  2219  0002E4  0100               	movlb	0	; () banked
  2220  0002E6  1164               	iorwf	GetBaudRateConfig@osc& (0+255),w,b
  2221  0002E8  A4D8               	btfss	status,2,c
  2222  0002EA                     u921:
  2223  0002EA  D095               	goto	l3078
  2224                           
  2225                           ; BSR set to: 0
  2226                           ;uart.c: 69: {
  2227                           ;uart.c: 70: *setBRG16=1;
  2228  0002EC  C068  FFD9         	movff	GetBaudRateConfig@setBRG16,fsr2l
  2229  0002F0  C069  FFDA         	movff	GetBaudRateConfig@setBRG16+1,fsr2h
  2230  0002F4  0E01               	movlw	1
  2231  0002F6  6EDF               	movwf	indf2,c
  2232                           
  2233                           ;uart.c: 71: switch (rate)
  2234  0002F8  D02A               	goto	l3076
  2235  0002FA                     l3054:
  2236                           
  2237                           ; BSR set to: 0
  2238  0002FA  0E34               	movlw	52
  2239  0002FC  0100               	movlb	0	; () banked
  2240  0002FE  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  2241  000300  0E14               	movlw	20
  2242  000302  D0AD               	goto	L11
  2243  000304                     l3056:
  2244                           
  2245                           ; BSR set to: 0
  2246  000304  0E0D               	movlw	13
  2247  000306  0100               	movlb	0	; () banked
  2248  000308  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  2249  00030A  0E04               	movlw	4
  2250  00030C  D0A8               	goto	L11
  2251  00030E                     l3058:
  2252                           
  2253                           ; BSR set to: 0
  2254  00030E  0E06               	movlw	6
  2255  000310  0100               	movlb	0	; () banked
  2256  000312  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  2257  000314  0E82               	movlw	130
  2258  000316  D0A3               	goto	L11
  2259  000318                     l3060:
  2260                           
  2261                           ; BSR set to: 0
  2262  000318  0E01               	movlw	1
  2263  00031A  0100               	movlb	0	; () banked
  2264  00031C  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  2265  00031E  0EA0               	movlw	160
  2266  000320  D09E               	goto	L11
  2267  000322                     l3062:
  2268                           
  2269                           ; BSR set to: 0
  2270  000322  0E01               	movlw	1
  2271  000324  0100               	movlb	0	; () banked
  2272  000326  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  2273  000328  0E7F               	movlw	127
  2274  00032A  D099               	goto	L11
  2275  00032C                     l3064:
  2276                           
  2277                           ; BSR set to: 0
  2278  00032C  0E00               	movlw	0
  2279  00032E  0100               	movlb	0	; () banked
  2280  000330  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  2281  000332  0ECF               	movlw	207
  2282  000334  D094               	goto	L11
  2283  000336                     l3066:
  2284                           
  2285                           ; BSR set to: 0
  2286  000336  0E00               	movlw	0
  2287  000338  0100               	movlb	0	; () banked
  2288  00033A  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  2289  00033C  0E44               	movlw	68
  2290  00033E  D08F               	goto	L11
  2291  000340                     l3068:
  2292                           
  2293                           ; BSR set to: 0
  2294  000340  0E00               	movlw	0
  2295  000342  0100               	movlb	0	; () banked
  2296  000344  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  2297  000346  0E22               	movlw	34
  2298  000348  D08A               	goto	L11
  2299  00034A                     l3070:
  2300                           
  2301                           ; BSR set to: 0
  2302  00034A  0E00               	movlw	0
  2303                           
  2304                           ; BSR set to: 0
  2305  00034C  0012               	return	
  2306  00034E                     l3076:
  2307                           
  2308                           ; BSR set to: 0
  2309  00034E  C060  F06E         	movff	GetBaudRateConfig@rate,??_GetBaudRateConfig
  2310  000352  C061  F06F         	movff	GetBaudRateConfig@rate+1,??_GetBaudRateConfig+1
  2311  000356  C062  F070         	movff	GetBaudRateConfig@rate+2,??_GetBaudRateConfig+2
  2312  00035A  C063  F071         	movff	GetBaudRateConfig@rate+3,??_GetBaudRateConfig+3
  2313                           
  2314                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  2315                           ; Switch size 1, requested type "space"
  2316                           ; Number of cases is 1, Range of values is 0 to 0
  2317                           ; switch strategies available:
  2318                           ; Name         Instructions Cycles
  2319                           ; simple_byte            4     3 (average)
  2320                           ;	Chosen strategy is simple_byte
  2321  00035E  0100               	movlb	0	; () banked
  2322  000360  5171               	movf	(??_GetBaudRateConfig+3)& (0+255),w,b
  2323  000362  0A00               	xorlw	0	; case 0
  2324  000364  B4D8               	btfsc	status,2,c
  2325  000366  D04E               	goto	l4038
  2326  000368  D7F0               	goto	l3070
  2327  00036A                     l4034:
  2328                           
  2329                           ; BSR set to: 0
  2330                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 7 sub-sw
      +                          itches
  2331                           ; Switch size 1, requested type "space"
  2332                           ; Number of cases is 7, Range of values is 1 to 225
  2333                           ; switch strategies available:
  2334                           ; Name         Instructions Cycles
  2335                           ; simple_byte           22    12 (average)
  2336                           ;	Chosen strategy is simple_byte
  2337  00036A  0100               	movlb	0	; () banked
  2338  00036C  516F               	movf	(??_GetBaudRateConfig+1)& (0+255),w,b
  2339  00036E  0A01               	xorlw	1	; case 1
  2340  000370  B4D8               	btfsc	status,2,c
  2341  000372  D013               	goto	l4040
  2342  000374  0A05               	xorlw	5	; case 4
  2343  000376  B4D8               	btfsc	status,2,c
  2344  000378  D016               	goto	l4042
  2345  00037A  0A0D               	xorlw	13	; case 9
  2346  00037C  B4D8               	btfsc	status,2,c
  2347  00037E  D019               	goto	l4044
  2348  000380  0A2C               	xorlw	44	; case 37
  2349  000382  B4D8               	btfsc	status,2,c
  2350  000384  D01C               	goto	l4046
  2351  000386  0A0D               	xorlw	13	; case 40
  2352  000388  B4D8               	btfsc	status,2,c
  2353  00038A  D01F               	goto	l4048
  2354  00038C  0A63               	xorlw	99	; case 75
  2355  00038E  B4D8               	btfsc	status,2,c
  2356  000390  D022               	goto	l4050
  2357  000392  0AAA               	xorlw	170	; case 225
  2358  000394  B4D8               	btfsc	status,2,c
  2359  000396  D025               	goto	l4052
  2360  000398  D7D8               	goto	l3070
  2361  00039A                     l4040:
  2362                           
  2363                           ; BSR set to: 0
  2364                           ; Switch size 1, requested type "space"
  2365                           ; Number of cases is 1, Range of values is 44 to 44
  2366                           ; switch strategies available:
  2367                           ; Name         Instructions Cycles
  2368                           ; simple_byte            4     3 (average)
  2369                           ;	Chosen strategy is simple_byte
  2370  00039A  0100               	movlb	0	; () banked
  2371  00039C  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  2372  00039E  0A2C               	xorlw	44	; case 44
  2373  0003A0  B4D8               	btfsc	status,2,c
  2374  0003A2  D7AB               	goto	l3054
  2375  0003A4  D7D2               	goto	l3070
  2376  0003A6                     l4042:
  2377                           
  2378                           ; BSR set to: 0
  2379                           ; Switch size 1, requested type "space"
  2380                           ; Number of cases is 1, Range of values is 176 to 176
  2381                           ; switch strategies available:
  2382                           ; Name         Instructions Cycles
  2383                           ; simple_byte            4     3 (average)
  2384                           ;	Chosen strategy is simple_byte
  2385  0003A6  0100               	movlb	0	; () banked
  2386  0003A8  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  2387  0003AA  0AB0               	xorlw	176	; case 176
  2388  0003AC  B4D8               	btfsc	status,2,c
  2389  0003AE  D7AA               	goto	l3056
  2390  0003B0  D7CC               	goto	l3070
  2391  0003B2                     l4044:
  2392                           
  2393                           ; BSR set to: 0
  2394                           ; Switch size 1, requested type "space"
  2395                           ; Number of cases is 1, Range of values is 96 to 96
  2396                           ; switch strategies available:
  2397                           ; Name         Instructions Cycles
  2398                           ; simple_byte            4     3 (average)
  2399                           ;	Chosen strategy is simple_byte
  2400  0003B2  0100               	movlb	0	; () banked
  2401  0003B4  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  2402  0003B6  0A60               	xorlw	96	; case 96
  2403  0003B8  B4D8               	btfsc	status,2,c
  2404  0003BA  D7A9               	goto	l3058
  2405  0003BC  D7C6               	goto	l3070
  2406  0003BE                     l4046:
  2407                           
  2408                           ; BSR set to: 0
  2409                           ; Switch size 1, requested type "space"
  2410                           ; Number of cases is 1, Range of values is 128 to 128
  2411                           ; switch strategies available:
  2412                           ; Name         Instructions Cycles
  2413                           ; simple_byte            4     3 (average)
  2414                           ;	Chosen strategy is simple_byte
  2415  0003BE  0100               	movlb	0	; () banked
  2416  0003C0  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  2417  0003C2  0A80               	xorlw	128	; case 128
  2418  0003C4  B4D8               	btfsc	status,2,c
  2419  0003C6  D7A8               	goto	l3060
  2420  0003C8  D7C0               	goto	l3070
  2421  0003CA                     l4048:
  2422                           
  2423                           ; BSR set to: 0
  2424                           ; Switch size 1, requested type "space"
  2425                           ; Number of cases is 1, Range of values is 177 to 177
  2426                           ; switch strategies available:
  2427                           ; Name         Instructions Cycles
  2428                           ; simple_byte            4     3 (average)
  2429                           ;	Chosen strategy is simple_byte
  2430  0003CA  0100               	movlb	0	; () banked
  2431  0003CC  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  2432  0003CE  0AB1               	xorlw	177	; case 177
  2433  0003D0  B4D8               	btfsc	status,2,c
  2434  0003D2  D7A7               	goto	l3062
  2435  0003D4  D7BA               	goto	l3070
  2436  0003D6                     l4050:
  2437                           
  2438                           ; BSR set to: 0
  2439                           ; Switch size 1, requested type "space"
  2440                           ; Number of cases is 1, Range of values is 0 to 0
  2441                           ; switch strategies available:
  2442                           ; Name         Instructions Cycles
  2443                           ; simple_byte            4     3 (average)
  2444                           ;	Chosen strategy is simple_byte
  2445  0003D6  0100               	movlb	0	; () banked
  2446  0003D8  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  2447  0003DA  0A00               	xorlw	0	; case 0
  2448  0003DC  B4D8               	btfsc	status,2,c
  2449  0003DE  D7A6               	goto	l3064
  2450  0003E0  D7B4               	goto	l3070
  2451  0003E2                     l4052:
  2452                           
  2453                           ; BSR set to: 0
  2454                           ; Switch size 1, requested type "space"
  2455                           ; Number of cases is 1, Range of values is 0 to 0
  2456                           ; switch strategies available:
  2457                           ; Name         Instructions Cycles
  2458                           ; simple_byte            4     3 (average)
  2459                           ;	Chosen strategy is simple_byte
  2460  0003E2  0100               	movlb	0	; () banked
  2461  0003E4  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  2462  0003E6  0A00               	xorlw	0	; case 0
  2463  0003E8  B4D8               	btfsc	status,2,c
  2464  0003EA  D7A5               	goto	l3066
  2465  0003EC  D7AE               	goto	l3070
  2466  0003EE                     l4036:
  2467                           
  2468                           ; BSR set to: 0
  2469                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2470                           ; Switch size 1, requested type "space"
  2471                           ; Number of cases is 1, Range of values is 194 to 194
  2472                           ; switch strategies available:
  2473                           ; Name         Instructions Cycles
  2474                           ; simple_byte            4     3 (average)
  2475                           ;	Chosen strategy is simple_byte
  2476  0003EE  0100               	movlb	0	; () banked
  2477  0003F0  516F               	movf	(??_GetBaudRateConfig+1)& (0+255),w,b
  2478  0003F2  0AC2               	xorlw	194	; case 194
  2479  0003F4  A4D8               	btfss	status,2,c
  2480  0003F6  D7A9               	goto	l3070
  2481                           
  2482                           ; BSR set to: 0
  2483                           ; Switch size 1, requested type "space"
  2484                           ; Number of cases is 1, Range of values is 0 to 0
  2485                           ; switch strategies available:
  2486                           ; Name         Instructions Cycles
  2487                           ; simple_byte            4     3 (average)
  2488                           ;	Chosen strategy is simple_byte
  2489  0003F8  0100               	movlb	0	; () banked
  2490  0003FA  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  2491  0003FC  0A00               	xorlw	0	; case 0
  2492  0003FE  B4D8               	btfsc	status,2,c
  2493  000400  D79F               	goto	l3068
  2494  000402  D7A3               	goto	l3070
  2495  000404                     l4038:
  2496                           
  2497                           ; BSR set to: 0
  2498                           ; Switch size 1, requested type "space"
  2499                           ; Number of cases is 2, Range of values is 0 to 1
  2500                           ; switch strategies available:
  2501                           ; Name         Instructions Cycles
  2502                           ; simple_byte            7     4 (average)
  2503                           ;	Chosen strategy is simple_byte
  2504  000404  0100               	movlb	0	; () banked
  2505  000406  5170               	movf	(??_GetBaudRateConfig+2)& (0+255),w,b
  2506  000408  0A00               	xorlw	0	; case 0
  2507  00040A  B4D8               	btfsc	status,2,c
  2508  00040C  D7AE               	goto	l4034
  2509  00040E  0A01               	xorlw	1	; case 1
  2510  000410  B4D8               	btfsc	status,2,c
  2511  000412  D7ED               	goto	l4036
  2512  000414  D79A               	goto	l3070
  2513  000416                     l3078:
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;uart.c: 84: else if (osc==1000000)
  2517  000416  0E40               	movlw	64
  2518  000418  0100               	movlb	0	; () banked
  2519  00041A  1964               	xorwf	GetBaudRateConfig@osc& (0+255),w,b
  2520  00041C  E196               	bnz	l3070
  2521  00041E  0E42               	movlw	66
  2522  000420  0100               	movlb	0	; () banked
  2523  000422  1965               	xorwf	(GetBaudRateConfig@osc+1)& (0+255),w,b
  2524  000424  E192               	bnz	l3070
  2525  000426  0E0F               	movlw	15
  2526  000428  0100               	movlb	0	; () banked
  2527  00042A  1966               	xorwf	(GetBaudRateConfig@osc+2)& (0+255),w,b
  2528  00042C  0100               	movlb	0	; () banked
  2529  00042E  1167               	iorwf	(GetBaudRateConfig@osc+3)& (0+255),w,b
  2530  000430  A4D8               	btfss	status,2,c
  2531  000432  D78B               	goto	l3070
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;uart.c: 85: {
  2535                           ;uart.c: 86: *setBRG16=1;
  2536  000434  C068  FFD9         	movff	GetBaudRateConfig@setBRG16,fsr2l
  2537  000438  C069  FFDA         	movff	GetBaudRateConfig@setBRG16+1,fsr2h
  2538  00043C  0E01               	movlw	1
  2539  00043E  6EDF               	movwf	indf2,c
  2540                           
  2541                           ;uart.c: 87: switch (rate)
  2542  000440  D010               	goto	l3096
  2543  000442                     l3084:
  2544                           
  2545                           ; BSR set to: 0
  2546  000442  0E00               	movlw	0
  2547  000444  0100               	movlb	0	; () banked
  2548  000446  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  2549  000448  0E33               	movlw	51
  2550  00044A  D009               	goto	L11
  2551  00044C                     l3086:
  2552                           
  2553                           ; BSR set to: 0
  2554  00044C  0E00               	movlw	0
  2555  00044E  0100               	movlb	0	; () banked
  2556  000450  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  2557  000452  0E19               	movlw	25
  2558  000454  D004               	goto	L11
  2559  000456                     l3088:
  2560                           
  2561                           ; BSR set to: 0
  2562  000456  0E00               	movlw	0
  2563  000458  0100               	movlb	0	; () banked
  2564  00045A  6F73               	movwf	(GetBaudRateConfig@brg+1)& (0+255),b
  2565  00045C  0E05               	movlw	5
  2566  00045E                     L11:
  2567  00045E  6F72               	movwf	GetBaudRateConfig@brg& (0+255),b
  2568  000460  D039               	goto	l3102
  2569  000462                     l3096:
  2570                           
  2571                           ; BSR set to: 0
  2572  000462  C060  F06E         	movff	GetBaudRateConfig@rate,??_GetBaudRateConfig
  2573  000466  C061  F06F         	movff	GetBaudRateConfig@rate+1,??_GetBaudRateConfig+1
  2574  00046A  C062  F070         	movff	GetBaudRateConfig@rate+2,??_GetBaudRateConfig+2
  2575  00046E  C063  F071         	movff	GetBaudRateConfig@rate+3,??_GetBaudRateConfig+3
  2576                           
  2577                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  2578                           ; Switch size 1, requested type "space"
  2579                           ; Number of cases is 1, Range of values is 0 to 0
  2580                           ; switch strategies available:
  2581                           ; Name         Instructions Cycles
  2582                           ; simple_byte            4     3 (average)
  2583                           ;	Chosen strategy is simple_byte
  2584  000472  0100               	movlb	0	; () banked
  2585  000474  5171               	movf	(??_GetBaudRateConfig+3)& (0+255),w,b
  2586  000476  0A00               	xorlw	0	; case 0
  2587  000478  B4D8               	btfsc	status,2,c
  2588  00047A  D026               	goto	l4058
  2589  00047C  D766               	goto	l3070
  2590  00047E                     l4056:
  2591                           
  2592                           ; BSR set to: 0
  2593                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  2594                           ; Switch size 1, requested type "space"
  2595                           ; Number of cases is 4, Range of values is 1 to 40
  2596                           ; switch strategies available:
  2597                           ; Name         Instructions Cycles
  2598                           ; simple_byte           13     7 (average)
  2599                           ;	Chosen strategy is simple_byte
  2600  00047E  0100               	movlb	0	; () banked
  2601  000480  516F               	movf	(??_GetBaudRateConfig+1)& (0+255),w,b
  2602  000482  0A01               	xorlw	1	; case 1
  2603  000484  B4D8               	btfsc	status,2,c
  2604  000486  D00A               	goto	l4060
  2605  000488  0A05               	xorlw	5	; case 4
  2606  00048A  B4D8               	btfsc	status,2,c
  2607  00048C  D00B               	goto	l4062
  2608  00048E  0A0D               	xorlw	13	; case 9
  2609  000490  B4D8               	btfsc	status,2,c
  2610  000492  D00E               	goto	l4064
  2611  000494  0A21               	xorlw	33	; case 40
  2612  000496  B4D8               	btfsc	status,2,c
  2613  000498  D011               	goto	l4066
  2614  00049A  D757               	goto	l3070
  2615  00049C                     l4060:
  2616                           
  2617                           ; BSR set to: 0
  2618                           ; Switch size 1, requested type "space"
  2619                           ; Number of cases is 1, Range of values is 44 to 44
  2620                           ; switch strategies available:
  2621                           ; Name         Instructions Cycles
  2622                           ; simple_byte            4     3 (average)
  2623                           ;	Chosen strategy is simple_byte
  2624  00049C  0100               	movlb	0	; () banked
  2625  00049E  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  2626  0004A0  0A2C               	xorlw	44	; case 44
  2627  0004A2  D79C               	goto	L12
  2628  0004A4                     l4062:
  2629                           
  2630                           ; BSR set to: 0
  2631                           ; Switch size 1, requested type "space"
  2632                           ; Number of cases is 1, Range of values is 176 to 176
  2633                           ; switch strategies available:
  2634                           ; Name         Instructions Cycles
  2635                           ; simple_byte            4     3 (average)
  2636                           ;	Chosen strategy is simple_byte
  2637  0004A4  0100               	movlb	0	; () banked
  2638  0004A6  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  2639  0004A8  0AB0               	xorlw	176	; case 176
  2640  0004AA  B4D8               	btfsc	status,2,c
  2641  0004AC  D7CA               	goto	l3084
  2642  0004AE  D74D               	goto	l3070
  2643  0004B0                     l4064:
  2644                           
  2645                           ; BSR set to: 0
  2646                           ; Switch size 1, requested type "space"
  2647                           ; Number of cases is 1, Range of values is 96 to 96
  2648                           ; switch strategies available:
  2649                           ; Name         Instructions Cycles
  2650                           ; simple_byte            4     3 (average)
  2651                           ;	Chosen strategy is simple_byte
  2652  0004B0  0100               	movlb	0	; () banked
  2653  0004B2  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  2654  0004B4  0A60               	xorlw	96	; case 96
  2655  0004B6  B4D8               	btfsc	status,2,c
  2656  0004B8  D7C9               	goto	l3086
  2657  0004BA  D747               	goto	l3070
  2658  0004BC                     l4066:
  2659                           
  2660                           ; BSR set to: 0
  2661                           ; Switch size 1, requested type "space"
  2662                           ; Number of cases is 1, Range of values is 177 to 177
  2663                           ; switch strategies available:
  2664                           ; Name         Instructions Cycles
  2665                           ; simple_byte            4     3 (average)
  2666                           ;	Chosen strategy is simple_byte
  2667  0004BC  0100               	movlb	0	; () banked
  2668  0004BE  516E               	movf	??_GetBaudRateConfig& (0+255),w,b
  2669  0004C0  0AB1               	xorlw	177	; case 177
  2670  0004C2  B4D8               	btfsc	status,2,c
  2671  0004C4  D7C8               	goto	l3088
  2672  0004C6  D741               	goto	l3070
  2673  0004C8                     l4058:
  2674                           
  2675                           ; BSR set to: 0
  2676                           ; Switch size 1, requested type "space"
  2677                           ; Number of cases is 1, Range of values is 0 to 0
  2678                           ; switch strategies available:
  2679                           ; Name         Instructions Cycles
  2680                           ; simple_byte            4     3 (average)
  2681                           ;	Chosen strategy is simple_byte
  2682  0004C8  0100               	movlb	0	; () banked
  2683  0004CA  5170               	movf	(??_GetBaudRateConfig+2)& (0+255),w,b
  2684  0004CC  0A00               	xorlw	0	; case 0
  2685  0004CE  B4D8               	btfsc	status,2,c
  2686  0004D0  D7D6               	goto	l4056
  2687  0004D2  D73B               	goto	l3070
  2688  0004D4                     l3102:
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;uart.c: 99: }
  2692                           ;uart.c: 100: *brgh=(char)((brg >> 8) & 0xff);
  2693  0004D4  0100               	movlb	0	; () banked
  2694  0004D6  5173               	movf	(GetBaudRateConfig@brg+1)& (0+255),w,b
  2695  0004D8  C06A  FFD9         	movff	GetBaudRateConfig@brgh,fsr2l
  2696  0004DC  C06B  FFDA         	movff	GetBaudRateConfig@brgh+1,fsr2h
  2697  0004E0  6EDF               	movwf	indf2,c
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;uart.c: 101: *brgl=(char)(brg & 0xff);
  2701  0004E2  C06C  FFD9         	movff	GetBaudRateConfig@brgl,fsr2l
  2702  0004E6  C06D  FFDA         	movff	GetBaudRateConfig@brgl+1,fsr2h
  2703  0004EA  C072  FFDF         	movff	GetBaudRateConfig@brg,indf2
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;uart.c: 102: return 1;
  2707  0004EE  0E01               	movlw	1
  2708  0004F0  0012               	return	
  2709  0004F2                     __end_of_GetBaudRateConfig:
  2710                           	opt stack 0
  2711                           tblptru	equ	0xFF8
  2712                           postinc0	equ	0xFEE
  2713                           wreg	equ	0xFE8
  2714                           indf1	equ	0xFE7
  2715                           postinc1	equ	0xFE6
  2716                           postdec1	equ	0xFE5
  2717                           fsr1h	equ	0xFE2
  2718                           fsr1l	equ	0xFE1
  2719                           indf2	equ	0xFDF
  2720                           postinc2	equ	0xFDE
  2721                           postdec2	equ	0xFDD
  2722                           plusw2	equ	0xFDB
  2723                           fsr2h	equ	0xFDA
  2724                           fsr2l	equ	0xFD9
  2725                           status	equ	0xFD8
  2726                           
  2727 ;; *************** function _uartEnableSend *****************
  2728 ;; Defined at:
  2729 ;;		line 139 in file "uart.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;  uart            2    0[BANK0 ] PTR struct .
  2732 ;;		 -> uart(25), 
  2733 ;;  onoff           1    2[BANK0 ] unsigned char 
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;		None
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2745 ;;      Params:         0       3       0       0       0       0       0
  2746 ;;      Locals:         0       0       0       0       0       0       0
  2747 ;;      Temps:          1       0       0       0       0       0       0
  2748 ;;      Totals:         1       3       0       0       0       0       0
  2749 ;;Total ram usage:        4 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    3
  2752 ;; This function calls:
  2753 ;;		Nothing
  2754 ;; This function is called by:
  2755 ;;		_InitUart
  2756 ;;		_uartSendByte
  2757 ;;		_uartSendString
  2758 ;;		_uartSendString0
  2759 ;;		_uartSendBuf
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           	psect	text12
  2764  000E80                     __ptext12:
  2765                           	opt stack 0
  2766  000E80                     _uartEnableSend:
  2767                           	opt stack 26
  2768                           
  2769                           ;uart.c: 141: switch (uart->number)
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;incstack = 0
  2773  000E80  D016               	goto	l3340
  2774  000E82                     l3334:
  2775  000E82  C062  F026         	movff	uartEnableSend@onoff,??_uartEnableSend
  2776  000E86  0E01               	movlw	1
  2777  000E88  1626               	andwf	??_uartEnableSend,f,c
  2778  000E8A  3A26               	swapf	??_uartEnableSend,f,c
  2779  000E8C  509D               	movf	3997,w,c	;volatile
  2780  000E8E  1826               	xorwf	??_uartEnableSend,w,c
  2781  000E90  0BEF               	andlw	-17
  2782  000E92  1826               	xorwf	??_uartEnableSend,w,c
  2783  000E94  6E9D               	movwf	3997,c	;volatile
  2784  000E96  0012               	return	
  2785  000E98                     l3336:
  2786  000E98  C062  F026         	movff	uartEnableSend@onoff,??_uartEnableSend
  2787  000E9C  0E01               	movlw	1
  2788  000E9E  1626               	andwf	??_uartEnableSend,f,c
  2789  000EA0  3A26               	swapf	??_uartEnableSend,f,c
  2790  000EA2  50A3               	movf	4003,w,c	;volatile
  2791  000EA4  1826               	xorwf	??_uartEnableSend,w,c
  2792  000EA6  0BEF               	andlw	-17
  2793  000EA8  1826               	xorwf	??_uartEnableSend,w,c
  2794  000EAA  6EA3               	movwf	4003,c	;volatile
  2795                           
  2796                           ;uart.c: 145: }
  2797  000EAC  0012               	return	
  2798  000EAE                     l3340:
  2799  000EAE  0100               	movlb	0	; () banked
  2800  000EB0  EE20 F013          	lfsr	2,19
  2801  000EB4  5160               	movf	uartEnableSend@uart& (0+255),w,b
  2802  000EB6  26D9               	addwf	fsr2l,f,c
  2803  000EB8  5161               	movf	(uartEnableSend@uart+1)& (0+255),w,b
  2804  000EBA  22DA               	addwfc	fsr2h,f,c
  2805  000EBC  50DF               	movf	indf2,w,c
  2806                           
  2807                           ; Switch size 1, requested type "space"
  2808                           ; Number of cases is 2, Range of values is 1 to 2
  2809                           ; switch strategies available:
  2810                           ; Name         Instructions Cycles
  2811                           ; simple_byte            7     4 (average)
  2812                           ;	Chosen strategy is simple_byte
  2813  000EBE  0A01               	xorlw	1	; case 1
  2814  000EC0  B4D8               	btfsc	status,2,c
  2815  000EC2  D7DF               	goto	l3334
  2816  000EC4  0A03               	xorlw	3	; case 2
  2817  000EC6  A4D8               	btfss	status,2,c
  2818  000EC8  0012               	return	
  2819  000ECA  D7E6               	goto	l3336
  2820  000ECC                     __end_of_uartEnableSend:
  2821                           	opt stack 0
  2822                           tblptru	equ	0xFF8
  2823                           postinc0	equ	0xFEE
  2824                           wreg	equ	0xFE8
  2825                           indf1	equ	0xFE7
  2826                           postinc1	equ	0xFE6
  2827                           postdec1	equ	0xFE5
  2828                           fsr1h	equ	0xFE2
  2829                           fsr1l	equ	0xFE1
  2830                           indf2	equ	0xFDF
  2831                           postinc2	equ	0xFDE
  2832                           postdec2	equ	0xFDD
  2833                           plusw2	equ	0xFDB
  2834                           fsr2h	equ	0xFDA
  2835                           fsr2l	equ	0xFD9
  2836                           status	equ	0xFD8
  2837                           
  2838 ;; *************** function _uartEnableRecv *****************
  2839 ;; Defined at:
  2840 ;;		line 148 in file "uart.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;  uart            2    0[BANK0 ] PTR struct .
  2843 ;;		 -> uart(25), 
  2844 ;;  onoff           1    2[BANK0 ] unsigned char 
  2845 ;; Auto vars:     Size  Location     Type
  2846 ;;		None
  2847 ;; Return value:  Size  Location     Type
  2848 ;;                  1    wreg      void 
  2849 ;; Registers used:
  2850 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2851 ;; Tracked objects:
  2852 ;;		On entry : 0/0
  2853 ;;		On exit  : 0/0
  2854 ;;		Unchanged: 0/0
  2855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2856 ;;      Params:         0       3       0       0       0       0       0
  2857 ;;      Locals:         0       0       0       0       0       0       0
  2858 ;;      Temps:          1       0       0       0       0       0       0
  2859 ;;      Totals:         1       3       0       0       0       0       0
  2860 ;;Total ram usage:        4 bytes
  2861 ;; Hardware stack levels used:    1
  2862 ;; Hardware stack levels required when called:    3
  2863 ;; This function calls:
  2864 ;;		Nothing
  2865 ;; This function is called by:
  2866 ;;		_InitUart
  2867 ;; This function uses a non-reentrant model
  2868 ;;
  2869                           
  2870                           	psect	text13
  2871  000E30                     __ptext13:
  2872                           	opt stack 0
  2873  000E30                     _uartEnableRecv:
  2874                           	opt stack 26
  2875                           
  2876                           ;uart.c: 150: switch (uart->number)
  2877                           
  2878                           ;incstack = 0
  2879  000E30  D018               	goto	l3350
  2880  000E32                     l3344:
  2881  000E32  C062  F026         	movff	uartEnableRecv@onoff,??_uartEnableRecv
  2882  000E36  0E01               	movlw	1
  2883  000E38  1626               	andwf	??_uartEnableRecv,f,c
  2884  000E3A  3A26               	swapf	??_uartEnableRecv,f,c
  2885  000E3C  4626               	rlncf	??_uartEnableRecv,f,c
  2886  000E3E  509D               	movf	3997,w,c	;volatile
  2887  000E40  1826               	xorwf	??_uartEnableRecv,w,c
  2888  000E42  0BDF               	andlw	-33
  2889  000E44  1826               	xorwf	??_uartEnableRecv,w,c
  2890  000E46  6E9D               	movwf	3997,c	;volatile
  2891  000E48  0012               	return	
  2892  000E4A                     l3346:
  2893  000E4A  C062  F026         	movff	uartEnableRecv@onoff,??_uartEnableRecv
  2894  000E4E  0E01               	movlw	1
  2895  000E50  1626               	andwf	??_uartEnableRecv,f,c
  2896  000E52  3A26               	swapf	??_uartEnableRecv,f,c
  2897  000E54  4626               	rlncf	??_uartEnableRecv,f,c
  2898  000E56  50A3               	movf	4003,w,c	;volatile
  2899  000E58  1826               	xorwf	??_uartEnableRecv,w,c
  2900  000E5A  0BDF               	andlw	-33
  2901  000E5C  1826               	xorwf	??_uartEnableRecv,w,c
  2902  000E5E  6EA3               	movwf	4003,c	;volatile
  2903                           
  2904                           ;uart.c: 154: }
  2905  000E60  0012               	return	
  2906  000E62                     l3350:
  2907  000E62  0100               	movlb	0	; () banked
  2908  000E64  EE20 F013          	lfsr	2,19
  2909  000E68  5160               	movf	uartEnableRecv@uart& (0+255),w,b
  2910  000E6A  26D9               	addwf	fsr2l,f,c
  2911  000E6C  5161               	movf	(uartEnableRecv@uart+1)& (0+255),w,b
  2912  000E6E  22DA               	addwfc	fsr2h,f,c
  2913  000E70  50DF               	movf	indf2,w,c
  2914                           
  2915                           ; Switch size 1, requested type "space"
  2916                           ; Number of cases is 2, Range of values is 1 to 2
  2917                           ; switch strategies available:
  2918                           ; Name         Instructions Cycles
  2919                           ; simple_byte            7     4 (average)
  2920                           ;	Chosen strategy is simple_byte
  2921  000E72  0A01               	xorlw	1	; case 1
  2922  000E74  B4D8               	btfsc	status,2,c
  2923  000E76  D7DD               	goto	l3344
  2924  000E78  0A03               	xorlw	3	; case 2
  2925  000E7A  A4D8               	btfss	status,2,c
  2926  000E7C  0012               	return	
  2927  000E7E  D7E5               	goto	l3346
  2928  000E80                     __end_of_uartEnableRecv:
  2929                           	opt stack 0
  2930                           tblptru	equ	0xFF8
  2931                           postinc0	equ	0xFEE
  2932                           wreg	equ	0xFE8
  2933                           indf1	equ	0xFE7
  2934                           postinc1	equ	0xFE6
  2935                           postdec1	equ	0xFE5
  2936                           fsr1h	equ	0xFE2
  2937                           fsr1l	equ	0xFE1
  2938                           indf2	equ	0xFDF
  2939                           postinc2	equ	0xFDE
  2940                           postdec2	equ	0xFDD
  2941                           plusw2	equ	0xFDB
  2942                           fsr2h	equ	0xFDA
  2943                           fsr2l	equ	0xFD9
  2944                           status	equ	0xFD8
  2945                           
  2946 ;; *************** function _InitSystem *****************
  2947 ;; Defined at:
  2948 ;;		line 67 in file "main.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;		None
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;		None
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      void 
  2955 ;; Registers used:
  2956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2962 ;;      Params:         0       0       0       0       0       0       0
  2963 ;;      Locals:         0       0       0       0       0       0       0
  2964 ;;      Temps:          0       0       0       0       0       0       0
  2965 ;;      Totals:         0       0       0       0       0       0       0
  2966 ;;Total ram usage:        0 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    5
  2969 ;; This function calls:
  2970 ;;		_LoadConfigData
  2971 ;;		_SetupInternalOscillator
  2972 ;;		_ledInit
  2973 ;; This function is called by:
  2974 ;;		_main
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           	psect	text14
  2979  000B3C                     __ptext14:
  2980                           	opt stack 0
  2981  000B3C                     _InitSystem:
  2982                           	opt stack 25
  2983                           
  2984                           ;main.c: 70: SetupInternalOscillator((0b00111),(0b1));
  2985                           
  2986                           ;incstack = 0
  2987  000B3C  0E01               	movlw	1
  2988  000B3E  6E26               	movwf	SetupInternalOscillator@enpll,c
  2989  000B40  0E07               	movlw	7
  2990  000B42  EC44  F006         	call	_SetupInternalOscillator
  2991                           
  2992                           ;main.c: 73: LoadConfigData();
  2993  000B46  EC08  F008         	call	_LoadConfigData	;wreg free
  2994                           
  2995                           ;main.c: 76: INTCON=0;
  2996  000B4A  0E00               	movlw	0
  2997  000B4C  6EF2               	movwf	intcon,c	;volatile
  2998                           
  2999                           ;main.c: 77: INTCON3=0;
  3000  000B4E  0E00               	movlw	0
  3001  000B50  6EF0               	movwf	intcon3,c	;volatile
  3002                           
  3003                           ;main.c: 78: PIE1=0;
  3004  000B52  0E00               	movlw	0
  3005  000B54  6E9D               	movwf	3997,c	;volatile
  3006                           
  3007                           ;main.c: 79: PIE2=0;
  3008  000B56  0E00               	movlw	0
  3009  000B58  6EA0               	movwf	4000,c	;volatile
  3010                           
  3011                           ;main.c: 80: PIE3=0;
  3012  000B5A  0E00               	movlw	0
  3013  000B5C  6EA3               	movwf	4003,c	;volatile
  3014                           
  3015                           ;main.c: 81: PIE4=0;
  3016  000B5E  0E00               	movlw	0
  3017  000B60  6E7A               	movwf	3962,c	;volatile
  3018                           
  3019                           ;main.c: 82: PIE5=0;
  3020  000B62  0E00               	movlw	0
  3021  000B64  6E7D               	movwf	3965,c	;volatile
  3022                           
  3023                           ;main.c: 84: RCONbits.IPEN = 0;
  3024  000B66  9ED0               	bcf	4048,7,c	;volatile
  3025                           
  3026                           ;main.c: 85: INTCONbits.PEIE = 1;
  3027  000B68  8CF2               	bsf	intcon,6,c	;volatile
  3028                           
  3029                           ;main.c: 86: INTCONbits.GIE = 1;
  3030  000B6A  8EF2               	bsf	intcon,7,c	;volatile
  3031                           
  3032                           ;main.c: 89: TRISAbits.RA0=0;
  3033  000B6C  9092               	bcf	3986,0,c	;volatile
  3034                           
  3035                           ;main.c: 90: TRISAbits.RA1=0;
  3036  000B6E  9292               	bcf	3986,1,c	;volatile
  3037                           
  3038                           ;main.c: 91: TRISAbits.RA2=0;
  3039  000B70  9492               	bcf	3986,2,c	;volatile
  3040                           
  3041                           ;main.c: 92: TRISAbits.RA3=0;
  3042  000B72  9692               	bcf	3986,3,c	;volatile
  3043                           
  3044                           ;main.c: 93: TRISAbits.RA4=0;
  3045  000B74  9892               	bcf	3986,4,c	;volatile
  3046                           
  3047                           ;main.c: 94: TRISAbits.RA5=0;
  3048  000B76  9A92               	bcf	3986,5,c	;volatile
  3049                           
  3050                           ;main.c: 95: ANSELAbits.ANSA0=0;
  3051  000B78  010F               	movlb	15	; () banked
  3052  000B7A  9138               	bcf	56,0,b	;volatile
  3053                           
  3054                           ; BSR set to: 15
  3055                           ;main.c: 96: ANSELAbits.ANSA1=0;
  3056  000B7C  010F               	movlb	15	; () banked
  3057  000B7E  9338               	bcf	56,1,b	;volatile
  3058                           
  3059                           ; BSR set to: 15
  3060                           ;main.c: 97: ANSELAbits.ANSA2=0;
  3061  000B80  010F               	movlb	15	; () banked
  3062  000B82  9538               	bcf	56,2,b	;volatile
  3063                           
  3064                           ; BSR set to: 15
  3065                           ;main.c: 98: ANSELAbits.ANSA3=0;
  3066  000B84  010F               	movlb	15	; () banked
  3067  000B86  9738               	bcf	56,3,b	;volatile
  3068                           
  3069                           ; BSR set to: 15
  3070                           ;main.c: 99: ANSELAbits.ANSA5=0;
  3071  000B88  010F               	movlb	15	; () banked
  3072  000B8A  9B38               	bcf	56,5,b	;volatile
  3073                           
  3074                           ; BSR set to: 15
  3075                           ;main.c: 101: TRISBbits.RB4=0;
  3076  000B8C  9893               	bcf	3987,4,c	;volatile
  3077                           
  3078                           ; BSR set to: 15
  3079                           ;main.c: 102: TRISBbits.RB5=0;
  3080  000B8E  9A93               	bcf	3987,5,c	;volatile
  3081                           
  3082                           ; BSR set to: 15
  3083                           ;main.c: 104: ledInit(&(ledRx),(5),(5),0b00000001);
  3084  000B90  0E30               	movlw	low _ledRx
  3085  000B92  0100               	movlb	0	; () banked
  3086  000B94  6F60               	movwf	ledInit@led& (0+255),b
  3087  000B96  0E00               	movlw	high _ledRx
  3088  000B98  0100               	movlb	0	; () banked
  3089  000B9A  6F61               	movwf	(ledInit@led+1)& (0+255),b
  3090  000B9C  0E00               	movlw	0
  3091  000B9E  0100               	movlb	0	; () banked
  3092  000BA0  6F63               	movwf	(ledInit@on+1)& (0+255),b
  3093  000BA2  0E05               	movlw	5
  3094  000BA4  6F62               	movwf	ledInit@on& (0+255),b
  3095  000BA6  0E00               	movlw	0
  3096  000BA8  0100               	movlb	0	; () banked
  3097  000BAA  6F65               	movwf	(ledInit@off+1)& (0+255),b
  3098  000BAC  0E05               	movlw	5
  3099  000BAE  6F64               	movwf	ledInit@off& (0+255),b
  3100  000BB0  0E01               	movlw	1
  3101  000BB2  0100               	movlb	0	; () banked
  3102  000BB4  6F66               	movwf	ledInit@bm& (0+255),b
  3103  000BB6  ECBF  F006         	call	_ledInit	;wreg free
  3104                           
  3105                           ;main.c: 105: ledInit(&(ledTx),(5),(5),0b00000010);
  3106  000BBA  0E27               	movlw	low _ledTx
  3107  000BBC  0100               	movlb	0	; () banked
  3108  000BBE  6F60               	movwf	ledInit@led& (0+255),b
  3109  000BC0  0E00               	movlw	high _ledTx
  3110  000BC2  0100               	movlb	0	; () banked
  3111  000BC4  6F61               	movwf	(ledInit@led+1)& (0+255),b
  3112  000BC6  0E00               	movlw	0
  3113  000BC8  0100               	movlb	0	; () banked
  3114  000BCA  6F63               	movwf	(ledInit@on+1)& (0+255),b
  3115  000BCC  0E05               	movlw	5
  3116  000BCE  6F62               	movwf	ledInit@on& (0+255),b
  3117  000BD0  0E00               	movlw	0
  3118  000BD2  0100               	movlb	0	; () banked
  3119  000BD4  6F65               	movwf	(ledInit@off+1)& (0+255),b
  3120  000BD6  0E05               	movlw	5
  3121  000BD8  6F64               	movwf	ledInit@off& (0+255),b
  3122  000BDA  0E02               	movlw	2
  3123  000BDC  0100               	movlb	0	; () banked
  3124  000BDE  6F66               	movwf	ledInit@bm& (0+255),b
  3125  000BE0  ECBF  F006         	call	_ledInit	;wreg free
  3126  000BE4  0012               	return		;funcret
  3127  000BE6                     __end_of_InitSystem:
  3128                           	opt stack 0
  3129                           tblptru	equ	0xFF8
  3130                           intcon	equ	0xFF2
  3131                           intcon3	equ	0xFF0
  3132                           postinc0	equ	0xFEE
  3133                           wreg	equ	0xFE8
  3134                           indf1	equ	0xFE7
  3135                           postinc1	equ	0xFE6
  3136                           postdec1	equ	0xFE5
  3137                           fsr1h	equ	0xFE2
  3138                           fsr1l	equ	0xFE1
  3139                           indf2	equ	0xFDF
  3140                           postinc2	equ	0xFDE
  3141                           postdec2	equ	0xFDD
  3142                           plusw2	equ	0xFDB
  3143                           fsr2h	equ	0xFDA
  3144                           fsr2l	equ	0xFD9
  3145                           status	equ	0xFD8
  3146                           
  3147 ;; *************** function _ledInit *****************
  3148 ;; Defined at:
  3149 ;;		line 12 in file "blink.c"
  3150 ;; Parameters:    Size  Location     Type
  3151 ;;  led             2    0[BANK0 ] PTR struct .
  3152 ;;		 -> ledTx(9), ledRx(9), 
  3153 ;;  on              2    2[BANK0 ] int 
  3154 ;;  off             2    4[BANK0 ] int 
  3155 ;;  bm              1    6[BANK0 ] unsigned char 
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;		None
  3158 ;; Return value:  Size  Location     Type
  3159 ;;                  1    wreg      void 
  3160 ;; Registers used:
  3161 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3167 ;;      Params:         0       7       0       0       0       0       0
  3168 ;;      Locals:         0       0       0       0       0       0       0
  3169 ;;      Temps:          0       0       0       0       0       0       0
  3170 ;;      Totals:         0       7       0       0       0       0       0
  3171 ;;Total ram usage:        7 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:    3
  3174 ;; This function calls:
  3175 ;;		Nothing
  3176 ;; This function is called by:
  3177 ;;		_InitSystem
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           	psect	text15
  3182  000D7E                     __ptext15:
  3183                           	opt stack 0
  3184  000D7E                     _ledInit:
  3185                           	opt stack 26
  3186                           
  3187                           ;blink.c: 14: led->onTime=on;
  3188                           
  3189                           ;incstack = 0
  3190  000D7E  0100               	movlb	0	; () banked
  3191  000D80  EE20 F003          	lfsr	2,3
  3192  000D84  5160               	movf	ledInit@led& (0+255),w,b
  3193  000D86  26D9               	addwf	fsr2l,f,c
  3194  000D88  5161               	movf	(ledInit@led+1)& (0+255),w,b
  3195  000D8A  22DA               	addwfc	fsr2h,f,c
  3196  000D8C  C062  FFDE         	movff	ledInit@on,postinc2
  3197  000D90  C063  FFDD         	movff	ledInit@on+1,postdec2
  3198                           
  3199                           ;blink.c: 15: led->offTime=off;
  3200  000D94  0100               	movlb	0	; () banked
  3201  000D96  EE20 F005          	lfsr	2,5
  3202  000D9A  5160               	movf	ledInit@led& (0+255),w,b
  3203  000D9C  26D9               	addwf	fsr2l,f,c
  3204  000D9E  5161               	movf	(ledInit@led+1)& (0+255),w,b
  3205  000DA0  22DA               	addwfc	fsr2h,f,c
  3206  000DA2  C064  FFDE         	movff	ledInit@off,postinc2
  3207  000DA6  C065  FFDD         	movff	ledInit@off+1,postdec2
  3208                           
  3209                           ;blink.c: 16: led->bitMask=bm;
  3210  000DAA  0100               	movlb	0	; () banked
  3211  000DAC  EE20 F007          	lfsr	2,7
  3212  000DB0  5160               	movf	ledInit@led& (0+255),w,b
  3213  000DB2  26D9               	addwf	fsr2l,f,c
  3214  000DB4  5161               	movf	(ledInit@led+1)& (0+255),w,b
  3215  000DB6  22DA               	addwfc	fsr2h,f,c
  3216  000DB8  C066  FFDF         	movff	ledInit@bm,indf2
  3217                           
  3218                           ;blink.c: 17: led->on=0;
  3219  000DBC  0100               	movlb	0	; () banked
  3220  000DBE  EE20 F002          	lfsr	2,2
  3221  000DC2  5160               	movf	ledInit@led& (0+255),w,b
  3222  000DC4  26D9               	addwf	fsr2l,f,c
  3223  000DC6  5161               	movf	(ledInit@led+1)& (0+255),w,b
  3224  000DC8  22DA               	addwfc	fsr2h,f,c
  3225  000DCA  0E00               	movlw	0
  3226  000DCC  6EDF               	movwf	indf2,c
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;blink.c: 18: led->count=0;
  3230  000DCE  C060  FFD9         	movff	ledInit@led,fsr2l
  3231  000DD2  C061  FFDA         	movff	ledInit@led+1,fsr2h
  3232  000DD6  0E00               	movlw	0
  3233  000DD8  6EDE               	movwf	postinc2,c
  3234  000DDA  0E00               	movlw	0
  3235  000DDC  6EDD               	movwf	postdec2,c
  3236                           
  3237                           ; BSR set to: 0
  3238  000DDE  0012               	return		;funcret
  3239  000DE0                     __end_of_ledInit:
  3240                           	opt stack 0
  3241                           tblptru	equ	0xFF8
  3242                           intcon	equ	0xFF2
  3243                           intcon3	equ	0xFF0
  3244                           postinc0	equ	0xFEE
  3245                           wreg	equ	0xFE8
  3246                           indf1	equ	0xFE7
  3247                           postinc1	equ	0xFE6
  3248                           postdec1	equ	0xFE5
  3249                           fsr1h	equ	0xFE2
  3250                           fsr1l	equ	0xFE1
  3251                           indf2	equ	0xFDF
  3252                           postinc2	equ	0xFDE
  3253                           postdec2	equ	0xFDD
  3254                           plusw2	equ	0xFDB
  3255                           fsr2h	equ	0xFDA
  3256                           fsr2l	equ	0xFD9
  3257                           status	equ	0xFD8
  3258                           
  3259 ;; *************** function _SetupInternalOscillator *****************
  3260 ;; Defined at:
  3261 ;;		line 6 in file "intosc.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;  setBits         1    wreg     unsigned char 
  3264 ;;  enpll           1   37[COMRAM] unsigned char 
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;  setBits         1    1[BANK0 ] unsigned char 
  3267 ;; Return value:  Size  Location     Type
  3268 ;;                  1    wreg      void 
  3269 ;; Registers used:
  3270 ;;		wreg, status,2, status,0
  3271 ;; Tracked objects:
  3272 ;;		On entry : 0/0
  3273 ;;		On exit  : 0/0
  3274 ;;		Unchanged: 0/0
  3275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3276 ;;      Params:         1       0       0       0       0       0       0
  3277 ;;      Locals:         0       1       0       0       0       0       0
  3278 ;;      Temps:          0       1       0       0       0       0       0
  3279 ;;      Totals:         1       2       0       0       0       0       0
  3280 ;;Total ram usage:        3 bytes
  3281 ;; Hardware stack levels used:    1
  3282 ;; Hardware stack levels required when called:    3
  3283 ;; This function calls:
  3284 ;;		Nothing
  3285 ;; This function is called by:
  3286 ;;		_InitSystem
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           	psect	text16
  3291  000C88                     __ptext16:
  3292                           	opt stack 0
  3293  000C88                     _SetupInternalOscillator:
  3294                           	opt stack 26
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;incstack = 0
  3298                           ;SetupInternalOscillator@setBits stored from wreg
  3299  000C88  0100               	movlb	0	; () banked
  3300  000C8A  6F61               	movwf	SetupInternalOscillator@setBits& (0+255),b
  3301                           
  3302                           ;intosc.c: 8: OSCCONbits.IRCF = setBits & 7;
  3303  000C8C  C061  F060         	movff	SetupInternalOscillator@setBits,??_SetupInternalOscillator
  3304  000C90  0E07               	movlw	7
  3305  000C92  0100               	movlb	0	; () banked
  3306  000C94  1760               	andwf	??_SetupInternalOscillator& (0+255),f,b
  3307  000C96  0100               	movlb	0	; () banked
  3308  000C98  3B60               	swapf	??_SetupInternalOscillator& (0+255),f,b
  3309  000C9A  50D3               	movf	4051,w,c	;volatile
  3310  000C9C  0100               	movlb	0	; () banked
  3311  000C9E  1960               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  3312  000CA0  0B8F               	andlw	-113
  3313  000CA2  1960               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  3314  000CA4  6ED3               	movwf	4051,c	;volatile
  3315                           
  3316                           ; BSR set to: 0
  3317                           ;intosc.c: 9: OSCCONbits.SCS = 0b00;
  3318  000CA6  0EFC               	movlw	-4
  3319  000CA8  16D3               	andwf	4051,f,c	;volatile
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;intosc.c: 10: OSCTUNEbits.PLLEN = enpll;
  3323  000CAA  B026               	btfsc	SetupInternalOscillator@enpll,0,c
  3324  000CAC  D002               	bra	u985
  3325  000CAE  9C9B               	bcf	3995,6,c	;volatile
  3326  000CB0  D001               	bra	u986
  3327  000CB2                     u985:
  3328  000CB2  8C9B               	bsf	3995,6,c	;volatile
  3329  000CB4                     u986:
  3330                           
  3331                           ;intosc.c: 12: OSCCON2bits.MFIOSEL = (setBits & 8) >> 3;
  3332  000CB4  C061  F060         	movff	SetupInternalOscillator@setBits,??_SetupInternalOscillator
  3333  000CB8  0100               	movlb	0	; () banked
  3334  000CBA  90D8               	bcf	status,0,c
  3335  000CBC  3360               	rrcf	??_SetupInternalOscillator& (0+255),f,b
  3336  000CBE  0100               	movlb	0	; () banked
  3337  000CC0  90D8               	bcf	status,0,c
  3338  000CC2  3360               	rrcf	??_SetupInternalOscillator& (0+255),f,b
  3339  000CC4  0100               	movlb	0	; () banked
  3340  000CC6  90D8               	bcf	status,0,c
  3341  000CC8  3360               	rrcf	??_SetupInternalOscillator& (0+255),f,b
  3342  000CCA  0E01               	movlw	1
  3343  000CCC  0100               	movlb	0	; () banked
  3344  000CCE  1760               	andwf	??_SetupInternalOscillator& (0+255),f,b
  3345  000CD0  0100               	movlb	0	; () banked
  3346  000CD2  3B60               	swapf	??_SetupInternalOscillator& (0+255),f,b
  3347  000CD4  50D2               	movf	4050,w,c	;volatile
  3348  000CD6  0100               	movlb	0	; () banked
  3349  000CD8  1960               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  3350  000CDA  0BEF               	andlw	-17
  3351  000CDC  1960               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  3352  000CDE  6ED2               	movwf	4050,c	;volatile
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;intosc.c: 13: OSCTUNEbits.INTSRC = (setBits & 16) >> 4;
  3356  000CE0  C061  F060         	movff	SetupInternalOscillator@setBits,??_SetupInternalOscillator
  3357  000CE4  0100               	movlb	0	; () banked
  3358  000CE6  3B60               	swapf	??_SetupInternalOscillator& (0+255),f,b
  3359  000CE8  0E0F               	movlw	15
  3360  000CEA  1760               	andwf	??_SetupInternalOscillator& (0+255),f,b
  3361  000CEC  0E01               	movlw	1
  3362  000CEE  0100               	movlb	0	; () banked
  3363  000CF0  1760               	andwf	??_SetupInternalOscillator& (0+255),f,b
  3364  000CF2  0100               	movlb	0	; () banked
  3365  000CF4  3360               	rrcf	??_SetupInternalOscillator& (0+255),f,b
  3366  000CF6  3360               	rrcf	??_SetupInternalOscillator& (0+255),f,b
  3367  000CF8  509B               	movf	3995,w,c	;volatile
  3368  000CFA  0100               	movlb	0	; () banked
  3369  000CFC  1960               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  3370  000CFE  0B7F               	andlw	-129
  3371  000D00  1960               	xorwf	??_SetupInternalOscillator& (0+255),w,b
  3372  000D02  6E9B               	movwf	3995,c	;volatile
  3373                           
  3374                           ; BSR set to: 0
  3375  000D04  0012               	return		;funcret
  3376  000D06                     __end_of_SetupInternalOscillator:
  3377                           	opt stack 0
  3378                           tblptru	equ	0xFF8
  3379                           intcon	equ	0xFF2
  3380                           intcon3	equ	0xFF0
  3381                           postinc0	equ	0xFEE
  3382                           wreg	equ	0xFE8
  3383                           indf1	equ	0xFE7
  3384                           postinc1	equ	0xFE6
  3385                           postdec1	equ	0xFE5
  3386                           fsr1h	equ	0xFE2
  3387                           fsr1l	equ	0xFE1
  3388                           indf2	equ	0xFDF
  3389                           postinc2	equ	0xFDE
  3390                           postdec2	equ	0xFDD
  3391                           plusw2	equ	0xFDB
  3392                           fsr2h	equ	0xFDA
  3393                           fsr2l	equ	0xFD9
  3394                           status	equ	0xFD8
  3395                           
  3396 ;; *************** function _LoadConfigData *****************
  3397 ;; Defined at:
  3398 ;;		line 57 in file "main.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;		None
  3401 ;; Auto vars:     Size  Location     Type
  3402 ;;		None
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  1    wreg      void 
  3405 ;; Registers used:
  3406 ;;		wreg, status,2, cstack
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3412 ;;      Params:         0       0       0       0       0       0       0
  3413 ;;      Locals:         0       0       0       0       0       0       0
  3414 ;;      Temps:          0       0       0       0       0       0       0
  3415 ;;      Totals:         0       0       0       0       0       0       0
  3416 ;;Total ram usage:        0 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:    4
  3419 ;; This function calls:
  3420 ;;		_EERead
  3421 ;; This function is called by:
  3422 ;;		_InitSystem
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           	psect	text17
  3427  001010                     __ptext17:
  3428                           	opt stack 0
  3429  001010                     _LoadConfigData:
  3430                           	opt stack 25
  3431                           
  3432                           ;main.c: 59: adr=EERead((0));
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;incstack = 0
  3436  001010  0E00               	movlw	0
  3437  001012  ECE1  F007         	call	_EERead
  3438  001016  6E39               	movwf	_adr,c
  3439  001018  0012               	return		;funcret
  3440  00101A                     __end_of_LoadConfigData:
  3441                           	opt stack 0
  3442                           tblptru	equ	0xFF8
  3443                           intcon	equ	0xFF2
  3444                           intcon3	equ	0xFF0
  3445                           postinc0	equ	0xFEE
  3446                           wreg	equ	0xFE8
  3447                           indf1	equ	0xFE7
  3448                           postinc1	equ	0xFE6
  3449                           postdec1	equ	0xFE5
  3450                           fsr1h	equ	0xFE2
  3451                           fsr1l	equ	0xFE1
  3452                           indf2	equ	0xFDF
  3453                           postinc2	equ	0xFDE
  3454                           postdec2	equ	0xFDD
  3455                           plusw2	equ	0xFDB
  3456                           fsr2h	equ	0xFDA
  3457                           fsr2l	equ	0xFD9
  3458                           status	equ	0xFD8
  3459                           
  3460 ;; *************** function _EERead *****************
  3461 ;; Defined at:
  3462 ;;		line 40 in file "eeprom.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  adresse         1    wreg     unsigned char 
  3465 ;; Auto vars:     Size  Location     Type
  3466 ;;  adresse         1    0[BANK0 ] unsigned char 
  3467 ;;  orgGIE          1    1[BANK0 ] unsigned char 
  3468 ;;  data            1    0        unsigned char 
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  1    wreg      unsigned char 
  3471 ;; Registers used:
  3472 ;;		wreg, status,2
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3478 ;;      Params:         0       0       0       0       0       0       0
  3479 ;;      Locals:         0       2       0       0       0       0       0
  3480 ;;      Temps:          0       0       0       0       0       0       0
  3481 ;;      Totals:         0       2       0       0       0       0       0
  3482 ;;Total ram usage:        2 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    3
  3485 ;; This function calls:
  3486 ;;		Nothing
  3487 ;; This function is called by:
  3488 ;;		_LoadConfigData
  3489 ;;		_EEReadInt
  3490 ;;		_EEReadLong
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           	psect	text18
  3495  000FC2                     __ptext18:
  3496                           	opt stack 0
  3497  000FC2                     _EERead:
  3498                           	opt stack 25
  3499                           
  3500                           ;incstack = 0
  3501                           ;EERead@adresse stored from wreg
  3502  000FC2  0100               	movlb	0	; () banked
  3503  000FC4  6F60               	movwf	EERead@adresse& (0+255),b
  3504                           
  3505                           ;eeprom.c: 42: char orgGIE;
  3506                           ;eeprom.c: 43: char data;
  3507                           ;eeprom.c: 44: orgGIE=INTCONbits.GIE;
  3508  000FC6  0E00               	movlw	0
  3509  000FC8  BEF2               	btfsc	intcon,7,c	;volatile
  3510  000FCA  0E01               	movlw	1
  3511  000FCC  0100               	movlb	0	; () banked
  3512  000FCE  6F61               	movwf	EERead@orgGIE& (0+255),b
  3513                           
  3514                           ;eeprom.c: 46: INTCONbits.GIE=0;
  3515  000FD0  9EF2               	bcf	intcon,7,c	;volatile
  3516                           
  3517                           ;eeprom.c: 47: EECON1bits.CFGS=0;
  3518  000FD2  9CA6               	bcf	4006,6,c	;volatile
  3519                           
  3520                           ;eeprom.c: 48: EECON1bits.EEPGD=0;
  3521  000FD4  9EA6               	bcf	4006,7,c	;volatile
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;eeprom.c: 49: EEADR=adresse;
  3525  000FD6  C060  FFA9         	movff	EERead@adresse,4009	;volatile
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;eeprom.c: 50: EECON1bits.RD=1;
  3529  000FDA  80A6               	bsf	4006,0,c	;volatile
  3530                           
  3531                           ; BSR set to: 0
  3532                           ;eeprom.c: 51: INTCONbits.GIE=orgGIE;
  3533  000FDC  0100               	movlb	0	; () banked
  3534  000FDE  B161               	btfsc	EERead@orgGIE& (0+255),0,b
  3535  000FE0  D002               	bra	u945
  3536  000FE2  9EF2               	bcf	intcon,7,c	;volatile
  3537  000FE4  D001               	bra	u946
  3538  000FE6                     u945:
  3539  000FE6  8EF2               	bsf	intcon,7,c	;volatile
  3540  000FE8                     u946:
  3541                           
  3542                           ;eeprom.c: 53: return EEDATA;
  3543  000FE8  50A8               	movf	4008,w,c	;volatile
  3544  000FEA  0012               	return	
  3545  000FEC                     __end_of_EERead:
  3546                           	opt stack 0
  3547                           tblptru	equ	0xFF8
  3548                           intcon	equ	0xFF2
  3549                           intcon3	equ	0xFF0
  3550                           postinc0	equ	0xFEE
  3551                           wreg	equ	0xFE8
  3552                           indf1	equ	0xFE7
  3553                           postinc1	equ	0xFE6
  3554                           postdec1	equ	0xFE5
  3555                           fsr1h	equ	0xFE2
  3556                           fsr1l	equ	0xFE1
  3557                           indf2	equ	0xFDF
  3558                           postinc2	equ	0xFDE
  3559                           postdec2	equ	0xFDD
  3560                           plusw2	equ	0xFDB
  3561                           fsr2h	equ	0xFDA
  3562                           fsr2l	equ	0xFD9
  3563                           status	equ	0xFD8
  3564                           
  3565 ;; *************** function _IntHighRoutine *****************
  3566 ;; Defined at:
  3567 ;;		line 117 in file "main.c"
  3568 ;; Parameters:    Size  Location     Type
  3569 ;;		None
  3570 ;; Auto vars:     Size  Location     Type
  3571 ;;		None
  3572 ;; Return value:  Size  Location     Type
  3573 ;;                  1    wreg      void 
  3574 ;; Registers used:
  3575 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3576 ;; Tracked objects:
  3577 ;;		On entry : 0/0
  3578 ;;		On exit  : 0/0
  3579 ;;		Unchanged: 0/0
  3580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3581 ;;      Params:         0       0       0       0       0       0       0
  3582 ;;      Locals:         0       0       0       0       0       0       0
  3583 ;;      Temps:         14       0       0       0       0       0       0
  3584 ;;      Totals:        14       0       0       0       0       0       0
  3585 ;;Total ram usage:       14 bytes
  3586 ;; Hardware stack levels used:    1
  3587 ;; Hardware stack levels required when called:    2
  3588 ;; This function calls:
  3589 ;;		_uartInterruptHandler
  3590 ;; This function is called by:
  3591 ;;		Interrupt level 2
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           	psect	intcode
  3596  000008                     __pintcode:
  3597                           	opt stack 0
  3598  000008                     _IntHighRoutine:
  3599                           	opt stack 24
  3600                           
  3601                           ;incstack = 0
  3602  000008  823A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3603  00000A  CFFA F018          	movff	pclath,??_IntHighRoutine
  3604  00000E  CFFB F019          	movff	pclatu,??_IntHighRoutine+1
  3605  000012  CFE9 F01A          	movff	fsr0l,??_IntHighRoutine+2
  3606  000016  CFEA F01B          	movff	fsr0h,??_IntHighRoutine+3
  3607  00001A  CFE1 F01C          	movff	fsr1l,??_IntHighRoutine+4
  3608  00001E  CFE2 F01D          	movff	fsr1h,??_IntHighRoutine+5
  3609  000022  CFD9 F01E          	movff	fsr2l,??_IntHighRoutine+6
  3610  000026  CFDA F01F          	movff	fsr2h,??_IntHighRoutine+7
  3611  00002A  CFF3 F020          	movff	prodl,??_IntHighRoutine+8
  3612  00002E  CFF4 F021          	movff	prodh,??_IntHighRoutine+9
  3613  000032  CFF6 F022          	movff	tblptrl,??_IntHighRoutine+10
  3614  000036  CFF7 F023          	movff	tblptrh,??_IntHighRoutine+11
  3615  00003A  CFF8 F024          	movff	tblptru,??_IntHighRoutine+12
  3616  00003E  CFF5 F025          	movff	tablat,??_IntHighRoutine+13
  3617                           
  3618                           ;main.c: 119: INTCONbits.GIE=0;
  3619  000042  9EF2               	bcf	intcon,7,c	;volatile
  3620                           
  3621                           ;main.c: 121: uartInterruptHandler(&(uart));
  3622  000044  0E93               	movlw	low _uart
  3623  000046  6E08               	movwf	uartInterruptHandler@uart,c
  3624  000048  0E00               	movlw	high _uart
  3625  00004A  6E09               	movwf	uartInterruptHandler@uart+1,c
  3626  00004C  EC49  F000         	call	_uartInterruptHandler	;wreg free
  3627                           
  3628                           ;main.c: 123: INTCONbits.GIE=1;
  3629  000050  8EF2               	bsf	intcon,7,c	;volatile
  3630  000052  C025  FFF5         	movff	??_IntHighRoutine+13,tablat
  3631  000056  C024  FFF8         	movff	??_IntHighRoutine+12,tblptru
  3632  00005A  C023  FFF7         	movff	??_IntHighRoutine+11,tblptrh
  3633  00005E  C022  FFF6         	movff	??_IntHighRoutine+10,tblptrl
  3634  000062  C021  FFF4         	movff	??_IntHighRoutine+9,prodh
  3635  000066  C020  FFF3         	movff	??_IntHighRoutine+8,prodl
  3636  00006A  C01F  FFDA         	movff	??_IntHighRoutine+7,fsr2h
  3637  00006E  C01E  FFD9         	movff	??_IntHighRoutine+6,fsr2l
  3638  000072  C01D  FFE2         	movff	??_IntHighRoutine+5,fsr1h
  3639  000076  C01C  FFE1         	movff	??_IntHighRoutine+4,fsr1l
  3640  00007A  C01B  FFEA         	movff	??_IntHighRoutine+3,fsr0h
  3641  00007E  C01A  FFE9         	movff	??_IntHighRoutine+2,fsr0l
  3642  000082  C019  FFFB         	movff	??_IntHighRoutine+1,pclatu
  3643  000086  C018  FFFA         	movff	??_IntHighRoutine,pclath
  3644  00008A  923A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3645  00008C  0011               	retfie		f
  3646  00008E                     __end_of_IntHighRoutine:
  3647                           	opt stack 0
  3648                           pclatu	equ	0xFFB
  3649                           pclath	equ	0xFFA
  3650                           tblptru	equ	0xFF8
  3651                           tblptrh	equ	0xFF7
  3652                           tblptrl	equ	0xFF6
  3653                           tablat	equ	0xFF5
  3654                           prodh	equ	0xFF4
  3655                           prodl	equ	0xFF3
  3656                           intcon	equ	0xFF2
  3657                           intcon3	equ	0xFF0
  3658                           postinc0	equ	0xFEE
  3659                           fsr0h	equ	0xFEA
  3660                           fsr0l	equ	0xFE9
  3661                           wreg	equ	0xFE8
  3662                           indf1	equ	0xFE7
  3663                           postinc1	equ	0xFE6
  3664                           postdec1	equ	0xFE5
  3665                           fsr1h	equ	0xFE2
  3666                           fsr1l	equ	0xFE1
  3667                           indf2	equ	0xFDF
  3668                           postinc2	equ	0xFDE
  3669                           postdec2	equ	0xFDD
  3670                           plusw2	equ	0xFDB
  3671                           fsr2h	equ	0xFDA
  3672                           fsr2l	equ	0xFD9
  3673                           status	equ	0xFD8
  3674                           
  3675 ;; *************** function _uartInterruptHandler *****************
  3676 ;; Defined at:
  3677 ;;		line 206 in file "uart.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;  uart            2    7[COMRAM] PTR struct .
  3680 ;;		 -> uart(25), 
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;  rcsta           2   20[COMRAM] PTR volatile unsigned ch
  3683 ;;		 -> RCSTA2(1), RCSTA1(1), 
  3684 ;;  txsta           2   13[COMRAM] PTR volatile unsigned ch
  3685 ;;		 -> TXSTA2(1), TXSTA1(1), 
  3686 ;;  data            1   22[COMRAM] unsigned char 
  3687 ;;  iRxFlag         1   19[COMRAM] unsigned char 
  3688 ;;  oErr            1   18[COMRAM] unsigned char 
  3689 ;;  fErr            1   17[COMRAM] unsigned char 
  3690 ;;  iRxEnable       1   16[COMRAM] unsigned char 
  3691 ;;  iTxFlag         1   15[COMRAM] unsigned char 
  3692 ;;  iTxEnable       1   12[COMRAM] unsigned char 
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  1    wreg      void 
  3695 ;; Registers used:
  3696 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3702 ;;      Params:         2       0       0       0       0       0       0
  3703 ;;      Locals:        11       0       0       0       0       0       0
  3704 ;;      Temps:          3       0       0       0       0       0       0
  3705 ;;      Totals:        16       0       0       0       0       0       0
  3706 ;;Total ram usage:       16 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:    1
  3709 ;; This function calls:
  3710 ;;		_fifoGet
  3711 ;;		_fifoPut
  3712 ;;		i2_uartEnableSend
  3713 ;; This function is called by:
  3714 ;;		_IntHighRoutine
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           	psect	text20
  3719  000092                     __ptext20:
  3720                           	opt stack 0
  3721  000092                     _uartInterruptHandler:
  3722                           	opt stack 24
  3723                           
  3724                           ;uart.c: 208: char iTxFlag;
  3725                           ;uart.c: 209: char iTxEnable;
  3726                           ;uart.c: 210: char iRxFlag;
  3727                           ;uart.c: 211: char iRxEnable;
  3728                           ;uart.c: 212: char fErr;
  3729                           ;uart.c: 213: char oErr;
  3730                           ;uart.c: 214: volatile unsigned char* rcsta;
  3731                           ;uart.c: 215: volatile unsigned char* txsta;
  3732                           ;uart.c: 217: char data;
  3733                           ;uart.c: 219: switch (uart->number)
  3734                           
  3735                           ;incstack = 0
  3736  000092  D03F               	goto	i2l2536
  3737  000094                     i2l2522:
  3738                           
  3739                           ;uart.c: 222: iTxFlag=PIR1bits.TX1IF;
  3740  000094  0E00               	movlw	0
  3741  000096  B89E               	btfsc	3998,4,c	;volatile
  3742  000098  0E01               	movlw	1
  3743  00009A  6E10               	movwf	uartInterruptHandler@iTxFlag,c
  3744                           
  3745                           ;uart.c: 223: iTxEnable=PIE1bits.TX1IE;
  3746  00009C  0E00               	movlw	0
  3747  00009E  B89D               	btfsc	3997,4,c	;volatile
  3748  0000A0  0E01               	movlw	1
  3749  0000A2  6E0D               	movwf	uartInterruptHandler@iTxEnable,c
  3750                           
  3751                           ;uart.c: 224: iRxFlag=PIR1bits.RC1IF;
  3752  0000A4  0E00               	movlw	0
  3753  0000A6  BA9E               	btfsc	3998,5,c	;volatile
  3754  0000A8  0E01               	movlw	1
  3755  0000AA  6E14               	movwf	uartInterruptHandler@iRxFlag,c
  3756                           
  3757                           ;uart.c: 225: iRxEnable=PIE1bits.RCIE;
  3758  0000AC  0E00               	movlw	0
  3759  0000AE  BA9D               	btfsc	3997,5,c	;volatile
  3760  0000B0  0E01               	movlw	1
  3761  0000B2  6E11               	movwf	uartInterruptHandler@iRxEnable,c
  3762                           
  3763                           ;uart.c: 226: fErr=RCSTA1bits.FERR;
  3764  0000B4  0E00               	movlw	0
  3765  0000B6  B4AB               	btfsc	4011,2,c	;volatile
  3766  0000B8  0E01               	movlw	1
  3767  0000BA  6E12               	movwf	uartInterruptHandler@fErr,c
  3768                           
  3769                           ;uart.c: 227: oErr=RCSTA1bits.OERR;
  3770  0000BC  0E00               	movlw	0
  3771  0000BE  B2AB               	btfsc	4011,1,c	;volatile
  3772  0000C0  0E01               	movlw	1
  3773  0000C2  6E13               	movwf	uartInterruptHandler@oErr,c
  3774                           
  3775                           ;uart.c: 228: rcsta=&RCSTA1;
  3776  0000C4  0EAB               	movlw	171
  3777  0000C6  6E15               	movwf	uartInterruptHandler@rcsta,c
  3778  0000C8  0E0F               	movlw	15
  3779  0000CA  6E16               	movwf	uartInterruptHandler@rcsta+1,c
  3780                           
  3781                           ;uart.c: 229: txsta=&TXSTA1;
  3782  0000CC  0EAC               	movlw	172
  3783  0000CE  D01D               	goto	L13
  3784  0000D0                     i2l2528:
  3785                           
  3786                           ;uart.c: 232: iTxFlag=PIR3bits.TX2IF;
  3787  0000D0  0E00               	movlw	0
  3788  0000D2  B8A4               	btfsc	4004,4,c	;volatile
  3789  0000D4  0E01               	movlw	1
  3790  0000D6  6E10               	movwf	uartInterruptHandler@iTxFlag,c
  3791                           
  3792                           ;uart.c: 233: iTxEnable=PIE3bits.TX2IE;
  3793  0000D8  0E00               	movlw	0
  3794  0000DA  B8A3               	btfsc	4003,4,c	;volatile
  3795  0000DC  0E01               	movlw	1
  3796  0000DE  6E0D               	movwf	uartInterruptHandler@iTxEnable,c
  3797                           
  3798                           ;uart.c: 234: iRxFlag=PIR3bits.RC2IF;
  3799  0000E0  0E00               	movlw	0
  3800  0000E2  BAA4               	btfsc	4004,5,c	;volatile
  3801  0000E4  0E01               	movlw	1
  3802  0000E6  6E14               	movwf	uartInterruptHandler@iRxFlag,c
  3803                           
  3804                           ;uart.c: 235: iRxEnable=PIE3bits.RC2IE;
  3805  0000E8  0E00               	movlw	0
  3806  0000EA  BAA3               	btfsc	4003,5,c	;volatile
  3807  0000EC  0E01               	movlw	1
  3808  0000EE  6E11               	movwf	uartInterruptHandler@iRxEnable,c
  3809                           
  3810                           ;uart.c: 236: fErr=RCSTA2bits.FERR;
  3811  0000F0  0E00               	movlw	0
  3812  0000F2  B471               	btfsc	3953,2,c	;volatile
  3813  0000F4  0E01               	movlw	1
  3814  0000F6  6E12               	movwf	uartInterruptHandler@fErr,c
  3815                           
  3816                           ;uart.c: 237: oErr=RCSTA2bits.OERR;
  3817  0000F8  0E00               	movlw	0
  3818  0000FA  B271               	btfsc	3953,1,c	;volatile
  3819  0000FC  0E01               	movlw	1
  3820  0000FE  6E13               	movwf	uartInterruptHandler@oErr,c
  3821                           
  3822                           ;uart.c: 238: rcsta=&RCSTA2;
  3823  000100  0E71               	movlw	113
  3824  000102  6E15               	movwf	uartInterruptHandler@rcsta,c
  3825  000104  0E0F               	movlw	15
  3826  000106  6E16               	movwf	uartInterruptHandler@rcsta+1,c
  3827                           
  3828                           ;uart.c: 239: txsta=&TXSTA2;
  3829  000108  0E72               	movlw	114
  3830  00010A                     L13:
  3831  00010A  6E0E               	movwf	uartInterruptHandler@txsta,c
  3832  00010C  0E0F               	movlw	15
  3833  00010E  6E0F               	movwf	uartInterruptHandler@txsta+1,c
  3834                           
  3835                           ;uart.c: 241: }
  3836                           
  3837                           ;uart.c: 240: break;
  3838  000110  D00D               	goto	i2l2538
  3839  000112                     i2l2536:
  3840  000112  EE20 F013          	lfsr	2,19
  3841  000116  5008               	movf	uartInterruptHandler@uart,w,c
  3842  000118  26D9               	addwf	fsr2l,f,c
  3843  00011A  5009               	movf	uartInterruptHandler@uart+1,w,c
  3844  00011C  22DA               	addwfc	fsr2h,f,c
  3845  00011E  50DF               	movf	indf2,w,c
  3846                           
  3847                           ; Switch size 1, requested type "space"
  3848                           ; Number of cases is 2, Range of values is 1 to 2
  3849                           ; switch strategies available:
  3850                           ; Name         Instructions Cycles
  3851                           ; simple_byte            7     4 (average)
  3852                           ;	Chosen strategy is simple_byte
  3853  000120  0A01               	xorlw	1	; case 1
  3854  000122  B4D8               	btfsc	status,2,c
  3855  000124  D7B7               	goto	i2l2522
  3856  000126  0A03               	xorlw	3	; case 2
  3857  000128  B4D8               	btfsc	status,2,c
  3858  00012A  D7D2               	goto	i2l2528
  3859  00012C                     i2l2538:
  3860                           
  3861                           ;uart.c: 242: if (iTxFlag )
  3862  00012C  5010               	movf	uartInterruptHandler@iTxFlag,w,c
  3863  00012E  B4D8               	btfsc	status,2,c
  3864  000130  D0C3               	goto	i2l2584
  3865                           
  3866                           ;uart.c: 243: {
  3867                           ;uart.c: 244: if ( fifoGet(&(uart->sendFifo),&data) )
  3868  000132  C008  F001         	movff	uartInterruptHandler@uart,fifoGet@fifo
  3869  000136  C009  F002         	movff	uartInterruptHandler@uart+1,fifoGet@fifo+1
  3870  00013A  0E17               	movlw	low uartInterruptHandler@data
  3871  00013C  6E03               	movwf	fifoGet@get,c
  3872  00013E  0E00               	movlw	high uartInterruptHandler@data
  3873  000140  6E04               	movwf	fifoGet@get+1,c
  3874  000142  ECB8  F003         	call	_fifoGet	;wreg free
  3875  000146  0900               	iorlw	0
  3876  000148  B4D8               	btfsc	status,2,c
  3877  00014A  D032               	goto	i2l2546
  3878                           
  3879                           ;uart.c: 245: {
  3880                           ;uart.c: 247: if (uart->hdFlag )
  3881  00014C  EE20 F014          	lfsr	2,20
  3882  000150  5008               	movf	uartInterruptHandler@uart,w,c
  3883  000152  26D9               	addwf	fsr2l,f,c
  3884  000154  5009               	movf	uartInterruptHandler@uart+1,w,c
  3885  000156  22DA               	addwfc	fsr2h,f,c
  3886  000158  50DF               	movf	indf2,w,c
  3887  00015A  B4D8               	btfsc	status,2,c
  3888  00015C  D018               	goto	i2l312
  3889                           
  3890                           ;uart.c: 248: {
  3891                           ;uart.c: 249: *(uart->hdPort) |= uart->hdOnMask;
  3892  00015E  EE20 F017          	lfsr	2,23
  3893  000162  5008               	movf	uartInterruptHandler@uart,w,c
  3894  000164  26D9               	addwf	fsr2l,f,c
  3895  000166  5009               	movf	uartInterruptHandler@uart+1,w,c
  3896  000168  22DA               	addwfc	fsr2h,f,c
  3897  00016A  50DF               	movf	indf2,w,c
  3898  00016C  6E0A               	movwf	??_uartInterruptHandler& (0+255),c
  3899  00016E  EE20 F015          	lfsr	2,21
  3900  000172  5008               	movf	uartInterruptHandler@uart,w,c
  3901  000174  26D9               	addwf	fsr2l,f,c
  3902  000176  5009               	movf	uartInterruptHandler@uart+1,w,c
  3903  000178  22DA               	addwfc	fsr2h,f,c
  3904  00017A  CFDE F00B          	movff	postinc2,??_uartInterruptHandler+1
  3905  00017E  CFDD F00C          	movff	postdec2,??_uartInterruptHandler+2
  3906  000182  C00B  FFD9         	movff	??_uartInterruptHandler+1,fsr2l
  3907  000186  C00C  FFDA         	movff	??_uartInterruptHandler+2,fsr2h
  3908  00018A  500A               	movf	??_uartInterruptHandler,w,c
  3909  00018C  12DF               	iorwf	indf2,f,c
  3910  00018E                     i2l312:
  3911                           
  3912                           ;uart.c: 250: }
  3913                           ;uart.c: 251: *uart->txReg=data;
  3914  00018E  EE20 F00E          	lfsr	2,14
  3915  000192  5008               	movf	uartInterruptHandler@uart,w,c
  3916  000194  26D9               	addwf	fsr2l,f,c
  3917  000196  5009               	movf	uartInterruptHandler@uart+1,w,c
  3918  000198  22DA               	addwfc	fsr2h,f,c
  3919  00019A  CFDE F00A          	movff	postinc2,??_uartInterruptHandler
  3920  00019E  CFDD F00B          	movff	postdec2,??_uartInterruptHandler+1
  3921  0001A2  C00A  FFD9         	movff	??_uartInterruptHandler,fsr2l
  3922  0001A6  C00B  FFDA         	movff	??_uartInterruptHandler+1,fsr2h
  3923  0001AA  C017  FFDF         	movff	uartInterruptHandler@data,indf2
  3924                           
  3925                           ;uart.c: 252: }
  3926  0001AE  D084               	goto	i2l2584
  3927  0001B0                     i2l2546:
  3928                           
  3929                           ;uart.c: 253: else
  3930                           ;uart.c: 254: {
  3931                           ;uart.c: 256: if (uart->hdFlag)
  3932  0001B0  EE20 F014          	lfsr	2,20
  3933  0001B4  5008               	movf	uartInterruptHandler@uart,w,c
  3934  0001B6  26D9               	addwf	fsr2l,f,c
  3935  0001B8  5009               	movf	uartInterruptHandler@uart+1,w,c
  3936  0001BA  22DA               	addwfc	fsr2h,f,c
  3937  0001BC  50DF               	movf	indf2,w,c
  3938  0001BE  B4D8               	btfsc	status,2,c
  3939  0001C0  D01E               	goto	i2l2554
  3940  0001C2                     i2l2550:
  3941  0001C2  C00E  FFD9         	movff	uartInterruptHandler@txsta,fsr2l
  3942  0001C6  C00F  FFDA         	movff	uartInterruptHandler@txsta+1,fsr2h
  3943  0001CA  A2DF               	btfss	indf2,1,c
  3944  0001CC  D7FA               	goto	i2l2550
  3945                           
  3946                           ;uart.c: 260: *(uart->hdPort) &= uart->hdOffMask;
  3947  0001CE  EE20 F018          	lfsr	2,24
  3948  0001D2  5008               	movf	uartInterruptHandler@uart,w,c
  3949  0001D4  26D9               	addwf	fsr2l,f,c
  3950  0001D6  5009               	movf	uartInterruptHandler@uart+1,w,c
  3951  0001D8  22DA               	addwfc	fsr2h,f,c
  3952  0001DA  50DF               	movf	indf2,w,c
  3953  0001DC  6E0A               	movwf	??_uartInterruptHandler& (0+255),c
  3954  0001DE  EE20 F015          	lfsr	2,21
  3955  0001E2  5008               	movf	uartInterruptHandler@uart,w,c
  3956  0001E4  26D9               	addwf	fsr2l,f,c
  3957  0001E6  5009               	movf	uartInterruptHandler@uart+1,w,c
  3958  0001E8  22DA               	addwfc	fsr2h,f,c
  3959  0001EA  CFDE F00B          	movff	postinc2,??_uartInterruptHandler+1
  3960  0001EE  CFDD F00C          	movff	postdec2,??_uartInterruptHandler+2
  3961  0001F2  C00B  FFD9         	movff	??_uartInterruptHandler+1,fsr2l
  3962  0001F6  C00C  FFDA         	movff	??_uartInterruptHandler+2,fsr2h
  3963  0001FA  500A               	movf	??_uartInterruptHandler,w,c
  3964  0001FC  16DF               	andwf	indf2,f,c
  3965  0001FE                     i2l2554:
  3966                           
  3967                           ;uart.c: 261: }
  3968                           ;uart.c: 262: uartEnableSend(uart,0);
  3969  0001FE  C008  F001         	movff	uartInterruptHandler@uart,i2uartEnableSend@uart
  3970  000202  C009  F002         	movff	uartInterruptHandler@uart+1,i2uartEnableSend@uart+1
  3971  000206  0E00               	movlw	0
  3972  000208  6E03               	movwf	i2uartEnableSend@onoff,c
  3973  00020A  EC66  F007         	call	i2_uartEnableSend	;wreg free
  3974                           
  3975                           ;uart.c: 263: }
  3976                           ;uart.c: 264: }
  3977                           ;uart.c: 266: while (iRxEnable & iRxFlag)
  3978  00020E  D054               	goto	i2l2584
  3979  000210                     i2l2556:
  3980                           
  3981                           ;uart.c: 267: {
  3982                           ;uart.c: 268: if (fErr)
  3983  000210  5012               	movf	uartInterruptHandler@fErr,w,c
  3984  000212  B4D8               	btfsc	status,2,c
  3985  000214  D009               	goto	i2l2562
  3986                           
  3987                           ;uart.c: 269: {
  3988                           ;uart.c: 270: uart->status|=16;
  3989  000216  EE20 F012          	lfsr	2,18
  3990  00021A  5008               	movf	uartInterruptHandler@uart,w,c
  3991  00021C  26D9               	addwf	fsr2l,f,c
  3992  00021E  5009               	movf	uartInterruptHandler@uart+1,w,c
  3993  000220  22DA               	addwfc	fsr2h,f,c
  3994  000222  0E00               	movlw	0
  3995  000224  88DB               	bsf	plusw2,4,c
  3996                           
  3997                           ;uart.c: 271: break;
  3998  000226  0012               	return	
  3999  000228                     i2l2562:
  4000                           
  4001                           ;uart.c: 273: else
  4002                           ;uart.c: 274: {
  4003                           ;uart.c: 275: if (oErr)
  4004  000228  5013               	movf	uartInterruptHandler@oErr,w,c
  4005  00022A  B4D8               	btfsc	status,2,c
  4006  00022C  D013               	goto	i2l2572
  4007                           
  4008                           ;uart.c: 276: {
  4009                           ;uart.c: 277: uart->status|=32;
  4010  00022E  EE20 F012          	lfsr	2,18
  4011  000232  5008               	movf	uartInterruptHandler@uart,w,c
  4012  000234  26D9               	addwf	fsr2l,f,c
  4013  000236  5009               	movf	uartInterruptHandler@uart+1,w,c
  4014  000238  22DA               	addwfc	fsr2h,f,c
  4015  00023A  0E00               	movlw	0
  4016  00023C  8ADB               	bsf	plusw2,5,c
  4017                           
  4018                           ;uart.c: 278: *rcsta&=~0x10;
  4019  00023E  C015  FFD9         	movff	uartInterruptHandler@rcsta,fsr2l
  4020  000242  C016  FFDA         	movff	uartInterruptHandler@rcsta+1,fsr2h
  4021  000246  0EEF               	movlw	239
  4022  000248  16DF               	andwf	indf2,f,c
  4023                           
  4024                           ;uart.c: 279: *rcsta|=0x10;
  4025  00024A  C015  FFD9         	movff	uartInterruptHandler@rcsta,fsr2l
  4026  00024E  C016  FFDA         	movff	uartInterruptHandler@rcsta+1,fsr2h
  4027  000252  D7E7               	goto	L14
  4028  000254                     i2l2572:
  4029                           
  4030                           ;uart.c: 282: else
  4031                           ;uart.c: 283: {
  4032                           ;uart.c: 284: data=*uart->rxReg;
  4033  000254  EE20 F010          	lfsr	2,16
  4034  000258  5008               	movf	uartInterruptHandler@uart,w,c
  4035  00025A  26D9               	addwf	fsr2l,f,c
  4036  00025C  5009               	movf	uartInterruptHandler@uart+1,w,c
  4037  00025E  22DA               	addwfc	fsr2h,f,c
  4038  000260  CFDE F00A          	movff	postinc2,??_uartInterruptHandler
  4039  000264  CFDD F00B          	movff	postdec2,??_uartInterruptHandler+1
  4040  000268  C00A  FFD9         	movff	??_uartInterruptHandler,fsr2l
  4041  00026C  C00B  FFDA         	movff	??_uartInterruptHandler+1,fsr2h
  4042  000270  50DF               	movf	indf2,w,c
  4043  000272  6E17               	movwf	uartInterruptHandler@data,c
  4044                           
  4045                           ;uart.c: 285: fifoPut(&uart->recvFifo,data);
  4046  000274  0E06               	movlw	6
  4047  000276  2408               	addwf	uartInterruptHandler@uart,w,c
  4048  000278  6E01               	movwf	fifoPut@fifo,c
  4049  00027A  0E00               	movlw	0
  4050  00027C  2009               	addwfc	uartInterruptHandler@uart+1,w,c
  4051  00027E  6E02               	movwf	fifoPut@fifo+1,c
  4052  000280  C017  F003         	movff	uartInterruptHandler@data,fifoPut@put
  4053  000284  EC27  F004         	call	_fifoPut	;wreg free
  4054                           
  4055                           ;uart.c: 286: }
  4056                           ;uart.c: 287: }
  4057                           ;uart.c: 289: switch (uart->number)
  4058  000288  D00A               	goto	i2l2582
  4059  00028A                     i2l2576:
  4060                           
  4061                           ;uart.c: 292: iRxFlag=PIR1bits.RC1IF;
  4062  00028A  0E00               	movlw	0
  4063  00028C  BA9E               	btfsc	3998,5,c	;volatile
  4064  00028E  0E01               	movlw	1
  4065  000290  6E14               	movwf	uartInterruptHandler@iRxFlag,c
  4066                           
  4067                           ;uart.c: 293: break;
  4068  000292  D012               	goto	i2l2584
  4069  000294                     i2l2578:
  4070                           
  4071                           ;uart.c: 295: iRxFlag=PIR3bits.RC2IF;
  4072  000294  0E00               	movlw	0
  4073  000296  BAA4               	btfsc	4004,5,c	;volatile
  4074  000298  0E01               	movlw	1
  4075  00029A  6E14               	movwf	uartInterruptHandler@iRxFlag,c
  4076                           
  4077                           ;uart.c: 297: }
  4078                           
  4079                           ;uart.c: 296: break;
  4080  00029C  D00D               	goto	i2l2584
  4081  00029E                     i2l2582:
  4082  00029E  EE20 F013          	lfsr	2,19
  4083  0002A2  5008               	movf	uartInterruptHandler@uart,w,c
  4084  0002A4  26D9               	addwf	fsr2l,f,c
  4085  0002A6  5009               	movf	uartInterruptHandler@uart+1,w,c
  4086  0002A8  22DA               	addwfc	fsr2h,f,c
  4087  0002AA  50DF               	movf	indf2,w,c
  4088                           
  4089                           ; Switch size 1, requested type "space"
  4090                           ; Number of cases is 2, Range of values is 1 to 2
  4091                           ; switch strategies available:
  4092                           ; Name         Instructions Cycles
  4093                           ; simple_byte            7     4 (average)
  4094                           ;	Chosen strategy is simple_byte
  4095  0002AC  0A01               	xorlw	1	; case 1
  4096  0002AE  B4D8               	btfsc	status,2,c
  4097  0002B0  D7EC               	goto	i2l2576
  4098  0002B2  0A03               	xorlw	3	; case 2
  4099  0002B4  B4D8               	btfsc	status,2,c
  4100  0002B6  D7EE               	goto	i2l2578
  4101  0002B8                     i2l2584:
  4102  0002B8  5011               	movf	uartInterruptHandler@iRxEnable,w,c
  4103  0002BA  1414               	andwf	uartInterruptHandler@iRxFlag,w,c
  4104  0002BC  0900               	iorlw	0
  4105  0002BE  B4D8               	btfsc	status,2,c
  4106  0002C0  0012               	return	
  4107  0002C2  D7A6               	goto	i2l2556
  4108  0002C4                     __end_of_uartInterruptHandler:
  4109                           	opt stack 0
  4110                           pclatu	equ	0xFFB
  4111                           pclath	equ	0xFFA
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           prodh	equ	0xFF4
  4117                           prodl	equ	0xFF3
  4118                           intcon	equ	0xFF2
  4119                           intcon3	equ	0xFF0
  4120                           postinc0	equ	0xFEE
  4121                           fsr0h	equ	0xFEA
  4122                           fsr0l	equ	0xFE9
  4123                           wreg	equ	0xFE8
  4124                           indf1	equ	0xFE7
  4125                           postinc1	equ	0xFE6
  4126                           postdec1	equ	0xFE5
  4127                           fsr1h	equ	0xFE2
  4128                           fsr1l	equ	0xFE1
  4129                           indf2	equ	0xFDF
  4130                           postinc2	equ	0xFDE
  4131                           postdec2	equ	0xFDD
  4132                           plusw2	equ	0xFDB
  4133                           fsr2h	equ	0xFDA
  4134                           fsr2l	equ	0xFD9
  4135                           status	equ	0xFD8
  4136                           
  4137 ;; *************** function i2_uartEnableSend *****************
  4138 ;; Defined at:
  4139 ;;		line 139 in file "uart.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;  uart            2    0[COMRAM] PTR struct .
  4142 ;;		 -> uart(25), 
  4143 ;;  onoff           1    2[COMRAM] unsigned char 
  4144 ;; Auto vars:     Size  Location     Type
  4145 ;;		None
  4146 ;; Return value:  Size  Location     Type
  4147 ;;                  1    wreg      void 
  4148 ;; Registers used:
  4149 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4150 ;; Tracked objects:
  4151 ;;		On entry : 0/0
  4152 ;;		On exit  : 0/0
  4153 ;;		Unchanged: 0/0
  4154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4155 ;;      Params:         3       0       0       0       0       0       0
  4156 ;;      Locals:         0       0       0       0       0       0       0
  4157 ;;      Temps:          1       0       0       0       0       0       0
  4158 ;;      Totals:         4       0       0       0       0       0       0
  4159 ;;Total ram usage:        4 bytes
  4160 ;; Hardware stack levels used:    1
  4161 ;; This function calls:
  4162 ;;		Nothing
  4163 ;; This function is called by:
  4164 ;;		_uartInterruptHandler
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	text21
  4169  000ECC                     __ptext21:
  4170                           	opt stack 0
  4171  000ECC                     i2_uartEnableSend:
  4172                           	opt stack 24
  4173                           
  4174                           ;uart.c: 141: switch (uart->number)
  4175                           
  4176                           ;incstack = 0
  4177  000ECC  D016               	goto	i2l2396
  4178  000ECE                     i2l2390:
  4179  000ECE  C003  F004         	movff	i2uartEnableSend@onoff,??i2_uartEnableSend
  4180  000ED2  0E01               	movlw	1
  4181  000ED4  1604               	andwf	??i2_uartEnableSend,f,c
  4182  000ED6  3A04               	swapf	??i2_uartEnableSend,f,c
  4183  000ED8  509D               	movf	3997,w,c	;volatile
  4184  000EDA  1804               	xorwf	??i2_uartEnableSend,w,c
  4185  000EDC  0BEF               	andlw	-17
  4186  000EDE  1804               	xorwf	??i2_uartEnableSend,w,c
  4187  000EE0  6E9D               	movwf	3997,c	;volatile
  4188  000EE2  0012               	return	
  4189  000EE4                     i2l2392:
  4190  000EE4  C003  F004         	movff	i2uartEnableSend@onoff,??i2_uartEnableSend
  4191  000EE8  0E01               	movlw	1
  4192  000EEA  1604               	andwf	??i2_uartEnableSend,f,c
  4193  000EEC  3A04               	swapf	??i2_uartEnableSend,f,c
  4194  000EEE  50A3               	movf	4003,w,c	;volatile
  4195  000EF0  1804               	xorwf	??i2_uartEnableSend,w,c
  4196  000EF2  0BEF               	andlw	-17
  4197  000EF4  1804               	xorwf	??i2_uartEnableSend,w,c
  4198  000EF6  6EA3               	movwf	4003,c	;volatile
  4199                           
  4200                           ;uart.c: 145: }
  4201  000EF8  0012               	return	
  4202  000EFA                     i2l2396:
  4203  000EFA  EE20 F013          	lfsr	2,19
  4204  000EFE  5001               	movf	i2uartEnableSend@uart,w,c
  4205  000F00  26D9               	addwf	fsr2l,f,c
  4206  000F02  5002               	movf	i2uartEnableSend@uart+1,w,c
  4207  000F04  22DA               	addwfc	fsr2h,f,c
  4208  000F06  50DF               	movf	indf2,w,c
  4209                           
  4210                           ; Switch size 1, requested type "space"
  4211                           ; Number of cases is 2, Range of values is 1 to 2
  4212                           ; switch strategies available:
  4213                           ; Name         Instructions Cycles
  4214                           ; simple_byte            7     4 (average)
  4215                           ;	Chosen strategy is simple_byte
  4216  000F08  0A01               	xorlw	1	; case 1
  4217  000F0A  B4D8               	btfsc	status,2,c
  4218  000F0C  D7E0               	goto	i2l2390
  4219  000F0E  0A03               	xorlw	3	; case 2
  4220  000F10  A4D8               	btfss	status,2,c
  4221  000F12  0012               	return	
  4222  000F14  D7E7               	goto	i2l2392
  4223  000F16                     __end_ofi2_uartEnableSend:
  4224                           	opt stack 0
  4225                           pclatu	equ	0xFFB
  4226                           pclath	equ	0xFFA
  4227                           tblptru	equ	0xFF8
  4228                           tblptrh	equ	0xFF7
  4229                           tblptrl	equ	0xFF6
  4230                           tablat	equ	0xFF5
  4231                           prodh	equ	0xFF4
  4232                           prodl	equ	0xFF3
  4233                           intcon	equ	0xFF2
  4234                           intcon3	equ	0xFF0
  4235                           postinc0	equ	0xFEE
  4236                           fsr0h	equ	0xFEA
  4237                           fsr0l	equ	0xFE9
  4238                           wreg	equ	0xFE8
  4239                           indf1	equ	0xFE7
  4240                           postinc1	equ	0xFE6
  4241                           postdec1	equ	0xFE5
  4242                           fsr1h	equ	0xFE2
  4243                           fsr1l	equ	0xFE1
  4244                           indf2	equ	0xFDF
  4245                           postinc2	equ	0xFDE
  4246                           postdec2	equ	0xFDD
  4247                           plusw2	equ	0xFDB
  4248                           fsr2h	equ	0xFDA
  4249                           fsr2l	equ	0xFD9
  4250                           status	equ	0xFD8
  4251                           
  4252 ;; *************** function _fifoPut *****************
  4253 ;; Defined at:
  4254 ;;		line 12 in file "fifo.c"
  4255 ;; Parameters:    Size  Location     Type
  4256 ;;  fifo            2    0[COMRAM] PTR struct .
  4257 ;;		 -> uart(25), 
  4258 ;;  put             1    2[COMRAM] unsigned char 
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;		None
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      unsigned char 
  4263 ;; Registers used:
  4264 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4270 ;;      Params:         3       0       0       0       0       0       0
  4271 ;;      Locals:         0       0       0       0       0       0       0
  4272 ;;      Temps:          3       0       0       0       0       0       0
  4273 ;;      Totals:         6       0       0       0       0       0       0
  4274 ;;Total ram usage:        6 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; This function calls:
  4277 ;;		Nothing
  4278 ;; This function is called by:
  4279 ;;		_uartInterruptHandler
  4280 ;;		_fifoPutStr
  4281 ;;		_fifoPutStr0
  4282 ;;		_fifoPutBuf
  4283 ;;		_uartSendByte
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           	psect	text22
  4288  00084E                     __ptext22:
  4289                           	opt stack 0
  4290  00084E                     _fifoPut:
  4291                           	opt stack 24
  4292                           
  4293                           ;fifo.c: 14: if ((fifo->status & 1)==1)
  4294                           
  4295                           ;incstack = 0
  4296  00084E  EE20 F003          	lfsr	2,3
  4297  000852  5001               	movf	fifoPut@fifo,w,c
  4298  000854  26D9               	addwf	fsr2l,f,c
  4299  000856  5002               	movf	fifoPut@fifo+1,w,c
  4300  000858  22DA               	addwfc	fsr2h,f,c
  4301  00085A  A0DF               	btfss	indf2,0,c
  4302  00085C  D002               	goto	i2l2244
  4303                           
  4304                           ;fifo.c: 15: {
  4305                           ;fifo.c: 16: return 0;
  4306  00085E  0E00               	movlw	0
  4307  000860  0012               	return	
  4308  000862                     i2l2244:
  4309                           
  4310                           ;fifo.c: 17: }
  4311                           ;fifo.c: 19: fifo->buf[fifo->putPtr]=put;
  4312  000862  EE20 F004          	lfsr	2,4
  4313  000866  5001               	movf	fifoPut@fifo,w,c
  4314  000868  26D9               	addwf	fsr2l,f,c
  4315  00086A  5002               	movf	fifoPut@fifo+1,w,c
  4316  00086C  22DA               	addwfc	fsr2h,f,c
  4317  00086E  50DF               	movf	indf2,w,c
  4318  000870  6E04               	movwf	??_fifoPut& (0+255),c
  4319  000872  5004               	movf	??_fifoPut,w,c
  4320  000874  0D01               	mullw	1
  4321  000876  C001  FFD9         	movff	fifoPut@fifo,fsr2l
  4322  00087A  C002  FFDA         	movff	fifoPut@fifo+1,fsr2h
  4323  00087E  CFDE F005          	movff	postinc2,??_fifoPut+1
  4324  000882  CFDD F006          	movff	postdec2,??_fifoPut+2
  4325  000886  50F3               	movf	prodl,w,c
  4326  000888  2405               	addwf	??_fifoPut+1,w,c
  4327  00088A  6ED9               	movwf	fsr2l,c
  4328  00088C  50F4               	movf	prodh,w,c
  4329  00088E  2006               	addwfc	??_fifoPut+2,w,c
  4330  000890  6EDA               	movwf	fsr2h,c
  4331  000892  C003  FFDF         	movff	fifoPut@put,indf2
  4332                           
  4333                           ;fifo.c: 20: fifo->status&=~2;
  4334  000896  EE20 F003          	lfsr	2,3
  4335  00089A  5001               	movf	fifoPut@fifo,w,c
  4336  00089C  26D9               	addwf	fsr2l,f,c
  4337  00089E  5002               	movf	fifoPut@fifo+1,w,c
  4338  0008A0  22DA               	addwfc	fsr2h,f,c
  4339  0008A2  0EFD               	movlw	253
  4340  0008A4  16DF               	andwf	indf2,f,c
  4341                           
  4342                           ;fifo.c: 22: fifo->putPtr--;
  4343  0008A6  EE20 F004          	lfsr	2,4
  4344  0008AA  5001               	movf	fifoPut@fifo,w,c
  4345  0008AC  26D9               	addwf	fsr2l,f,c
  4346  0008AE  5002               	movf	fifoPut@fifo+1,w,c
  4347  0008B0  22DA               	addwfc	fsr2h,f,c
  4348  0008B2  06DF               	decf	indf2,f,c
  4349                           
  4350                           ;fifo.c: 23: if (fifo->putPtr > fifo->maxPtr)
  4351  0008B4  EE20 F004          	lfsr	2,4
  4352  0008B8  5001               	movf	fifoPut@fifo,w,c
  4353  0008BA  26D9               	addwf	fsr2l,f,c
  4354  0008BC  5002               	movf	fifoPut@fifo+1,w,c
  4355  0008BE  22DA               	addwfc	fsr2h,f,c
  4356  0008C0  EE10 F002          	lfsr	1,2
  4357  0008C4  5001               	movf	fifoPut@fifo,w,c
  4358  0008C6  26E1               	addwf	fsr1l,f,c
  4359  0008C8  5002               	movf	fifoPut@fifo+1,w,c
  4360  0008CA  22E2               	addwfc	fsr1h,f,c
  4361  0008CC  50DE               	movf	postinc2,w,c
  4362  0008CE  5CE6               	subwf	postinc1,w,c
  4363  0008D0  B0D8               	btfsc	status,0,c
  4364  0008D2  D00E               	goto	i2l8
  4365                           
  4366                           ;fifo.c: 24: {
  4367                           ;fifo.c: 25: fifo->putPtr=fifo->maxPtr;
  4368  0008D4  EE20 F002          	lfsr	2,2
  4369  0008D8  5001               	movf	fifoPut@fifo,w,c
  4370  0008DA  26D9               	addwf	fsr2l,f,c
  4371  0008DC  5002               	movf	fifoPut@fifo+1,w,c
  4372  0008DE  22DA               	addwfc	fsr2h,f,c
  4373  0008E0  EE10 F004          	lfsr	1,4
  4374  0008E4  5001               	movf	fifoPut@fifo,w,c
  4375  0008E6  26E1               	addwf	fsr1l,f,c
  4376  0008E8  5002               	movf	fifoPut@fifo+1,w,c
  4377  0008EA  22E2               	addwfc	fsr1h,f,c
  4378  0008EC  CFDF FFE7          	movff	indf2,indf1
  4379  0008F0                     i2l8:
  4380                           
  4381                           ;fifo.c: 26: }
  4382                           ;fifo.c: 28: if (fifo->putPtr==fifo->getPtr)
  4383  0008F0  EE20 F005          	lfsr	2,5
  4384  0008F4  5001               	movf	fifoPut@fifo,w,c
  4385  0008F6  26D9               	addwf	fsr2l,f,c
  4386  0008F8  5002               	movf	fifoPut@fifo+1,w,c
  4387  0008FA  22DA               	addwfc	fsr2h,f,c
  4388  0008FC  EE10 F004          	lfsr	1,4
  4389  000900  5001               	movf	fifoPut@fifo,w,c
  4390  000902  26E1               	addwf	fsr1l,f,c
  4391  000904  5002               	movf	fifoPut@fifo+1,w,c
  4392  000906  22E2               	addwfc	fsr1h,f,c
  4393  000908  50DE               	movf	postinc2,w,c
  4394  00090A  18E6               	xorwf	postinc1,w,c
  4395  00090C  A4D8               	btfss	status,2,c
  4396  00090E  D008               	goto	i2l2256
  4397                           
  4398                           ;fifo.c: 29: {
  4399                           ;fifo.c: 30: fifo->status|=1;
  4400  000910  EE20 F003          	lfsr	2,3
  4401  000914  5001               	movf	fifoPut@fifo,w,c
  4402  000916  26D9               	addwf	fsr2l,f,c
  4403  000918  5002               	movf	fifoPut@fifo+1,w,c
  4404  00091A  22DA               	addwfc	fsr2h,f,c
  4405  00091C  0E00               	movlw	0
  4406  00091E  80DB               	bsf	plusw2,0,c
  4407  000920                     i2l2256:
  4408                           
  4409                           ;fifo.c: 31: }
  4410                           ;fifo.c: 32: return 1;
  4411  000920  0E01               	movlw	1
  4412  000922  0012               	return	
  4413  000924                     __end_of_fifoPut:
  4414                           	opt stack 0
  4415                           pclatu	equ	0xFFB
  4416                           pclath	equ	0xFFA
  4417                           tblptru	equ	0xFF8
  4418                           tblptrh	equ	0xFF7
  4419                           tblptrl	equ	0xFF6
  4420                           tablat	equ	0xFF5
  4421                           prodh	equ	0xFF4
  4422                           prodl	equ	0xFF3
  4423                           intcon	equ	0xFF2
  4424                           intcon3	equ	0xFF0
  4425                           postinc0	equ	0xFEE
  4426                           fsr0h	equ	0xFEA
  4427                           fsr0l	equ	0xFE9
  4428                           wreg	equ	0xFE8
  4429                           indf1	equ	0xFE7
  4430                           postinc1	equ	0xFE6
  4431                           postdec1	equ	0xFE5
  4432                           fsr1h	equ	0xFE2
  4433                           fsr1l	equ	0xFE1
  4434                           indf2	equ	0xFDF
  4435                           postinc2	equ	0xFDE
  4436                           postdec2	equ	0xFDD
  4437                           plusw2	equ	0xFDB
  4438                           fsr2h	equ	0xFDA
  4439                           fsr2l	equ	0xFD9
  4440                           status	equ	0xFD8
  4441                           
  4442 ;; *************** function _fifoGet *****************
  4443 ;; Defined at:
  4444 ;;		line 74 in file "fifo.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;  fifo            2    0[COMRAM] PTR struct .
  4447 ;;		 -> uart(25), 
  4448 ;;  get             2    2[COMRAM] PTR unsigned char 
  4449 ;;		 -> uartTransmitAll@data(1), uartInterruptHandler@data(1), fifoGetBuf@elem(1), 
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;		None
  4452 ;; Return value:  Size  Location     Type
  4453 ;;                  1    wreg      unsigned char 
  4454 ;; Registers used:
  4455 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4456 ;; Tracked objects:
  4457 ;;		On entry : 0/0
  4458 ;;		On exit  : 0/0
  4459 ;;		Unchanged: 0/0
  4460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4461 ;;      Params:         4       0       0       0       0       0       0
  4462 ;;      Locals:         0       0       0       0       0       0       0
  4463 ;;      Temps:          3       0       0       0       0       0       0
  4464 ;;      Totals:         7       0       0       0       0       0       0
  4465 ;;Total ram usage:        7 bytes
  4466 ;; Hardware stack levels used:    1
  4467 ;; This function calls:
  4468 ;;		Nothing
  4469 ;; This function is called by:
  4470 ;;		_uartInterruptHandler
  4471 ;;		_fifoGetBuf
  4472 ;;		_uartRecvByte
  4473 ;;		_uartTransmitAll
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           	psect	text23
  4478  000770                     __ptext23:
  4479                           	opt stack 0
  4480  000770                     _fifoGet:
  4481                           	opt stack 24
  4482                           
  4483                           ;fifo.c: 76: if ((fifo->status & 2)==2)
  4484                           
  4485                           ;incstack = 0
  4486  000770  EE20 F003          	lfsr	2,3
  4487  000774  5001               	movf	fifoGet@fifo,w,c
  4488  000776  26D9               	addwf	fsr2l,f,c
  4489  000778  5002               	movf	fifoGet@fifo+1,w,c
  4490  00077A  22DA               	addwfc	fsr2h,f,c
  4491  00077C  A2DF               	btfss	indf2,1,c
  4492  00077E  D002               	goto	i2l2266
  4493                           
  4494                           ;fifo.c: 77: {
  4495                           ;fifo.c: 78: return 0;
  4496  000780  0E00               	movlw	0
  4497  000782  0012               	return	
  4498  000784                     i2l2266:
  4499                           
  4500                           ;fifo.c: 79: }
  4501                           ;fifo.c: 80: *get=fifo->buf[fifo->getPtr];
  4502  000784  EE20 F005          	lfsr	2,5
  4503  000788  5001               	movf	fifoGet@fifo,w,c
  4504  00078A  26D9               	addwf	fsr2l,f,c
  4505  00078C  5002               	movf	fifoGet@fifo+1,w,c
  4506  00078E  22DA               	addwfc	fsr2h,f,c
  4507  000790  50DF               	movf	indf2,w,c
  4508  000792  6E05               	movwf	??_fifoGet& (0+255),c
  4509  000794  5005               	movf	??_fifoGet,w,c
  4510  000796  0D01               	mullw	1
  4511  000798  C001  FFD9         	movff	fifoGet@fifo,fsr2l
  4512  00079C  C002  FFDA         	movff	fifoGet@fifo+1,fsr2h
  4513  0007A0  CFDE F006          	movff	postinc2,??_fifoGet+1
  4514  0007A4  CFDD F007          	movff	postdec2,??_fifoGet+2
  4515  0007A8  50F3               	movf	prodl,w,c
  4516  0007AA  2406               	addwf	??_fifoGet+1,w,c
  4517  0007AC  6ED9               	movwf	fsr2l,c
  4518  0007AE  50F4               	movf	prodh,w,c
  4519  0007B0  2007               	addwfc	??_fifoGet+2,w,c
  4520  0007B2  6EDA               	movwf	fsr2h,c
  4521  0007B4  C003  FFE1         	movff	fifoGet@get,fsr1l
  4522  0007B8  C004  FFE2         	movff	fifoGet@get+1,fsr1h
  4523  0007BC  CFDF FFE7          	movff	indf2,indf1
  4524                           
  4525                           ;fifo.c: 81: fifo->status&=~1;
  4526  0007C0  EE20 F003          	lfsr	2,3
  4527  0007C4  5001               	movf	fifoGet@fifo,w,c
  4528  0007C6  26D9               	addwf	fsr2l,f,c
  4529  0007C8  5002               	movf	fifoGet@fifo+1,w,c
  4530  0007CA  22DA               	addwfc	fsr2h,f,c
  4531  0007CC  0EFE               	movlw	254
  4532  0007CE  16DF               	andwf	indf2,f,c
  4533                           
  4534                           ;fifo.c: 83: fifo->getPtr--;
  4535  0007D0  EE20 F005          	lfsr	2,5
  4536  0007D4  5001               	movf	fifoGet@fifo,w,c
  4537  0007D6  26D9               	addwf	fsr2l,f,c
  4538  0007D8  5002               	movf	fifoGet@fifo+1,w,c
  4539  0007DA  22DA               	addwfc	fsr2h,f,c
  4540  0007DC  06DF               	decf	indf2,f,c
  4541                           
  4542                           ;fifo.c: 84: if (fifo->getPtr > fifo->maxPtr)
  4543  0007DE  EE20 F005          	lfsr	2,5
  4544  0007E2  5001               	movf	fifoGet@fifo,w,c
  4545  0007E4  26D9               	addwf	fsr2l,f,c
  4546  0007E6  5002               	movf	fifoGet@fifo+1,w,c
  4547  0007E8  22DA               	addwfc	fsr2h,f,c
  4548  0007EA  EE10 F002          	lfsr	1,2
  4549  0007EE  5001               	movf	fifoGet@fifo,w,c
  4550  0007F0  26E1               	addwf	fsr1l,f,c
  4551  0007F2  5002               	movf	fifoGet@fifo+1,w,c
  4552  0007F4  22E2               	addwfc	fsr1h,f,c
  4553  0007F6  50DE               	movf	postinc2,w,c
  4554  0007F8  5CE6               	subwf	postinc1,w,c
  4555  0007FA  B0D8               	btfsc	status,0,c
  4556  0007FC  D00E               	goto	i2l34
  4557                           
  4558                           ;fifo.c: 85: {
  4559                           ;fifo.c: 86: fifo->getPtr=fifo->maxPtr;
  4560  0007FE  EE20 F002          	lfsr	2,2
  4561  000802  5001               	movf	fifoGet@fifo,w,c
  4562  000804  26D9               	addwf	fsr2l,f,c
  4563  000806  5002               	movf	fifoGet@fifo+1,w,c
  4564  000808  22DA               	addwfc	fsr2h,f,c
  4565  00080A  EE10 F005          	lfsr	1,5
  4566  00080E  5001               	movf	fifoGet@fifo,w,c
  4567  000810  26E1               	addwf	fsr1l,f,c
  4568  000812  5002               	movf	fifoGet@fifo+1,w,c
  4569  000814  22E2               	addwfc	fsr1h,f,c
  4570  000816  CFDF FFE7          	movff	indf2,indf1
  4571  00081A                     i2l34:
  4572                           
  4573                           ;fifo.c: 87: }
  4574                           ;fifo.c: 89: if (fifo->getPtr==fifo->putPtr)
  4575  00081A  EE20 F004          	lfsr	2,4
  4576  00081E  5001               	movf	fifoGet@fifo,w,c
  4577  000820  26D9               	addwf	fsr2l,f,c
  4578  000822  5002               	movf	fifoGet@fifo+1,w,c
  4579  000824  22DA               	addwfc	fsr2h,f,c
  4580  000826  EE10 F005          	lfsr	1,5
  4581  00082A  5001               	movf	fifoGet@fifo,w,c
  4582  00082C  26E1               	addwf	fsr1l,f,c
  4583  00082E  5002               	movf	fifoGet@fifo+1,w,c
  4584  000830  22E2               	addwfc	fsr1h,f,c
  4585  000832  50DE               	movf	postinc2,w,c
  4586  000834  18E6               	xorwf	postinc1,w,c
  4587  000836  A4D8               	btfss	status,2,c
  4588  000838  D008               	goto	i2l2278
  4589                           
  4590                           ;fifo.c: 90: {
  4591                           ;fifo.c: 91: fifo->status|=2;
  4592  00083A  EE20 F003          	lfsr	2,3
  4593  00083E  5001               	movf	fifoGet@fifo,w,c
  4594  000840  26D9               	addwf	fsr2l,f,c
  4595  000842  5002               	movf	fifoGet@fifo+1,w,c
  4596  000844  22DA               	addwfc	fsr2h,f,c
  4597  000846  0E00               	movlw	0
  4598  000848  82DB               	bsf	plusw2,1,c
  4599  00084A                     i2l2278:
  4600                           
  4601                           ;fifo.c: 92: }
  4602                           ;fifo.c: 93: return 1;
  4603  00084A  0E01               	movlw	1
  4604  00084C  0012               	return	
  4605  00084E                     __end_of_fifoGet:
  4606                           	opt stack 0
  4607  0000                     pclatu	equ	0xFFB
  4608                           pclath	equ	0xFFA
  4609                           tblptru	equ	0xFF8
  4610                           tblptrh	equ	0xFF7
  4611                           tblptrl	equ	0xFF6
  4612                           tablat	equ	0xFF5
  4613                           prodh	equ	0xFF4
  4614                           prodl	equ	0xFF3
  4615                           intcon	equ	0xFF2
  4616                           intcon3	equ	0xFF0
  4617                           postinc0	equ	0xFEE
  4618                           fsr0h	equ	0xFEA
  4619                           fsr0l	equ	0xFE9
  4620                           wreg	equ	0xFE8
  4621                           indf1	equ	0xFE7
  4622                           postinc1	equ	0xFE6
  4623                           postdec1	equ	0xFE5
  4624                           fsr1h	equ	0xFE2
  4625                           fsr1l	equ	0xFE1
  4626                           indf2	equ	0xFDF
  4627                           postinc2	equ	0xFDE
  4628                           postdec2	equ	0xFDD
  4629                           plusw2	equ	0xFDB
  4630                           fsr2h	equ	0xFDA
  4631                           fsr2l	equ	0xFD9
  4632                           status	equ	0xFD8
  4633                           pclatu	equ	0xFFB
  4634                           pclath	equ	0xFFA
  4635                           tblptru	equ	0xFF8
  4636                           tblptrh	equ	0xFF7
  4637                           tblptrl	equ	0xFF6
  4638                           tablat	equ	0xFF5
  4639                           prodh	equ	0xFF4
  4640                           prodl	equ	0xFF3
  4641                           intcon	equ	0xFF2
  4642                           intcon3	equ	0xFF0
  4643                           postinc0	equ	0xFEE
  4644                           fsr0h	equ	0xFEA
  4645                           fsr0l	equ	0xFE9
  4646                           wreg	equ	0xFE8
  4647                           indf1	equ	0xFE7
  4648                           postinc1	equ	0xFE6
  4649                           postdec1	equ	0xFE5
  4650                           fsr1h	equ	0xFE2
  4651                           fsr1l	equ	0xFE1
  4652                           indf2	equ	0xFDF
  4653                           postinc2	equ	0xFDE
  4654                           postdec2	equ	0xFDD
  4655                           plusw2	equ	0xFDB
  4656                           fsr2h	equ	0xFDA
  4657                           fsr2l	equ	0xFD9
  4658                           status	equ	0xFD8
  4659                           
  4660                           	psect	rparam
  4661  0000                     pclatu	equ	0xFFB
  4662                           pclath	equ	0xFFA
  4663                           tblptru	equ	0xFF8
  4664                           tblptrh	equ	0xFF7
  4665                           tblptrl	equ	0xFF6
  4666                           tablat	equ	0xFF5
  4667                           prodh	equ	0xFF4
  4668                           prodl	equ	0xFF3
  4669                           intcon	equ	0xFF2
  4670                           intcon3	equ	0xFF0
  4671                           postinc0	equ	0xFEE
  4672                           fsr0h	equ	0xFEA
  4673                           fsr0l	equ	0xFE9
  4674                           wreg	equ	0xFE8
  4675                           indf1	equ	0xFE7
  4676                           postinc1	equ	0xFE6
  4677                           postdec1	equ	0xFE5
  4678                           fsr1h	equ	0xFE2
  4679                           fsr1l	equ	0xFE1
  4680                           indf2	equ	0xFDF
  4681                           postinc2	equ	0xFDE
  4682                           postdec2	equ	0xFDD
  4683                           plusw2	equ	0xFDB
  4684                           fsr2h	equ	0xFDA
  4685                           fsr2l	equ	0xFD9
  4686                           status	equ	0xFD8
  4687                           
  4688                           	psect	temp
  4689  00003A                     btemp:
  4690                           	opt stack 0
  4691  00003A                     	ds	1
  4692  0000                     int$flags	set	btemp
  4693                           pclatu	equ	0xFFB
  4694                           pclath	equ	0xFFA
  4695                           tblptru	equ	0xFF8
  4696                           tblptrh	equ	0xFF7
  4697                           tblptrl	equ	0xFF6
  4698                           tablat	equ	0xFF5
  4699                           prodh	equ	0xFF4
  4700                           prodl	equ	0xFF3
  4701                           intcon	equ	0xFF2
  4702                           intcon3	equ	0xFF0
  4703                           postinc0	equ	0xFEE
  4704                           fsr0h	equ	0xFEA
  4705                           fsr0l	equ	0xFE9
  4706                           wreg	equ	0xFE8
  4707                           indf1	equ	0xFE7
  4708                           postinc1	equ	0xFE6
  4709                           postdec1	equ	0xFE5
  4710                           fsr1h	equ	0xFE2
  4711                           fsr1l	equ	0xFE1
  4712                           indf2	equ	0xFDF
  4713                           postinc2	equ	0xFDE
  4714                           postdec2	equ	0xFDD
  4715                           plusw2	equ	0xFDB
  4716                           fsr2h	equ	0xFDA
  4717                           fsr2l	equ	0xFD9
  4718                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         299
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      57
    BANK0           160     51      76
    BANK1           256      0     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    uart.buf	PTR unsigned char  size(2) Largest target is 0
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    ledTact@led	PTR struct . size(2) Largest target is 9
		 -> ledTx(COMRAM[9]), ledRx(COMRAM[9]), 

    ledFlash@led	PTR struct . size(2) Largest target is 9
		 -> ledTx(COMRAM[9]), ledRx(COMRAM[9]), 

    ledOff@led	PTR struct . size(2) Largest target is 9
		 -> ledTx(COMRAM[9]), ledRx(COMRAM[9]), 

    ledOn@led	PTR struct . size(2) Largest target is 9
		 -> ledTx(COMRAM[9]), ledRx(COMRAM[9]), 

    ledInit@led	PTR struct . size(2) Largest target is 9
		 -> ledTx(COMRAM[9]), ledRx(COMRAM[9]), 

    uartIsTransmitting@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartIsTransmitting@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartIsTransmitting@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartIsTransmitting@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartIsTransmitting@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartRecvBufferFull@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartRecvBufferFull@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartRecvBufferFull@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartRecvBufferFull@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartRecvBufferFull@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartSendBufferFull@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartSendBufferFull@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartSendBufferFull@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartSendBufferFull@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartSendBufferFull@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartStatus@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartStatus@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartStatus@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartStatus@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartStatus@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartTransmitAll@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartTransmitAll@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartTransmitAll@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartTransmitAll@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartTransmitAll@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartInterruptHandler@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartInterruptHandler@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartInterruptHandler@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartInterruptHandler@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartInterruptHandler@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartInterruptHandler@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    uartInterruptHandler@txsta	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXSTA2(SFR_1[1]), TXSTA1(SFR_1[1]), 

    uartInterruptHandler@rcsta	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCSTA2(SFR_1[1]), RCSTA1(SFR_1[1]), 

    uartRecvBuf@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartRecvBuf@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartRecvBuf@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartRecvBuf@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartRecvBuf@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartRecvByte@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartRecvByte@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartRecvByte@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartRecvByte@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartRecvByte@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartSendBuf@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartSendBuf@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartSendBuf@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartSendBuf@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartSendBuf@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartSendString0@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartSendString0@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartSendString0@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartSendString0@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartSendString0@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartSendString@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartSendString@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartSendString@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartSendString@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartSendString@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartSendByte@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartSendByte@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartSendByte@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartSendByte@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartSendByte@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartEnableHalfDuplex@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartEnableHalfDuplex@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartEnableHalfDuplex@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartEnableHalfDuplex@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartEnableHalfDuplex@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartEnableRecv@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartEnableRecv@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartEnableRecv@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartEnableRecv@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartEnableRecv@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartEnableRecv@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    uartEnableSend@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartEnableSend@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartEnableSend@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartEnableSend@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartEnableSend@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartEnableSend@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    uartInitHalfDuplex@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartInitHalfDuplex@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartInitHalfDuplex@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartInitHalfDuplex@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartInitHalfDuplex@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartInitHalfDuplex@port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartInitHalfDuplex@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    SetBaudRate@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    SetBaudRate@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    SetBaudRate@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    SetBaudRate@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    SetBaudRate@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    SetBaudRate@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    GetBaudRateConfig@brgl	PTR unsigned char  size(2) Largest target is 1
		 -> SetBaudRate@l(BANK0[1]), 

    GetBaudRateConfig@brgh	PTR unsigned char  size(2) Largest target is 1
		 -> SetBaudRate@h(BANK0[1]), 

    GetBaudRateConfig@setBRG16	PTR unsigned char  size(2) Largest target is 1
		 -> SetBaudRate@brg16(BANK0[1]), 

    uartInit@recvbuf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), 

    uartInit@sendbuf	PTR unsigned char  size(2) Largest target is 128
		 -> uartSendBuffer(BANK1[128]), 

    uartInit@uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uartInit@uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uartInit@uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uartInit@uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartInit@uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uartInit@uart	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    S193$hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    uart.hdPort	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATB(SFR_1[1]), 

    S193$rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    uart.rxReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> RCREG2(SFR_1[1]), RCREG1(SFR_1[1]), 

    S193$txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uart.txReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TXREG2(SFR_1[1]), TXREG1(SFR_1[1]), 

    uart.recvFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    uart.sendFifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    fifoWipeBuffer@fifoBuf.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    fifoGetBuf@fifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    fifoGet@get	PTR unsigned char  size(2) Largest target is 1
		 -> uartTransmitAll@data(COMRAM[1]), uartInterruptHandler@data(COMRAM[1]), fifoGetBuf@elem(COMRAM[1]), 

    fifoGet@fifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    fifoGet@fifo	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    fifoPut@fifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    fifoPut@fifo	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 

    S21$buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    fifoInit@fifo.buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    fifoInit@buf	PTR unsigned char  size(2) Largest target is 128
		 -> uartRecvBuffer(BANK1[128]), uartSendBuffer(BANK1[128]), 

    fifoInit@fifo	PTR struct . size(2) Largest target is 30
		 -> uart(BANK0[25]), 


Critical Paths under _main in COMRAM

    _InitUart->_uartEnableRecv
    _InitUart->_uartEnableSend
    _InitSystem->_SetupInternalOscillator

Critical Paths under _IntHighRoutine in COMRAM

    _IntHighRoutine->_uartInterruptHandler
    _uartInterruptHandler->_fifoGet

Critical Paths under _main in BANK0

    _InitUart->_uartInit
    _uartInit->_SetBaudRate
    _SetBaudRate->_GetBaudRateConfig
    _InitSystem->_ledInit
    _LoadConfigData->_EERead

Critical Paths under _IntHighRoutine in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _IntHighRoutine in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _IntHighRoutine in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _IntHighRoutine in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _IntHighRoutine in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _IntHighRoutine in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9509
                         _InitSystem
                           _InitUart
                           _ledFlash
                             _ledOff
                              _ledOn
                            _ledTact
                            _myDelay
 ---------------------------------------------------------------------------------
 (1) _myDelay                                              6     2      4     245
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _ledTact                                              4     2      2     676
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _ledOn                                                2     0      2     273
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ledOff                                               2     0      2     273
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ledFlash                                             2     0      2     242
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _InitUart                                             0     0      0    6573
                     _uartEnableRecv
                     _uartEnableSend
                           _uartInit
                 _uartInitHalfDuplex
 ---------------------------------------------------------------------------------
 (2) _uartInitHalfDuplex                                   8     3      5     549
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _uartInit                                            20     3     17    3928
                                             34 BANK0     17     0     17
                        _SetBaudRate
                           _fifoInit
 ---------------------------------------------------------------------------------
 (3) _fifoInit                                             5     0      5     819
                                              0 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (3) _SetBaudRate                                         14     4     10    1769
                                             20 BANK0     14     4     10
                  _GetBaudRateConfig
 ---------------------------------------------------------------------------------
 (4) _GetBaudRateConfig                                   20     6     14     799
                                              0 BANK0     20     6     14
 ---------------------------------------------------------------------------------
 (2) _uartEnableSend                                       4     1      3    1823
                                             37 COMRAM     1     1      0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _uartEnableRecv                                       4     1      3     273
                                             37 COMRAM     1     1      0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _InitSystem                                           0     0      0    1227
                     _LoadConfigData
            _SetupInternalOscillator
                            _ledInit
 ---------------------------------------------------------------------------------
 (2) _ledInit                                              7     0      7     968
                                              0 BANK0      7     0      7
 ---------------------------------------------------------------------------------
 (2) _SetupInternalOscillator                              3     2      1     214
                                             37 COMRAM     1     0      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _LoadConfigData                                       0     0      0      45
                             _EERead
 ---------------------------------------------------------------------------------
 (3) _EERead                                               3     3      0      45
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _IntHighRoutine                                      14    14      0    2727
                                             23 COMRAM    14    14      0
               _uartInterruptHandler
 ---------------------------------------------------------------------------------
 (6) _uartInterruptHandler                                16    14      2    2727
                                              7 COMRAM    16    14      2
                            _fifoGet
                            _fifoPut
                   i2_uartEnableSend
 ---------------------------------------------------------------------------------
 (7) i2_uartEnableSend                                     4     1      3     118
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (7) _fifoPut                                              6     3      3    1046
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (7) _fifoGet                                              7     3      4     894
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitSystem
     _LoadConfigData
       _EERead
     _SetupInternalOscillator
     _ledInit
   _InitUart
     _uartEnableRecv
     _uartEnableSend
     _uartInit
       _SetBaudRate
         _GetBaudRateConfig
       _fifoInit
     _uartInitHalfDuplex
   _ledFlash
   _ledOff
   _ledOn
   _ledTact
   _myDelay

 _IntHighRoutine (ROOT)
   _uartInterruptHandler
     _fifoGet
     _fifoPut
     i2_uartEnableSend

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0     100       8      100.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     33      4C       6       47.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     26      39       1       60.6%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     185       3        0.0%
DATA                 0      0     185       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue May 09 21:29:02 2017

__size_of_SetupInternalOscillator 007E                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
          __end_of_IntHighRoutine 008E                      __CFG_CP3$OFF 000000  
                 uartInit@recvbuf 0090                   uartInit@sendbuf 008D  
                             l263 0C3E                               l265 0C54  
                             l378 0672                      __CFG_CPB$OFF 000000  
                    __CFG_CPD$OFF 000000                               i2l8 08F0  
                             u921 02EA                               u945 0FE6  
                             u946 0FE8                               u965 0C48  
                             u966 0C4A                               u975 0C5E  
                             u976 0C60                               u985 0CB2  
                             u986 0CB4                               u994 0A14  
                             u995 0A0E                               _adr 0039  
                             wreg 000FE8                        _TXSTA1bits 000FAC  
                      _TXSTA2bits 000F72                  uartInit@recvSize 0092  
                uartInit@sendSize 008F                      __CFG_LVP$OFF 000000  
                            l3102 04D4                              l3060 0318  
                            l3070 034A                              l3062 0322  
                            l3054 02FA                              l4040 039A  
                            l3064 032C                              l3056 0304  
                            l4050 03D6                              l4042 03A6  
                            l4034 036A                              l3066 0336  
                            l3058 030E                              l3242 0C6A  
                            l3340 0EAE                              l4060 049C  
                            l3084 0442                              l4036 03EE  
                            l4052 03E2                              l4044 03B2  
                            l3068 0340                              l3076 034E  
                            l3316 05EA                              l3350 0E62  
                            l3334 0E82                              l4062 04A4  
                            l3086 044C                              l4046 03BE  
                            l4038 0404                              l3078 0416  
                            l3318 05FA                              l3262 0506  
                            l3414 0DE2                              l3344 0E32  
                            l3336 0E98                              l4064 04B0  
                            l4056 047E                              l3088 0456  
                            l3096 0462                              l4048 03CA  
                            l3440 06DC                              l3416 0DEC  
                            l3346 0E4A                              l4066 04BC  
                            l4058 04C8                              l3290 057C  
                            l3418 0E02                              l3444 0706  
                            l3446 0718                              l3464 0982  
                            u1020 0664                              _LATA 000F89  
                            _LATB 000F8A                              _PIE1 000F9D  
                            _PIE2 000FA0                              _PIE3 000FA3  
                            _PIE4 000F7A                              _PIE5 000F7D  
                            i2l34 081A                              _main 0924  
                    EERead@orgGIE 0061                              _uart 0093  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            btemp 003A                     __CFG_BORV$190 000000  
          __end_of_LoadConfigData 101A                              prodh 000FF4  
                            prodl 000FF3                              start 008E  
                   __CFG_IESO$OFF 000000                      ___param_bank 000000  
       __size_ofi2_uartEnableSend 004A                      _BAUDCON1bits 000FB8  
                    _BAUDCON2bits 000F70                   ?_IntHighRoutine 0001  
            GetBaudRateConfig@brg 0072                             ?_main 0001  
            GetBaudRateConfig@osc 0064                             _EEADR 000FA9  
                           i2l312 018E                     EERead@adresse 0060  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
                 __end_of_fifoGet 084E                    __CFG_EBTR0$OFF 000000  
                  __CFG_FCMEN$OFF 000000                   __end_of_fifoPut 0924  
                  __CFG_EBTR1$OFF 000000                   __end_of_ledInit 0DE0  
                  __CFG_EBTR2$OFF 000000                   __end_of_ledTact 0770  
                  __CFG_EBTR3$OFF 000000                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBTRB$OFF 000000                             _ledOn 0F8A  
                           _ledRx 0030                             _ledTx 0027  
                 __end_of_myDelay 0E30                __CFG_MCLRE$EXTMCLR 000000  
                           pclath 000FFA                             tablat 000FF5  
                           plusw2 000FDB                     ??_SetBaudRate 0026  
                           status 000FD8                    __CFG_HFOFST$ON 000000  
                 ?_LoadConfigData 0001                    __CFG_PBADEN$ON 000000  
     __size_of_uartInitHalfDuplex 00B4                   __initialization 0F16  
                    __end_of_main 09DA                        _InitSystem 0B3C  
                __end_of_InitUart 0B3C                            ??_main 0027  
                   __activetblptr 000002            uartInitHalfDuplex@uart 0060  
          uartInitHalfDuplex@port 0062                    __CFG_PLLCFG$ON 000000  
       uartInterruptHandler@rcsta 0015      __end_of_uartInterruptHandler 02C4  
       uartInterruptHandler@txsta 000E                            ?_ledOn 0060  
           GetBaudRateConfig@brgh 006A             GetBaudRateConfig@brgl 006C  
           GetBaudRateConfig@rate 0060                            _EEDATA 000FA8  
                          _EECON2 000FA7                            _EERead 0FC2  
                          i2l2244 0862                            i2l2256 0920  
                          i2l2266 0784                            i2l2522 0094  
                          i2l2278 084A                            i2l2390 0ECE  
                          i2l2550 01C2                    __CFG_WDTEN$OFF 000000  
                          i2l2392 0EE4                            i2l2528 00D0  
                          i2l2536 0112                            i2l2562 0228  
                          i2l2554 01FE                            i2l2546 01B0  
                          i2l2538 012C                            i2l2396 0EFA  
                          i2l2572 0254                            i2l2556 0210  
                          i2l2582 029E                            i2l2576 028A  
                          i2l2584 02B8                            i2l2578 0294  
                          _INTCON 000FF2                            _RCREG1 000FAE  
                          _RCREG2 000F74                            _RCSTA1 000FAB  
                          _RCSTA2 000F71                            _SPBRG1 000FAF  
                          _SPBRG2 000F75                            _TXREG1 000FAD  
                          _TXREG2 000F73                            _TXSTA1 000FAC  
                          _TXSTA2 000F72                  __end_of_fifoInit 0D7E  
                __end_of_ledFlash 1010                    __CFG_PWRTEN$ON 000000  
                  __CFG_XINST$OFF 000000               __end_of_SetBaudRate 0C88  
                  __CFG_STVREN$ON 000000                            _ledOff 0F50  
         _SetupInternalOscillator 0C88                            clear_0 0F1E  
                          clear_1 0F30                            clear_2 0F3C  
                       ??_fifoGet 0005                         ??_fifoPut 0004  
                       ??_ledInit 0026                         ??_ledTact 0062  
                       ??_myDelay 0026                  __end_of_uartInit 064A  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8           __size_of_uartEnableRecv 0050  
         __size_of_uartEnableSend 004C                        __accesstop 0060  
         __end_of__initialization 0F42                     ___rparam_used 000001  
                  __pcstackCOMRAM 0001                  i2_uartEnableSend 0ECC  
                     ?_InitSystem 0001                     __end_of_ledOn 0FC2  
                         ??_ledOn 0026                        __pbssBANK0 0093  
                      __pbssBANK1 0100                           ?_EERead 0001  
                       ?_InitUart 0001                        __pnvCOMRAM 0039  
                     _SetBaudRate 0BE6                __CFG_CCP2MX$PORTC1 000000  
            _uartInterruptHandler 0092         ??_SetupInternalOscillator 0060  
                ??_IntHighRoutine 0018                __CFG_CCP3MX$PORTB5 000000  
                         ?_ledOff 0060         GetBaudRateConfig@setBRG16 0068  
                         _INTCON3 000FF0                           _SPBRGH1 000FB0  
                         _SPBRGH2 000F76                         ?_fifoInit 0060  
                       ?_ledFlash 0060                  ??_LoadConfigData 0026  
                 SetBaudRate@rate 0076                   SetBaudRate@uart 0074  
             __size_of_InitSystem 00AA                   __size_of_EERead 002A  
                      ??_InitUart 0027                           __Hparam 0000  
           ?_uartInterruptHandler 0008                           __Lparam 0000  
                       ?_uartInit 0082                   __size_of_ledOff 003A  
                         __pcinit 0F16                           __ramtop 0600  
                         _fifoGet 0770                           _fifoPut 084E  
                         __ptext0 0924                           __ptext1 0DE0  
                         __ptext2 064A                           __ptext3 0F8A  
                         __ptext4 0F50                           __ptext5 0FEC  
                         __ptext6 0A8E                           _ledInit 0D7E  
                         __ptext7 09DA                           __ptext8 04F2  
                         __ptext9 0D06                           _ledTact 064A  
                    SetBaudRate@h 007F                      SetBaudRate@l 0080  
                    SetBaudRate@o 007E                           _myDelay 0DE0  
                  _uartEnableRecv 0E30                    _uartEnableSend 0E80  
                      ??_fifoInit 0026                        ??_ledFlash 0026  
                     uartInit@osc 0089                       uartInit@num 0084  
            end_of_initialization 0F42                     __Lmediumconst 0000  
              uartEnableRecv@uart 0060        __end_of_uartInitHalfDuplex 0A8E  
              uartEnableSend@uart 0060                        fifoGet@get 0003  
                      ??_uartInit 0026                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                      fifoPut@put 0003                        ledInit@led 0060  
                      ledInit@off 0064            __end_of_uartEnableRecv 0E80  
          __end_of_uartEnableSend 0ECC                        ledTact@led 0060  
                       _TRISAbits 000F92                         _TRISBbits 000F93  
                       _TRISCbits 000F94          __end_ofi2_uartEnableSend 0F16  
                  _uartRecvBuffer 0100                    __end_of_EERead 0FEC  
          ??_uartInterruptHandler 000A                    _uartSendBuffer 0180  
            uartInitHalfDuplex@bt 0064                      ??_InitSystem 0027  
                  __end_of_ledOff 0F8A                   ?_uartEnableRecv 0060  
                 ?_uartEnableSend 0060               start_initialization 0F16  
                        ??_EERead 0026                __end_of_InitSystem 0BE6  
                    ?_SetBaudRate 0074                        myDelay@per 0060  
               __size_of_InitUart 00AE                 _GetBaudRateConfig 02C4  
              ?_GetBaudRateConfig 0060                          ??_ledOff 0026  
             ??_GetBaudRateConfig 006E                       __pbssCOMRAM 0027  
                   __pcstackBANK0 0060                 __size_of_fifoInit 0078  
               __size_of_ledFlash 0024         __end_of_GetBaudRateConfig 04F2  
                       __pintcode 0008                 __size_of_uartInit 0158  
                        ?_fifoGet 0001                  __CFG_PRICLKEN$ON 000000  
                        ?_fifoPut 0001                          ?_ledInit 0060  
                        ?_ledTact 0060                    SetBaudRate@osc 007A  
                        ?_myDelay 0060                    __size_of_ledOn 0038  
           i2uartEnableSend@onoff 0003          ?_SetupInternalOscillator 0026  
                        _IPR1bits 000F9F                          _IPR3bits 000FA5  
                        _PIE1bits 000F9D                          _PIE3bits 000FA3  
                        _PIR1bits 000F9E                          _PIR2bits 000FA1  
                        _PIR3bits 000FA4                          _RCONbits 000FD0  
                __CFG_WDTPS$32768 000000                         ledOff@led 0060  
                       ledInit@bm 0066                         ledInit@on 0062  
  SetupInternalOscillator@setBits 0061                _uartInitHalfDuplex 09DA  
                SetBaudRate@brg16 0081               ?_uartInitHalfDuplex 0060  
         __size_of_IntHighRoutine 0086                 ?i2_uartEnableSend 0001  
        uartInterruptHandler@fErr 0012                ??i2_uartEnableSend 0004  
        uartInterruptHandler@oErr 0013          uartInterruptHandler@data 0017  
                        _InitUart 0A8E          uartInterruptHandler@uart 0008  
      __size_of_GetBaudRateConfig 022E                        _EECON1bits 000FA6  
            ??_uartInitHalfDuplex 0065       uartInterruptHandler@iRxFlag 0014  
     uartInterruptHandler@iTxFlag 0010                          __Hrparam 0000  
            __size_of_SetBaudRate 00A2           __size_of_LoadConfigData 000A  
                        __Lrparam 0000                __CFG_BOREN$SBORDIS 000000  
               __CFG_P2BMX$PORTB5 000000                  ??_uartEnableRecv 0026  
                ??_uartEnableSend 0026                        _ANSELAbits 000F38  
                      _ANSELCbits 000F3A                  __size_of_fifoGet 00DE  
                __size_of_fifoPut 00D6                  __size_of_ledInit 0062  
                __size_of_ledTact 0126                  __size_of_myDelay 0050  
                        _fifoInit 0D06                          _ledFlash 0FEC  
                        __ptext10 0BE6                          __ptext11 02C4  
                        __ptext20 0092                          __ptext12 0E80  
                        __ptext21 0ECC                          __ptext13 0E30  
                        __ptext22 084E                          __ptext14 0B3C  
                        __ptext23 0770                          __ptext15 0D7E  
                        __ptext16 0C88                          __ptext17 1010  
                        __ptext18 0FC2   __end_of_SetupInternalOscillator 0D06  
                     _OSCCON2bits 000FD2                     __size_of_main 00B6  
            i2uartEnableSend@uart 0001     __size_of_uartInterruptHandler 0232  
                        _uartInit 04F2                          ledOn@led 0060  
                        int$flags 003A                      uartInit@baud 0085  
                    uartInit@uart 0082                      fifoInit@fifo 0060  
                    fifoInit@size 0064                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2                          myDelay@i 0064  
             uartEnableRecv@onoff 0062                          intlevel2 0000  
             uartEnableSend@onoff 0062                        _RCSTA1bits 000FAB  
                      _RCSTA2bits 000F71                       fifoGet@fifo 0001  
                      _OSCCONbits 000FD3                       fifoInit@buf 0062  
   uartInterruptHandler@iRxEnable 0011                       ledFlash@led 0060  
   uartInterruptHandler@iTxEnable 000D                    _IntHighRoutine 0008  
                     fifoPut@fifo 0001                 __CFG_T3CMX$PORTC0 000000  
               __CFG_FOSC$INTIO67 000000      SetupInternalOscillator@enpll 0026  
                  _LoadConfigData 1010  
